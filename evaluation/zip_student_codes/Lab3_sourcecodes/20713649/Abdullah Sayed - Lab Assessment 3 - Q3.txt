#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure for Student
typedef struct Student {
    char name[100];
    int id;
    float grade;
    struct Student* next;
} Student;

Student* head = NULL;

// Function to create a new student node
Student* createStudent(const char* name, int id, float grade) {
    Student* NewStudent = malloc(sizeof(Student));
    
    strcpy(NewStudent->name, name);         //Assign name, id, and grade to NewStudent
    NewStudent->id = id;    
    NewStudent->grade = grade;
    NewStudent->next = NULL;            //The next pointer in NewStudent points to NULL because it is an independent node
    
    return NewStudent;          //Return NewStudent to be used in insertStudent
}

// Function to insert a new student record
void insertStudent(const char* name, int id, float grade) {
    Student* NewStudent = createStudent(name, id, grade);
    NewStudent->next = head;            //NewStudent next pointer now points to the head of the list
    head = NewStudent;              //head points to NewStudent, making NewStudent the top of the list
}

// Function to display all student records
void displayStudents() {
    if (head == NULL) {
        printf("\nNo Student Records Saved\n");         //Check if records are empty by checking if head of records is empty
        return;
    }
    
    Student* tempptr = head;            //Create temporary pointer that points to head
    
    printf("\nStudent Records:\n");
    
    while (tempptr != NULL) {          //Keeps going through list while tempptr is not NULL (aka head is not NULL)
        printf("\nName: %s, ID: %d, Grade: %.2f", tempptr->name, tempptr->id, tempptr->grade);
        
        tempptr = tempptr->next;       //Set value of tempptr to next on the list
    }
}

// Function to search for a student by ID
Student* searchStudentByID(int id) {
    Student* tempptr = head;
    
    while (tempptr != NULL) {
        if (tempptr->id == id) {
            return tempptr;
        } else {
            tempptr = tempptr->next;
        }
    }
    
    return NULL;
}

// Function to delete the entire list
void deleteList() {
    Student* current = head;
    Student* next;
    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }
    head = NULL;
}

void freeMemory() {
    deleteList();
}

// Bubble Sort function
void sortStudents() {
    if (head == NULL || head->next == NULL) {
        printf("\nNo Student Records Saved\n");         //Check if records are empty or if there is only 1 student saved
        return;
    }
    
    int swapped;
    Student* mainptr;
    Student* nextptr = NULL;

    do {
        swapped = 0;
        mainptr = head;
        
        while (mainptr->next != nextptr) {
            if (mainptr->grade < mainptr->next->grade) {
                
                // Swap the data
                char tempName[50];
                int tempID;
                float tempGrade;
                
                strcpy(tempName, mainptr->name);
                tempID = mainptr->id;
                tempGrade = mainptr->grade;
                
                strcpy(mainptr->name, mainptr->next->name);
                mainptr->id = mainptr->next->id;
                mainptr->grade = mainptr->next->grade;
                
                strcpy(mainptr->next->name, tempName);
                mainptr->next->id = tempID;
                mainptr->next->grade = tempGrade;
                
                swapped = 1;                
            }
            mainptr = mainptr->next;
        }
        nextptr = mainptr;
    } while (swapped == 1);     //Repeat until nothing swapped around anymore, meaning sorting is done
    printf("Records sorted by grade.\n");
}

// Main function to drive the program
int main() {
    int choice, id;
    char name[100];
    float grade;
    do {
        printf("\n1. Insert Student Record\n");
        printf("2. Display Student Records\n");
        printf("3. Sort Records (Bubble Sort)\n");
        printf("4. Search Record by ID\n");
        printf("5. Delete List\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // To consume the newline character
        
        switch (choice) {
            case 1:
                printf("Enter Name: ");
                fgets(name, sizeof(name), stdin);
                strtok(name, "\n");
                printf("Enter ID: ");
                scanf("%d", &id);
                printf("Enter Grade: ");
                scanf("%f", &grade);
                insertStudent(name, id, grade);
                break;
            case 2:
                displayStudents();
                break;
            case 3:
                sortStudents();
                break;
            case 4:
                printf("Enter ID to search: ");
                scanf("%d", &id);
                Student* found = searchStudentByID(id);
                if (found) {
                printf("Found: Name: %s, ID: %d, Grade: %.2f\n",
                found->name, found->id, found->grade);
                } else {
                printf("Student not found.\n");
                }
                break;
            case 5:
                deleteList();
                printf("List deleted.\n");
                break;
            case 6:
                freeMemory();
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 6);
    
    return 0;
}