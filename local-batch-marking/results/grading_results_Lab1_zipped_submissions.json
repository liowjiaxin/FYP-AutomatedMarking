{
  "successful": [
    {
      "submission": "20409676.zip",
      "marks": 5.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but has significant flaws in implementation and code quality. Let's break down the feedback for each question:\n\n**Question 1:**\nYour code for Question 1 is functionally correct in printing the grid of asterisks. However, it lacks comments explaining the code's logic, which is a significant part of the grading criteria.  The use of more descriptive variable names (e.g., `rows`, `cols` instead of `row1`, `col1`) would improve readability.  While the output is correct, the lack of comments results in a deduction of marks.\n\n**Question 2:**\nThis question shows a more serious lack of understanding. Your approach to finding the largest and smallest numbers is inefficient and incorrect.  You have multiple `if` statements that don't cover all possible scenarios.  A more efficient and elegant solution would involve comparing each number sequentially.  The use of multiple `printf` statements within the `if` blocks for printing the largest and smallest numbers is also poor practice.  A single `printf` statement after determining the largest and smallest would be more efficient and readable.  Furthermore, the code lacks comments, and the output format doesn't match the sample output provided in the assignment.  The calculation of the average is also not formatted correctly.\n\n**Question 3:**\nThis question reveals a fundamental misunderstanding of how to use a `switch` statement and handle user input. Your `switch` statement only handles cases 1-4 and 5, but the prompt asks for 0 to exit.  The discount calculation is also incorrect; you're dividing the cost by the discount percentage instead of subtracting the discounted amount.  The use of `&` before `cost` and `discprice` in `printf` statements is incorrect; you should print the values directly, not their memory addresses.  The code lacks comments and doesn't handle invalid input gracefully.  The repeated code for each case in the `switch` statement is inefficient and violates the DRY principle.  A more efficient approach would be to consolidate the common code into a separate function.\n\nOverall, your code needs significant improvements in terms of logic, efficiency, readability, and adherence to the assignment's requirements.  Focus on improving your understanding of fundamental programming concepts, using appropriate data types, and writing well-structured, commented code.  Refer to the provided sample answers and pay close attention to the use of loops, conditional statements, and input/output handling.",
      "code_files": [
        "20409676_Edwin Bundan\\20409676_Edwin Bundan\\Test_1_Q1.c",
        "20409676_Edwin Bundan\\20409676_Edwin Bundan\\Test_1_Q2.c",
        "20409676_Edwin Bundan\\20409676_Edwin Bundan\\Test_1_Q3.c"
      ]
    },
    {
      "submission": "20577892.zip",
      "marks": 4.0,
      "feedback": "Your submission demonstrates a partial understanding of the assignment requirements.  Let's break down the feedback for each question:\n\n**Q1:** Your code for Q1 has several issues.  The loop variables `i` and `j` are incorrectly used and not properly initialized. The `width` variable is undefined. The logic for printing the grid of asterisks is flawed. You need to correct the loop structure and variable usage to accurately print the grid based on user input.  You received 1 mark for attempting to take user input.\n\n**Q2:** Your Q2 solution correctly calculates the sum, average, and product of three integers. However, the logic for finding the largest and smallest integers is partially correct but could be improved for clarity and efficiency.  The use of multiple `if` statements is acceptable, but a more concise approach could be used. You received 2 marks for the correct sum, average, and product calculations.\n\n**Q3:** Your Q3 code has significant flaws. The `switch` statement is incomplete and lacks proper handling for each product type. The discount calculation is also incorrect. The program doesn't correctly calculate the total cost for each product type and the discount application is flawed. You received 1 mark for attempting to use a switch statement and 1 mark for taking user input. \n\nOverall, your code needs significant improvements in terms of logic, structure, and error handling.  Review the provided sample solutions and focus on understanding the core concepts of loops, conditional statements, and input/output operations in C.  Pay close attention to variable declarations, loop conditions, and the correct use of `printf` and `scanf` functions.  Remember to thoroughly test your code with various inputs to identify and fix errors.",
      "code_files": [
        "20577892_Ahmed_Amin_Mohamed_Osman\\20577892_Ahmed_Amin_Mohamed_Osman\\Q1.c",
        "20577892_Ahmed_Amin_Mohamed_Osman\\20577892_Ahmed_Amin_Mohamed_Osman\\Q2.c",
        "20577892_Ahmed_Amin_Mohamed_Osman\\20577892_Ahmed_Amin_Mohamed_Osman\\Q3.c"
      ]
    },
    {
      "submission": "20580127.zip",
      "marks": 5.5,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but contains several errors and omissions. \n\n**Question 1:** Your code for printing the grid of asterisks has a flawed nested loop structure. The inner loop's starting index is incorrect, leading to an inaccurate number of asterisks printed.  Additionally, the newline character is printed before the asterisks in each row. You also did not follow the prompt to use a single `printf` statement to print each row.  You should review nested loops and `printf` formatting. \n\n**Question 2:** Your solution for calculating the sum, average, product, smallest, and largest of three integers is functional for the limited case of three integers, but it does not meet the requirement of handling a variable number of integers.  The average calculation is also integer division, leading to potential inaccuracies. You should learn how to handle variable-length input and use floating-point division for accurate averages. Your use of `if/else if` statements is also not in line with the prompt's requirement to use only single-selection `if` statements. \n\n**Question 3:** Your code for the grocery store system has several issues.  The `switch` statement is implemented correctly, but the input for weight and price is inconsistent (using `%d` instead of `%f` for floating-point numbers).  The discount calculation is also incorrect; it should subtract the discount from the total cost, not just calculate the discount amount.  The discount calculation is also placed outside the loop, meaning it only applies to the last product entered.  You should carefully review input/output formatting, floating-point arithmetic, and the placement of your discount calculation.  The program also lacks error handling for invalid inputs (e.g., negative weights or quantities). \n\nOverall, your code needs significant improvements in terms of accuracy, efficiency, and adherence to the problem specifications.  Focus on improving your understanding of loops, conditional statements, input/output operations, and arithmetic operations.  Pay close attention to the details of each problem statement and test your code thoroughly with various inputs.",
      "code_files": [
        "20580127_AhmedAbdelhalim\\Lab Assesment 1\\Q1a.c",
        "20580127_AhmedAbdelhalim\\Lab Assesment 1\\Q2.c",
        "20580127_AhmedAbdelhalim\\Lab Assesment 1\\Q3.c"
      ]
    },
    {
      "submission": "20602511.zip",
      "marks": 7.0,
      "feedback": "Your submission demonstrates a basic understanding of C programming, successfully completing the core functionalities of each question. However, there are areas that need significant improvement to meet the standards of the assignment. \n\nQuestion 1: You correctly implemented the nested loops to print the grid of asterisks, fulfilling the core requirement. However, the prompt asked for the user to specify the number of rows and columns, which your code does not fully address.  The use of loop counters starting from 1 instead of 0 is unconventional and could be improved for better readability and consistency with standard C practices. \n\nQuestion 2: Your code calculates the sum, average, and product correctly.  However, the implementation for finding the smallest and largest integers is inefficient and uses multiple if-else statements instead of a more concise approach. The error handling for cases where all three numbers are equal is also inadequate. The prompt specifically requested the use of only single-selection if statements, which your solution does not adhere to. \n\nQuestion 3: The structure of your code for Question 3 is largely correct, using a switch statement to handle different product types and calculating the total and final costs. However, the code is repetitive and could be significantly improved by refactoring to reduce redundancy.  The input validation is minimal and could be enhanced to handle invalid inputs more gracefully.  The discount calculation is implemented correctly. \n\nOverall, your code functions but lacks efficiency, elegance, and adherence to best practices.  Focus on improving code structure, reducing redundancy, and implementing more robust error handling.  Refer to the provided sample answers for guidance on more efficient and elegant solutions.  Consider using more concise methods for finding the minimum and maximum values in Question 2 and streamlining the switch case in Question 3.  Pay close attention to the specific requirements of each question, such as the use of single-selection if statements in Question 2.",
      "code_files": [
        "20602511_Wong Cheuk Kei\\20602511_Wong Cheuk Kei\\Question 1.c",
        "20602511_Wong Cheuk Kei\\20602511_Wong Cheuk Kei\\Question 2.c",
        "20602511_Wong Cheuk Kei\\20602511_Wong Cheuk Kei\\Question 3.c"
      ]
    },
    {
      "submission": "20607863.zip",
      "marks": 9.5,
      "feedback": "Your code demonstrates a good understanding of basic C programming concepts and successfully completes all three questions.  Question 1 and Question 2 are implemented correctly and efficiently.  Your solutions are well-structured and easy to follow.  In Question 3, while the functionality is correct, the code could benefit from some minor improvements in terms of input validation and error handling. For instance, adding checks to ensure the user inputs positive numbers for weights, quantities, and prices would enhance the robustness of your program.  Consider using a more descriptive variable naming convention for better readability. Overall, this is a solid submission showcasing good programming skills.  A few minor improvements in error handling and input validation would elevate the code to an even higher standard.",
      "code_files": [
        "20607863_Dean Agha Koeswantoro\\20607863_Dean Agha Koeswantoro\\Question1.c",
        "20607863_Dean Agha Koeswantoro\\20607863_Dean Agha Koeswantoro\\Question2.c",
        "20607863_Dean Agha Koeswantoro\\20607863_Dean Agha Koeswantoro\\Question3.c"
      ]
    },
    {
      "submission": "20611251.zip",
      "marks": 7.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but needs significant improvements in code quality and adherence to the specifications. \n\nQ1: You successfully implemented the nested loops to print the grid of asterisks, fulfilling the core requirement. However, the spacing between asterisks in the sample output was not replicated.  This resulted in a minor deduction. \n\nQ2: Your code calculates the sum, average, and product correctly. However, your approach to finding the smallest and largest integers is inefficient and doesn't follow the instructions to use only single-selection if statements.  The use of nested if-else statements is not in line with the requirements.  The average calculation should also use floating-point division for better accuracy.  These issues led to a more substantial deduction. \n\nQ3: The program structure is largely correct, using a switch statement and a while loop as specified. However, there are several issues:  You did not handle the case where the user enters an invalid product code gracefully. The input for weight is inconsistent across different product types (sometimes it's weight, sometimes quantity).  The discount calculation is also flawed; it should be `totalcost * (1 - discount/100)`.  These issues resulted in a deduction in marks. \n\nOverall, your code compiles and produces outputs for all questions, but it lacks the polish and attention to detail required for a higher grade.  Focus on improving your code structure, error handling, and adherence to the specific instructions provided in each question.",
      "code_files": [
        "20611251_Adrian Lee Joon Yin\\20611251_Adrian Lee Joon Yin\\Q1.c.c",
        "20611251_Adrian Lee Joon Yin\\20611251_Adrian Lee Joon Yin\\Q2.c.c",
        "20611251_Adrian Lee Joon Yin\\20611251_Adrian Lee Joon Yin\\Q3.c.c"
      ]
    },
    {
      "submission": "20611605.zip",
      "marks": 7.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts, but there are areas that need improvement. \n\nQ1: Your code for Question 1 is functionally correct and achieves the desired output. However, the comments are minimal, and the variable names could be more descriptive.  Consider adding comments to explain the purpose of each section of the code and using more descriptive variable names (e.g., `numRows`, `numCols` instead of `row`, `column`).\n\nQ2: Your solution to Question 2 correctly calculates the sum, average, and product. However, your approach to finding the smallest and largest integers is inefficient and lacks robustness.  It only handles three integers and doesn't account for cases where two or more integers are equal.  A more efficient and robust solution would involve iterating through the input array and updating the `smallest` and `largest` variables accordingly.  The use of multiple `if` statements makes the code less readable and harder to maintain.  Consider using a loop for a more scalable and efficient solution.  Also, error handling for invalid input (non-integer values) is missing.\n\nQ3: Your code for Question 3 is functionally correct, but the structure is repetitive. The code for calculating the cost is repeated for each product type.  This violates the DRY (Don't Repeat Yourself) principle.  A more efficient approach would be to refactor the cost calculation into a separate function that takes the product type and relevant input as parameters.  The switch statement is correctly used, but the code could be more concise and readable.  Also, the program doesn't handle invalid input gracefully.  For example, if the user enters a non-numeric value for weight or price, the program will crash.  Add input validation to prevent this.\n\nOverall, your code demonstrates a functional understanding of the basic concepts, but it lacks efficiency, robustness, and code quality.  Focus on improving code structure, adding comprehensive comments, implementing proper error handling, and applying best practices for efficiency and readability.",
      "code_files": [
        "20612781_Lim Chai Shuen\\20612781_Lim Chai Shuen\\Q1.c",
        "20612781_Lim Chai Shuen\\20612781_Lim Chai Shuen\\Q2.c",
        "20612781_Lim Chai Shuen\\20612781_Lim Chai Shuen\\Q3.c"
      ]
    },
    {
      "submission": "20613250.zip",
      "marks": 9.0,
      "feedback": "Your submission demonstrates a good understanding of basic C programming concepts.  All three questions are attempted and largely functional. \n\n**Q1:** Excellent implementation of nested loops to print the asterisk grid.  The code is concise and efficient.  Minor improvement: using a `for` loop that counts down might be slightly less intuitive than a standard `for` loop that counts up. \n\n**Q2:** Correctly calculates the sum, average, and product of three integers. The logic for finding the smallest and largest integers is functional but could be simplified using a more efficient approach (e.g., iterating through the numbers only once). The use of nested `if` statements is acceptable, although a more concise approach is possible. \n\n**Q3:** The program structure using a `while` loop and `switch` statement is well-implemented. The `counting` function is a good attempt at modularity, but it's better to handle the discount calculation within the main `switch` case to avoid unnecessary function calls.  The input validation could be improved to handle non-numeric inputs more robustly.  The use of `double` for `quan` and `price` is appropriate for handling potential decimal values. \n\nOverall, your code is well-structured and mostly efficient.  Addressing the minor suggestions above would improve the code's readability and efficiency, leading to a higher score.  Consider exploring more efficient algorithms and improving input validation for future assignments.",
      "code_files": [
        "20613250_Eunice Lee Ying Yun\\20613250_Eunice Lee Ying Yun\\q1.c",
        "20613250_Eunice Lee Ying Yun\\20613250_Eunice Lee Ying Yun\\q2.c",
        "20613250_Eunice Lee Ying Yun\\20613250_Eunice Lee Ying Yun\\q3.c"
      ]
    },
    {
      "submission": "20619015.zip",
      "marks": 9.0,
      "feedback": "Your code demonstrates a good understanding of basic C programming concepts.  All three questions are largely functional and produce the expected outputs for the given inputs. \n\nQ1: Excellent implementation of nested loops to generate the asterisk grid.  The code is concise and easy to read. \n\nQ2:  The calculation of sum, average, and product is correct.  The use of if-else statements to find the smallest and largest numbers is also accurate. However, the prompt only asked for three integers, and your solution doesn't handle more than three integers as the example solutions did.  Consider improving this for more robustness. \n\nQ3: The switch statement is well-structured and handles different product types correctly. The discount calculation is also implemented correctly. The program's structure is clear and easy to follow.  However, the use of integers for weight and price in the fruit and vegetable sections might lead to inaccuracies.  Consider using floats for more precision.  Also, the prompt specified a while loop to allow the user to continue entering products until they enter 0 to exit.  Your implementation correctly does this, but the prompt also specified that the program should allow the user to enter a discount percentage for the total cost *after* calculating it.  Your implementation calculates the discount before the total cost is displayed.  This is a minor issue, but it should be addressed for a perfect score.\n\nOverall, your code is well-structured and mostly functional.  Addressing the minor issues mentioned above would significantly improve the code's robustness and accuracy, bringing it closer to a perfect score.",
      "code_files": [
        "20619015_Arianna binti Ainurizam\\20619015_Arianna binti Ainurizam\\Q1.c",
        "20619015_Arianna binti Ainurizam\\20619015_Arianna binti Ainurizam\\Q2.c",
        "20619015_Arianna binti Ainurizam\\20619015_Arianna binti Ainurizam\\Q3.c"
      ]
    },
    {
      "submission": "20621408.zip",
      "marks": 9.0,
      "feedback": "Your code demonstrates a good understanding of the basic concepts for each question.  Q1 is implemented correctly and efficiently. In Q2, your approach to finding the largest and smallest numbers is functional but could be simplified using a loop for better scalability.  The code for Q3 is mostly correct, but it lacks input validation (e.g., checking for negative weights or quantities) and could benefit from consolidating the cost calculation logic to avoid repetition.  The use of `double` instead of `float` for price in Q3 is a good practice.  Overall, your code is well-structured and easy to read, but addressing the mentioned points would improve its robustness and efficiency. Consider using more descriptive variable names for better readability.  For example, instead of `value1`, `value2`, `value3`, use names like `firstNumber`, `secondNumber`, `thirdNumber` in Q2.  A small deduction is applied for not handling potential errors in user input (e.g., non-numeric input) in Q3.",
      "code_files": [
        "20621408_Charles Dan Zhi Jhet\\20621408_Charles Dan Zhi Jhet\\Q1.c",
        "20621408_Charles Dan Zhi Jhet\\20621408_Charles Dan Zhi Jhet\\Q2.c",
        "20621408_Charles Dan Zhi Jhet\\20621408_Charles Dan Zhi Jhet\\Q3.c"
      ]
    },
    {
      "submission": "20701571.zip",
      "marks": 2.0,
      "feedback": "Your submission demonstrates a very limited understanding of the C programming concepts and requirements of the assignment.  Let's break down the issues in each question:\n\n**Q1:** You haven't printed a grid of asterisks as requested. Your code prints numbers instead. The loop structure is partially correct in terms of iterating through rows and columns, but the output is completely wrong. You need to use the '*' character and correctly format the output using printf.  You also need to remove the unnecessary `char i, j = '*';` declaration.  This question is worth 3 marks, and based on your submission, you receive 0 marks.\n\n**Q2:** You only calculate the sum of three integers. The question requires calculating the sum, average, product, smallest, and largest of at least three integers. Your code lacks the necessary calculations and input handling for more than three integers.  You also haven't used the single-selection if statement as requested. This question is worth 3 marks, and you receive 1 mark for partially calculating the sum.\n\n**Q3:** Your code only takes the product code as input and has a very basic if-else structure to handle different product types. It doesn't implement the switch statement as required, nor does it calculate the total cost, apply discounts, or handle the exit condition (0).  The output is also missing. This question is worth 4 marks, and you receive 1 mark for partially taking the product code as input. \n\nOverall, your code needs significant improvement in terms of functionality, logic, and adherence to the assignment's specifications.  Review the provided sample answers and focus on understanding the core concepts of loops, conditional statements, and input/output operations in C.  Pay close attention to the detailed requirements of each question and test your code thoroughly before submission.  Remember to comment your code clearly to explain your logic.",
      "code_files": [
        "20701571_Abdullah Usmani\\20701571_Abdullah Usmani\\Q1.c",
        "20701571_Abdullah Usmani\\20701571_Abdullah Usmani\\Q2.c",
        "20701571_Abdullah Usmani\\20701571_Abdullah Usmani\\Q3.c"
      ]
    },
    {
      "submission": "20701680.zip",
      "marks": 7.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but needs improvement in several areas. \n\nQuestion 1: You correctly implemented the nested loops to print the grid of asterisks, fulfilling the core requirement. However, the prompt for input could be more user-friendly.  The spacing between asterisks is inconsistent compared to the example provided. \n\nQuestion 2: Your code calculates the sum, average, product, smallest, and largest correctly for three integers.  However, it only handles three integers, not a variable number as requested. The use of if-else if-else is acceptable, but the problem specifically asked for single-selection if statements.  The input handling could be improved to gracefully handle non-integer inputs. \n\nQuestion 3: Your implementation of the switch statement is functional, but the input validation is weak.  It only accepts single-digit codes and doesn't handle invalid input gracefully.  The discount calculation is correct.  The program structure is acceptable, but the use of a single switch statement instead of a loop to handle multiple product entries is not ideal.  The program should allow the user to enter multiple products before exiting.\n\nOverall, your code demonstrates a functional understanding of basic programming concepts, but it lacks robustness, flexibility, and adherence to all aspects of the problem statements.  Consider improving input validation, error handling, and the ability to handle a variable number of inputs.  Pay close attention to the specific requirements of each question, including the use of single-selection if statements and the handling of variable numbers of inputs.  Also, improve the user interface by providing clearer prompts and more informative output.",
      "code_files": [
        "20701680_Florence Tinevimbo Chigwida\\Test1.c",
        "20701680_Florence Tinevimbo Chigwida\\test2.c",
        "20701680_Florence Tinevimbo Chigwida\\test3.c"
      ]
    },
    {
      "submission": "20703971.zip",
      "marks": 5.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but contains several significant flaws. Let's break down the feedback for each question:\n\n**Q1:** You have a fundamental error in your loop structure.  You're attempting to print a newline character within the inner loop, which results in incorrect grid formatting. The newline should only be printed *after* each row is complete.  Additionally, you've mistakenly swapped the prompts for rows and columns.  While your comments are present, they are not particularly descriptive or helpful.  You received 1 mark for the input section, but 0 for the loop structure.\n\n**Q2:** Your code correctly calculates the sum, product, and average for three integers. However, your approach to finding the smallest and largest integers is inefficient and doesn't scale well.  You should use a loop to handle an arbitrary number of integers, as suggested in the sample answer.  The use of if/else if/else is acceptable, but a more efficient approach would be to iterate through the numbers.  You also incorrectly use `%d` to print the floating-point average, leading to loss of precision. You received 1 mark for the input/output and 1 mark for the calculations, but 0 for the if/else structure because it doesn't meet the requirements of handling a variable number of integers.\n\n**Q3:** This question shows the least understanding. Your code only handles a single product type and doesn't incorporate a loop to allow multiple product entries.  The `switch` statement is entirely missing.  The discount calculation is correct, but the overall structure is far from the requirements.  You received 0 marks for this question because it doesn't meet any of the requirements.\n\nOverall, your code needs significant improvement in terms of structure, efficiency, and adherence to the problem specifications.  Focus on understanding the logic of nested loops, efficient algorithms for finding min/max values, and the proper use of `switch` statements.  Pay close attention to the sample answers provided and try to understand the underlying logic.  Remember to thoroughly test your code with various inputs to identify and fix errors.",
      "code_files": [
        "20703971_Ahmad Daffa Fatih Aljabbar\\20703971_Ahmad Daffa Fatih Aljabbar\\Q1.c",
        "20703971_Ahmad Daffa Fatih Aljabbar\\20703971_Ahmad Daffa Fatih Aljabbar\\Q2.c",
        "20703971_Ahmad Daffa Fatih Aljabbar\\20703971_Ahmad Daffa Fatih Aljabbar\\Q3.c"
      ]
    },
    {
      "submission": "20705220.zip",
      "marks": 7.5,
      "feedback": "Your code demonstrates a good understanding of basic C programming concepts, successfully completing the core functionality of each question. However, there's room for improvement in terms of code structure, efficiency, and handling of edge cases. \n\nQuestion 1: Your solution correctly prints the grid of asterisks using nested loops.  However, the prompt asks for a space after each asterisk ('* ') which your code is missing.  This is a minor detail but impacts the output's exact match to the sample. \n\nQuestion 2: The implementation correctly calculates the sum, average, product, smallest, and largest of three integers.  The use of separate functions for finding the smallest and largest is a good step towards modularity. However, the program only accepts exactly three integers, not a variable number as specified in the question. This limits the functionality and reduces the marks. \n\nQuestion 3: Your solution correctly implements the switch statement to handle different product types and calculates the final cost after applying the discount. The structure is clear and easy to follow. However, the repeated code for calculating the cost of fruits and vegetables could be improved by creating a function to avoid redundancy.  Also, error handling for invalid inputs (e.g., negative weight or quantity) is missing. \n\nOverall, your code is functional but lacks robustness and efficiency in several areas.  Focus on improving code structure, handling edge cases, and reducing code duplication to enhance the quality of your programs.  Consider using more descriptive variable names and adding comments to explain complex logic.  Remember to always test your code thoroughly with various inputs, including edge cases, to ensure its correctness and robustness.",
      "code_files": [
        "20705220_ErynCheeEnNing\\Exam 1 Programming\\q1.c",
        "20705220_ErynCheeEnNing\\Exam 1 Programming\\q2.c",
        "20705220_ErynCheeEnNing\\Exam 1 Programming\\q3.c"
      ]
    },
    {
      "submission": "20717304.zip",
      "marks": 9.0,
      "feedback": "Your code demonstrates a good understanding of basic C programming concepts.  All three questions are implemented and produce the correct output for the given test cases. \n\nQ1:  The asterisk grid is correctly generated using nested loops.  However, there's a minor formatting issue; the spacing between asterisks isn't consistent with the example provided in the assignment.  Adding a space after each asterisk in the inner loop's printf statement would resolve this. \n\nQ2: The calculations for sum, average, product, smallest, and largest are all correctly implemented using if statements as required.  The code works well for three integers, but it could be improved to handle a variable number of integers as suggested in the question. \n\nQ3: The grocery store cost calculator uses a switch statement effectively to handle different product types. The discount calculation is also correctly implemented. The program structure is well-organized and easy to follow. \n\nOverall, your code is functional and demonstrates a solid grasp of the fundamental concepts.  Addressing the minor formatting issue in Q1 and enhancing Q2 to handle a variable number of integers would significantly improve the code's robustness and adherence to the assignment's specifications.  Consider using more descriptive variable names for better readability.  Good work!",
      "code_files": [
        "20717304_Eashwar\\20717304_Eashwar\\Q1.c",
        "20717304_Eashwar\\20717304_Eashwar\\Q2.c",
        "20717304_Eashwar\\20717304_Eashwar\\Q3.c"
      ]
    },
    {
      "submission": "20717489.zip",
      "marks": 4.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but contains significant errors and omissions. Let's break down the feedback for each question:\n\n**Question 1:** Your code attempts to create a grid of asterisks, but the loop structure is incorrect. The outer loop iterates through columns instead of rows, and the inner loop's condition is also flawed, leading to an incorrect number of asterisks printed.  You also used `scanf_s`, which is a Microsoft-specific function and not standard C.  You need to correct the loop structure to accurately reflect the problem's requirements.  The output is not formatted correctly as specified in the prompt.  You received 1 mark for attempting to get input from the user.\n\n**Question 2:** Your code has several critical issues. First, you haven't correctly declared the `integer` array.  You attempt to use `scanf_s` to read multiple integers into an array that hasn't been allocated memory. This will lead to undefined behavior and likely a crash.  Second, your logic for calculating the sum, average, product, smallest, and largest is flawed and incomplete.  The `while` loop is not correctly used to iterate through the input integers.  You did not use the single-selection form of the `if` statement as required.  You received 1 mark for attempting to get input from the user.\n\n**Question 3:** Your code structure is closer to the requirements, using a `switch` statement to handle different product types. However, you're using `scanf_s` again (non-standard), and your input handling is not robust.  You are not handling floating-point numbers correctly.  The discount calculation is also incorrect.  You received 1 mark for attempting to use a switch statement and 1 mark for attempting to get input from the user. \n\nOverall, your code needs significant improvements in terms of logic, error handling, and adherence to standard C practices.  Focus on understanding the fundamental concepts of loops, arrays, conditional statements, and input/output operations.  Review the provided sample solutions and try to understand how they address the problems correctly.  Remember to use standard C functions and avoid platform-specific extensions like `scanf_s` unless explicitly allowed.",
      "code_files": [
        "21797489_Chen HongJian\\21797489_Chen HongJian\\x64\\21797489_Chen HongJian\\q1.c",
        "21797489_Chen HongJian\\21797489_Chen HongJian\\x64\\21797489_Chen HongJian\\q2.c",
        "21797489_Chen HongJian\\21797489_Chen HongJian\\x64\\21797489_Chen HongJian\\q3.c"
      ]
    },
    {
      "submission": "20718864.zip",
      "marks": 4.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but has significant flaws in implementation and adherence to the assignment requirements. \n\n**Question 1:** You correctly used nested loops to print a grid of asterisks. However, the grid size is hardcoded (8 rows, 9 columns), failing to meet the requirement of user-specified dimensions.  This significantly impacts the functionality and earns only 1 out of 3 marks (correct loop structure, but not user input).\n\n**Question 2:** You correctly calculated the sum, product, and identified the largest and smallest integers among three inputs. However, the program only accepts three integers, not a variable number as required.  The average calculation uses integer division, leading to inaccurate results. The use of if/else if/else is not in line with the single-selection if statement requirement.  This earns 1 out of 3 marks (correct sum, product, and largest/smallest identification, but not variable input or accurate average).\n\n**Question 3:** This question has the most significant issues. The program structure is incomplete and contains several errors. The `while` loop is not correctly implemented, and the `switch` statement lacks proper handling of user input and cost calculations.  The discount calculation is missing.  The use of `getchar()` within the `while` loop is inappropriate for this task.  This earns 1 out of 4 marks (partial implementation of the switch statement, but the majority of the logic is missing).\n\nOverall, your code lacks crucial elements of the assignment, such as user input validation, error handling, and correct implementation of core functionalities.  You need to review the concepts of user input, loops, conditional statements, and data types.  Focus on writing cleaner, more modular code with appropriate comments to improve your understanding and programming skills.  Consider using a debugger to identify and fix errors in your code.",
      "code_files": [
        "20718864_Adrian Naufal Mazaya\\20718864_Adrian Naufal Mazaya\\Q1.c",
        "20718864_Adrian Naufal Mazaya\\20718864_Adrian Naufal Mazaya\\Q2.c",
        "20718864_Adrian Naufal Mazaya\\20718864_Adrian Naufal Mazaya\\Q3.c"
      ]
    },
    {
      "submission": "20720830.zip",
      "marks": 7.0,
      "feedback": "Your code demonstrates a functional understanding of basic C programming concepts, but there are areas needing improvement. \n\nQ1: You successfully implemented nested loops to print the asterisk grid. However, your loop conditions are slightly off, resulting in an extra space at the beginning of each row and one less asterisk in each row than specified.  The input/output is mostly correct, but the formatting doesn't precisely match the sample output.  \n\nQ2: You correctly calculated the sum, average, and product of three integers. Your approach to finding the minimum and maximum is also correct. However, the prompt asked for a variable number of integers, and your code only handles three.  The use of only single-selection if statements is good. \n\nQ3: Your implementation of the switch statement to handle different product types is well-structured. The calculation of total and final costs is also correct.  However, the program lacks a loop to allow the user to enter multiple product types before exiting, as specified in the prompt.  The input and output are correct for a single product type. \n\nOverall, your code shows a basic grasp of the concepts, but you need to pay closer attention to the specific requirements of each question, particularly handling variable input and implementing loops for repeated actions.  Improving your code's adherence to the problem statements will significantly improve your score.",
      "code_files": [
        "20720830_Chai Chok Yuen\\20720830_Chai Chok Yuen\\Q1.c",
        "20720830_Chai Chok Yuen\\20720830_Chai Chok Yuen\\Q2.c",
        "20720830_Chai Chok Yuen\\20720830_Chai Chok Yuen\\Q3.c"
      ]
    },
    {
      "submission": "20722250.zip",
      "marks": 9.0,
      "feedback": "Your code demonstrates a good understanding of basic C programming concepts and successfully completes the tasks outlined in the assignment.  Q1 and Q2 are well-structured and produce the correct output.  However, there are a few areas for improvement:\n\nQ1: Your solution is efficient and correctly prints the grid.  The use of nested loops is appropriate.  Adding comments to explain the purpose of each loop would enhance readability.\n\nQ2: The logic for finding the minimum and maximum values is correct, but it could be simplified using a more concise approach.  Consider using a loop to iterate through the numbers and update the minimum and maximum values in each iteration. This would make the code more efficient and easier to extend if you needed to handle more than three numbers.  Also, the prompt could be improved to explicitly state that three integers are required.\n\nQ3: This question shows good use of a switch statement and handles different product types correctly.  The code is well-structured and easy to follow.  However, the use of `fflush(stdin)` is generally discouraged as it's not portable across all systems.  Consider using a different method to clear the input buffer if necessary.  Also, adding input validation to ensure the user enters valid numerical data would improve the robustness of your code.  For example, you could check if the weight and quantity are positive values.\n\nOverall, your code is functional and demonstrates a solid grasp of the fundamental concepts.  Addressing the minor issues mentioned above would significantly improve the code's quality and efficiency.",
      "code_files": [
        "20722250_Adrian Lee Zhen Hom\\20722250_Adrian Lee Zhen Hom\\Q1.c",
        "20722250_Adrian Lee Zhen Hom\\20722250_Adrian Lee Zhen Hom\\Q2.c",
        "20722250_Adrian Lee Zhen Hom\\20722250_Adrian Lee Zhen Hom\\Q3.c"
      ]
    },
    {
      "submission": "20722371.zip",
      "marks": 7.0,
      "feedback": "Your submission demonstrates a basic understanding of C programming and successfully compiles and runs for the given test cases. However, there are several areas for improvement:\n\n**Q1:** This question is well-answered.  The code correctly prints the grid of asterisks as requested.  Good job on using nested loops effectively.\n\n**Q2:** Your solution to Q2 is partially correct. While you correctly calculate the sum, average, and product, your approach to finding the smallest and largest integers is inefficient and uses nested if statements, violating the requirement to use only single-selection if statements.  You should refactor this section to use only single if statements for comparison.  The current implementation is also limited to only three integers.  A more robust solution would handle an arbitrary number of integers.\n\n**Q3:** This is where the most significant improvements are needed. Your code only handles the calculation of cost and discounted cost, but it doesn't incorporate the core logic of a switch statement to handle different product types as specified in the question.  The program also uses integers for weight and price, which is inappropriate for representing potentially fractional values.  You should use floating-point numbers (float or double) for these variables.  The program also lacks the crucial while loop to allow the user to repeatedly enter product information until they choose to exit (by entering 0).  The current implementation only processes one product type.\n\n**Overall:** Your code shows some understanding of basic C programming concepts, but it lacks the robustness and sophistication required to fully address the problem statements.  Focus on improving your understanding of control flow (loops and switch statements), data types, and error handling.  Pay close attention to the specific requirements of each question and strive for more efficient and robust solutions.  Consider using functions to modularize your code and improve readability.  Remember to thoroughly test your code with various inputs, including edge cases and boundary conditions.",
      "code_files": [
        "20722371_ARFAN SHAFEY BIN KAMAL AZIZI\\Q1.c",
        "20722371_ARFAN SHAFEY BIN KAMAL AZIZI\\Q2.c",
        "20722371_ARFAN SHAFEY BIN KAMAL AZIZI\\Q3.c"
      ]
    }
  ],
  "failed": [
    {
      "submission": "20581109.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20590645.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20596548.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20611298.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20712132.zip",
      "error": "No code files found in submission"
    }
  ],
  "total_submissions": 25,
  "test_mode": false,
  "test_limit": null
}