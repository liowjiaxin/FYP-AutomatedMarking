{
  "successful": [
    {
      "submission": "20409676.zip",
      "marks": 6.5,
      "feedback": "Your submission demonstrates a basic understanding of the core concepts in C programming, but there are several areas needing significant improvement. \n\n**Question 1:** Your solution correctly implements nested loops to print the grid of asterisks, fulfilling the core requirement. However, the code lacks comments explaining the logic, which is crucial for readability and understanding.  The prompt requested that the output be \"* \", but your code outputs \"*\".  This is a minor detail, but it shows a lack of attention to detail in matching the specified output. \n\n**Question 2:** The calculation of the sum, average, and product is correct. However, your approach to finding the largest and smallest integers is inefficient and uses multiple if statements instead of a more concise and efficient method.  The use of multiple if statements is also not in line with the instructions.  Furthermore, error handling is missing; the program will crash if the user enters non-numeric input.  The lack of comments further reduces readability. \n\n**Question 3:** The use of a switch statement is appropriate for handling different product types. However, the calculation of the discounted price is incorrect; you are dividing the total cost by the discount percentage instead of subtracting the discount amount.  The program also lacks input validation; it doesn't check for invalid product codes or negative weights/quantities.  The use of the same variable names for different product types is confusing and makes the code harder to maintain.  The lack of comments makes it difficult to understand the logic.  The program also does not handle the case where the user enters a discount percentage greater than 100%.\n\n**Overall:** Your code is functional for the most part, but it lacks crucial elements of good programming practice, including comprehensive commenting, efficient algorithms, robust error handling, and input validation.  The code also does not always adhere to the specific instructions given in the assignment.  To improve your score, focus on improving code quality, adding comprehensive comments, implementing efficient algorithms, and adding robust error handling and input validation.  Pay close attention to the details of the problem statements and ensure your code matches the specified output exactly.",
      "code_files": [
        "20409676_Edwin Bundan\\20409676_Edwin Bundan\\Test_1_Q1.c",
        "20409676_Edwin Bundan\\20409676_Edwin Bundan\\Test_1_Q2.c",
        "20409676_Edwin Bundan\\20409676_Edwin Bundan\\Test_1_Q3.c"
      ]
    },
    {
      "submission": "20577892.zip",
      "marks": 6.5,
      "feedback": "Your submission demonstrates a basic understanding of C programming, but there are several areas needing significant improvement. \n\n**Q1:** The code for Q1 has a logical error in the loop structure.  The loop variable 'i' is used in both inner and outer loops, leading to incorrect output.  Additionally, there's a missing variable 'width' in the inner loop.  The code lacks comments explaining the logic, which is crucial for readability and understanding.  While the input/output is attempted, the core loop structure is flawed, resulting in a significant deduction in marks.\n\n**Q2:** The code for Q2 correctly calculates the sum, average, and product. However, the logic for finding the largest and smallest integers is unnecessarily complex and could be simplified.  The use of multiple if statements is acceptable, but a more efficient approach would improve code quality.  The code lacks sufficient comments.  The output is partially correct, but the lack of robust error handling (e.g., handling non-integer input) is a significant drawback.\n\n**Q3:** The code for Q3 uses a switch statement correctly to handle different product types. However, the discount calculation is flawed; it directly subtracts the discount value from the total cost instead of calculating the discounted amount.  The code lacks error handling for invalid input (e.g., negative weight or quantity).  The output is partially correct, but the discount calculation error and lack of error handling significantly reduce the marks.  The comments are insufficient.\n\n**Overall:** Your code demonstrates a functional understanding of basic programming concepts, but it lacks attention to detail, error handling, and code quality.  The comments are sparse and don't adequately explain the logic.  Improving code structure, adding comprehensive comments, and implementing robust error handling are crucial for better code quality and higher marks.  Consider reviewing the provided sample answers for better approaches to problem-solving and code organization.  Remember to thoroughly test your code with various inputs, including edge cases and boundary conditions, to ensure its correctness and robustness.",
      "code_files": [
        "20577892_Ahmed_Amin_Mohamed_Osman\\20577892_Ahmed_Amin_Mohamed_Osman\\Q1.c",
        "20577892_Ahmed_Amin_Mohamed_Osman\\20577892_Ahmed_Amin_Mohamed_Osman\\Q2.c",
        "20577892_Ahmed_Amin_Mohamed_Osman\\20577892_Ahmed_Amin_Mohamed_Osman\\Q3.c"
      ]
    },
    {
      "submission": "20580127.zip",
      "marks": 0.0,
      "feedback": "Error during grading: Invalid json output: ```json\n{\n  \"marks\": 65,\n  \"feedback\": \"Your submission demonstrates a basic understanding of C programming, but there are several areas needing significant improvement. \\n\\n**Q1:** The grid printing logic in Q1 is partially correct.  You correctly use nested loops, but the spacing and the starting index of the inner loop are off, resulting in an incorrect grid. The comments are minimal and lack detail.  You need to revise the inner loop to correctly print the specified number of asterisks in each row. \\n\\n**Q2:** The calculations for sum, product, and average are correct. However, the largest and smallest integer checks are repetitive and inefficient.  The use of multiple if-else if statements is acceptable, but a more concise approach using a loop would be better for handling more than three integers.  The code lacks input validation; it assumes the user will always enter three valid integers.  Error handling is missing. \\n\\n**Q3:** The structure of Q3 is good, using a while loop and a switch statement effectively. However, there are several issues: (1) The code does not correctly calculate the final cost after applying the discount. The discount calculation is wrong. (2) Input validation is missing. The program doesn't handle non-numeric input gracefully. (3) The comments are insufficient.  You should add more comments to explain the logic of each section. (4) The code uses `scanf(\"%d\", &weight)` for floating-point variables, which is incorrect.  You should use `scanf(\"%f\", &weight)` for floating-point input. \\n\\n**Overall:** Your code demonstrates a functional understanding of basic programming concepts, but it lacks attention to detail, efficiency, and robustness.  The comments are sparse and don't adequately explain the code's logic.  You need to improve your code quality, error handling, and input validation.  Consider using more efficient algorithms and data structures where appropriate.  Pay close attention to the specific requirements of each question and ensure your code adheres to the provided examples.  Remember to thoroughly test your code with various inputs, including edge cases and boundary conditions.\"\n}\n```\nFor troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE",
      "code_files": [
        "20580127_AhmedAbdelhalim\\Lab Assesment 1\\Q1a.c",
        "20580127_AhmedAbdelhalim\\Lab Assesment 1\\Q2.c",
        "20580127_AhmedAbdelhalim\\Lab Assesment 1\\Q3.c"
      ]
    },
    {
      "submission": "20602511.zip",
      "marks": 7.5,
      "feedback": "Your submission demonstrates a functional understanding of basic C programming concepts.  All three questions are attempted and produce outputs for valid inputs. However, there are areas for significant improvement in code quality, error handling, and adherence to the assignment's specifications.\n\n**Question 1:** This question is implemented correctly, producing the expected grid of asterisks. However, the variable names (loop1, loop2) are not descriptive.  Consider using names like `rowCounter` and `columnCounter` for better readability.  The comments are minimal and could be more comprehensive, explaining the purpose of each loop and the overall logic.\n\n**Question 2:** The calculation of sum, average, and product is correct. However, the logic for finding the smallest and largest integers is unnecessarily complex and repetitive.  A more efficient approach would involve iterating through the numbers only once, updating the smallest and largest values as you go.  The use of multiple `if` statements is acceptable given the assignment's constraints, but a more concise solution is possible.  Error handling is completely absent; the program crashes if the user enters non-integer input.  The assignment requires handling of at least three integers; your code only handles exactly three.\n\n**Question 3:** The `switch` statement is used correctly to handle different product types. However, the code is repetitive and could be significantly improved by factoring out common code (calculating the total cost and applying the discount).  The discount logic is also implemented in a cumbersome way with multiple `if` statements.  A single calculation would suffice.  Error handling is minimal; the program doesn't gracefully handle invalid input (e.g., negative weights or quantities).\n\n**Overall:** The code lacks sufficient comments, especially in Question 2 and 3.  The comment density is far below the recommended 20-30%.  The code also lacks robustness and error handling.  The use of more efficient algorithms and better code structure would significantly improve the quality of the submission.  Consider using functions to modularize your code and improve readability.  Focus on improving error handling and input validation to make your programs more robust.  Finally, strive for more descriptive variable names to enhance code clarity.",
      "code_files": [
        "20602511_Wong Cheuk Kei\\20602511_Wong Cheuk Kei\\Question 1.c",
        "20602511_Wong Cheuk Kei\\20602511_Wong Cheuk Kei\\Question 2.c",
        "20602511_Wong Cheuk Kei\\20602511_Wong Cheuk Kei\\Question 3.c"
      ]
    },
    {
      "submission": "20607863.zip",
      "marks": 7.5,
      "feedback": "Your submission demonstrates a good understanding of basic C programming concepts, successfully completing the core functionality of each question.  However, there are areas for improvement in code quality, error handling, and efficiency.\n\n**Question 1:** This is well-implemented and meets the requirements.  The use of nested loops is correct, and the output matches the specification.  Adding a brief comment explaining the purpose of each loop would enhance readability.\n\n**Question 2:**  The solution correctly calculates the sum, average, product, minimum, and maximum of three integers.  However, it only handles three integers, not a variable number as requested.  The prompt should allow for more than three integers, and the calculations should be adjusted accordingly.  Error handling for non-integer input is missing.  Consider using a `while` loop and `scanf`'s return value to handle multiple inputs and non-numeric entries.  The use of single-selection `if` statements is correct, but a more efficient approach would be to use a single `if` statement to initialize `min` and `max`, followed by a loop to iterate through the remaining numbers.\n\n**Question 3:** The implementation of the `switch` statement and the calculation of costs for different product types is correct.  The program structure is good, using a `while` loop to allow the user to enter multiple products.  However, error handling is minimal.  The program should include more robust input validation to handle cases where the user enters non-numeric values or invalid product codes.  Consider adding error messages to guide the user and prevent unexpected program behavior.  The discount calculation is correctly implemented. \n\n**Overall:** The code is functional but lacks robustness and efficiency in several areas.  Improving error handling, input validation, and the ability to handle a variable number of inputs in Question 2 would significantly enhance the quality of the submission.  Adding more comments to explain the logic and purpose of different code sections would also improve readability.  Consider using more efficient algorithms where possible.  While the code compiles and runs, the lack of comprehensive error handling and the limitations in Question 2 prevent a higher score.",
      "code_files": [
        "20607863_Dean Agha Koeswantoro\\20607863_Dean Agha Koeswantoro\\Question1.c",
        "20607863_Dean Agha Koeswantoro\\20607863_Dean Agha Koeswantoro\\Question2.c",
        "20607863_Dean Agha Koeswantoro\\20607863_Dean Agha Koeswantoro\\Question3.c"
      ]
    },
    {
      "submission": "20611251.zip",
      "marks": 6.5,
      "feedback": "Your submission demonstrates a basic understanding of the core concepts for each question, but there are several areas needing significant improvement. \n\n**Q1:** The code correctly prints the grid of asterisks, fulfilling the basic requirements. However, it lacks comments explaining the logic, which is crucial for code readability and maintainability.  The spacing around the `printf` statements could also be improved for better readability.  \n\n**Q2:** The program calculates the sum, average, and product correctly for three integers.  However, the logic for finding the smallest and largest integers is inefficient and uses nested `if` statements instead of a more concise approach.  The program also lacks input validation; it doesn't handle cases where the user enters non-integer values.  Furthermore, the use of integer division for the average calculation leads to potential loss of precision.  Comments are again sparse.\n\n**Q3:** The program structure using a `switch` statement is appropriate for handling different product types. However, the input validation is missing (it doesn't check for invalid product codes). The calculation of `finalcost` is also unnecessarily complex and prone to errors.  The program also lacks error handling for cases where the user might enter non-numeric values for weight or price.  The use of `weight` for all product types is inconsistent with the problem description (dairy and canned goods should use quantity).  Comments are minimal and don't explain the logic clearly. \n\nOverall, your code is functional for the basic test cases, but it lacks robustness, efficiency, and sufficient comments.  You need to improve your code quality, error handling, and input validation to achieve a higher score.  Consider using more efficient algorithms and adding comprehensive comments to explain your code's logic.  Pay close attention to the specific requirements of each question, including input validation and output formatting.",
      "code_files": [
        "20611251_Adrian Lee Joon Yin\\20611251_Adrian Lee Joon Yin\\Q1.c.c",
        "20611251_Adrian Lee Joon Yin\\20611251_Adrian Lee Joon Yin\\Q2.c.c",
        "20611251_Adrian Lee Joon Yin\\20611251_Adrian Lee Joon Yin\\Q3.c.c"
      ]
    },
    {
      "submission": "20611605.zip",
      "marks": 7.5,
      "feedback": "Your submission demonstrates a functional understanding of basic C programming concepts.  All three questions are attempted and produce outputs, fulfilling the basic requirements of the assignment. However, there's significant room for improvement in code quality, efficiency, and error handling.\n\n**Q1:** This question is implemented correctly, achieving the desired output. However, the comments are minimal and could be more descriptive.  The code lacks input validation (e.g., checking for negative row/column values).\n\n**Q2:** The logic for calculating the sum, average, and product is correct. However, the approach to finding the smallest and largest integers is inefficient and overly verbose.  A more concise and efficient solution would involve iterating through the numbers only once.  The code only handles three integers, failing to meet the requirement of accepting a variable number of integers.  Input validation is also missing (e.g., checking if the user entered three integers).\n\n**Q3:** The use of a switch statement is appropriate, and the program handles the different product types correctly. However, the code is repetitive (DRY principle violation). The calculation of cost and discount is repeated for each case.  A function could be created to handle this common logic.  Input validation is again lacking (e.g., checking for non-numeric input, negative values for weight/quantity, and invalid product codes).\n\n**Overall:** The code lacks sufficient comments, especially in Q2 and Q3.  The code is not modular; functions should be used to improve readability and maintainability.  The lack of input validation makes the code fragile and prone to errors.  The efficiency of the algorithms could be significantly improved, particularly in Q2.  Consider using more efficient methods for finding the minimum and maximum values and handling a variable number of inputs.  The repetitive code in Q3 should be refactored into functions.  While the program runs and produces outputs, the lack of robustness and code quality significantly impacts the overall score.",
      "code_files": [
        "20612781_Lim Chai Shuen\\20612781_Lim Chai Shuen\\Q1.c",
        "20612781_Lim Chai Shuen\\20612781_Lim Chai Shuen\\Q2.c",
        "20612781_Lim Chai Shuen\\20612781_Lim Chai Shuen\\Q3.c"
      ]
    },
    {
      "submission": "20613250.zip",
      "marks": 7.5,
      "feedback": "Your submission demonstrates a functional understanding of basic C programming concepts, successfully completing the core requirements of each question. However, there's room for improvement in code quality, efficiency, and error handling.\n\n**Strengths:**\n\n* **Functionality:** All three programs execute and produce outputs as expected for the given test cases.  You've implemented the nested loops for the asterisk grid (Q1), conditional statements for comparisons (Q2), and a switch statement with a loop for the grocery store program (Q3). \n* **Structure:** Your code is generally well-structured and easy to follow, especially in Q1. The use of functions in Q3 improves modularity.\n\n**Areas for Improvement:**\n\n* **Code Quality (Q2 & Q3):** The code in Q2 and Q3 could be significantly improved.  Q2's approach to finding the smallest and largest integers is repetitive and inefficient.  A more efficient approach would involve iterating through the numbers only once.  In Q3, the `counting` function is unnecessarily complex and could be simplified by performing the calculations directly within the `switch` statement.  The discount calculation is also slightly off; it should subtract the discount amount from the initial cost, not calculate a percentage of the initial cost.\n* **Error Handling:** Your programs lack robust error handling.  For instance, Q2 assumes the user will always enter three integers.  Q3 doesn't handle non-numeric input effectively.  You should add input validation to check for invalid inputs (e.g., non-numeric values, negative weights/quantities) and provide appropriate error messages.\n* **Comments:** While you have some comments, they are sparse and could be more descriptive and informative.  Aim for a higher comment density to explain the logic and purpose of different code sections.\n* **Efficiency (Q2):** The nested `if` statements in Q2 for finding the smallest and largest integers are inefficient.  A single loop or a more concise approach would be more efficient.\n* **Readability:**  In Q3, the variable names could be more descriptive (e.g., `proCode` could be `productCode`). Consistent spacing and indentation would also enhance readability.\n\n**Specific Feedback per Question:**\n\n* **Q1:** Good implementation of nested loops.  Consider adding input validation to handle non-positive row/column inputs.\n* **Q2:** Improve efficiency in finding the smallest and largest integers. Add input validation to handle cases where the user doesn't enter three integers.\n* **Q3:** Refactor the `counting` function.  Simplify the discount calculation. Add input validation to handle non-numeric input and invalid product codes.\n\n**Recommendations:**\n\n* Review the concepts of input validation and error handling in C.\n* Practice writing more efficient algorithms and data structures.\n* Improve your commenting style to enhance code readability and maintainability.\n* Use a consistent coding style with proper indentation and spacing.",
      "code_files": [
        "20613250_Eunice Lee Ying Yun\\20613250_Eunice Lee Ying Yun\\q1.c",
        "20613250_Eunice Lee Ying Yun\\20613250_Eunice Lee Ying Yun\\q2.c",
        "20613250_Eunice Lee Ying Yun\\20613250_Eunice Lee Ying Yun\\q3.c"
      ]
    },
    {
      "submission": "20619015.zip",
      "marks": 7.5,
      "feedback": "Your submission demonstrates a functional understanding of basic C programming concepts, successfully completing the core requirements of each question. However, there's room for significant improvement in code quality, efficiency, and robustness. \n\n**Q1:** The asterisk grid program works correctly.  However, the comments are minimal, and the code could benefit from more descriptive variable names (e.g., instead of 'row', use 'numRows').\n\n**Q2:** The integer calculation program functions as expected for three inputs.  The use of if-else if-else is perfectly acceptable, and more efficient than nested if statements for this specific task.  However, it lacks error handling for non-integer inputs and only handles three integers.  The sample answer 2 provided a more robust solution that handles an arbitrary number of integers.  Consider expanding your solution to match this level of robustness.\n\n**Q3:** The grocery store cost calculator is largely functional, using a switch statement effectively.  However, the code is repetitive (the discount calculation is repeated for each case).  This repetition violates the DRY (Don't Repeat Yourself) principle.  The use of functions would significantly improve the code's structure and readability.  Furthermore, error handling for invalid inputs (e.g., negative weights or prices) is missing.  The program also lacks input validation to ensure the user enters numerical data.  Consider adding input validation to prevent crashes due to incorrect input types.\n\n**Overall:** Your code is functional but lacks the polish and robustness expected at this level.  Focus on improving code quality through better commenting, modularity (using functions), error handling, and input validation.  Refer to the sample answers provided for inspiration on how to improve the robustness and efficiency of your solutions.  The use of more descriptive variable names would also enhance readability.  Aim for a higher comment-to-code ratio (around 20-30%).",
      "code_files": [
        "20619015_Arianna binti Ainurizam\\20619015_Arianna binti Ainurizam\\Q1.c",
        "20619015_Arianna binti Ainurizam\\20619015_Arianna binti Ainurizam\\Q2.c",
        "20619015_Arianna binti Ainurizam\\20619015_Arianna binti Ainurizam\\Q3.c"
      ]
    },
    {
      "submission": "20621408.zip",
      "marks": 7.5,
      "feedback": "Your submission demonstrates a functional understanding of basic C programming concepts.  All three questions are attempted and produce outputs, fulfilling the basic requirements of the assignment. However, there's room for significant improvement in code quality, error handling, and adherence to best practices.\n\n**Q1:** This question is implemented correctly, producing the expected grid. However, the code lacks comments explaining the logic, which is a significant omission given the assignment's instructions.  The spacing could also be improved for better readability.\n\n**Q2:** The calculation of sum, average, and product is correct.  The logic for finding the largest and smallest integers is functional but could be simplified and made more efficient.  The use of nested if-else statements, while working, isn't as elegant as it could be.  More importantly, the program only accepts exactly three integers, failing to meet the requirement of accepting a variable number of integers.  Error handling for non-integer inputs is missing.\n\n**Q3:** This question shows a good attempt at using a `switch` statement and a `while` loop to handle multiple product types. However, the code lacks robustness.  It doesn't handle invalid inputs gracefully (e.g., negative weights or quantities). The hardcoding of prices for dairy and canned goods is not ideal; it would be better to allow the user to input these prices.  The discount calculation is correct.  The code could benefit from more comments to clarify the logic within the `switch` statement.\n\n**Overall:** The code is functional but lacks polish and robustness.  The comments are sparse, and the code could be significantly improved in terms of efficiency, error handling, and adherence to coding best practices.  Consider improving the modularity of your code by breaking down larger functions into smaller, more manageable ones.  Pay close attention to input validation and error handling to make your programs more robust.  Remember to always comment your code clearly to explain the logic and purpose of different sections.  The use of more descriptive variable names would also enhance readability.",
      "code_files": [
        "20621408_Charles Dan Zhi Jhet\\20621408_Charles Dan Zhi Jhet\\Q1.c",
        "20621408_Charles Dan Zhi Jhet\\20621408_Charles Dan Zhi Jhet\\Q2.c",
        "20621408_Charles Dan Zhi Jhet\\20621408_Charles Dan Zhi Jhet\\Q3.c"
      ]
    },
    {
      "submission": "20701571.zip",
      "marks": 4.5,
      "feedback": "Your submission demonstrates a basic understanding of C programming, but significant improvements are needed in functionality, code quality, and testing. \n\n**Q1:** The code compiles but does not produce the correct output.  Instead of printing asterisks, it prints row and column numbers.  The loop structure is partially correct, but the core logic of printing asterisks is missing.  Comments are absent.  (1/3 marks)\n\n**Q2:** The code only takes input for three integers and calculates their sum.  It does not calculate the average, product, smallest, or largest integers as required.  Error handling is missing.  The code lacks comments. (1/3 marks)\n\n**Q3:** The code only takes input for the product code and has rudimentary conditional statements for different product types, but it doesn't actually calculate the cost for any of them.  The discount calculation is present but not used.  The program lacks a proper loop structure and error handling.  Comments are missing. (1/4 marks)\n\n**Overall:** The code lacks crucial functionality in all three questions.  There is a complete absence of comments, making the code difficult to understand.  Error handling and input validation are missing.  The code does not meet the minimum requirements of the assignment.  You need to review the fundamental concepts of C programming, including loops, conditional statements, input/output operations, and basic arithmetic calculations.  Focus on writing clean, well-commented code and thoroughly testing your solutions before submission.  Consider using a debugger to step through your code and identify errors.  Refer to the provided sample answers for guidance on implementing the required functionality and structure.",
      "code_files": [
        "20701571_Abdullah Usmani\\20701571_Abdullah Usmani\\Q1.c",
        "20701571_Abdullah Usmani\\20701571_Abdullah Usmani\\Q2.c",
        "20701571_Abdullah Usmani\\20701571_Abdullah Usmani\\Q3.c"
      ]
    },
    {
      "submission": "20701680.zip",
      "marks": 7.2,
      "feedback": "Your submission demonstrates a functional understanding of basic C programming concepts, successfully completing the core requirements of each question. However, there are areas needing significant improvement in code quality, error handling, and adherence to best practices.\n\n**Question 1:** The grid printing functionality works correctly.  However, the code lacks comments explaining the logic, especially the nested loop structure.  The prompt for row and column input could be improved for clarity.  Consider adding input validation to handle non-integer inputs.\n\n**Question 2:** The program calculates the sum, average, product, smallest, and largest integers correctly for three inputs.  However, it only handles three integers, failing to meet the requirement of accepting a variable number of integers. The use of if-else if-else is acceptable, but a more efficient approach using a loop and keeping track of min/max values would be better.  Input validation is missing; the program crashes if the user enters non-integer values.  The comments are insufficient.\n\n**Question 3:** The program structure using a switch statement and a while loop is appropriate.  It correctly calculates the total cost for different product types.  However, the input validation is minimal.  The program doesn't handle invalid product codes gracefully.  The code is repetitive; consider refactoring to reduce redundancy.  The comments are sparse and don't explain the logic clearly.  Error handling for invalid inputs (e.g., negative weight, quantity) is absent.\n\n**Overall:** Your code is functional but lacks robustness, proper error handling, and sufficient comments.  The code quality needs significant improvement to meet the standards of a well-structured C program.  Focus on improving input validation, error handling, code modularity, and commenting to enhance readability and maintainability.  Consider using more efficient algorithms and data structures where applicable.  The use of `\t` in `scanf` in Question 2 is not standard practice and should be replaced with spaces.",
      "code_files": [
        "20701680_Florence Tinevimbo Chigwida\\Test1.c",
        "20701680_Florence Tinevimbo Chigwida\\test2.c",
        "20701680_Florence Tinevimbo Chigwida\\test3.c"
      ]
    },
    {
      "submission": "20703971.zip",
      "marks": 6.5,
      "feedback": "Your submission demonstrates a basic understanding of the core programming concepts but needs significant improvements in code quality, functionality, and adherence to the assignment's specifications. \n\n**Q1:** The code for Q1 has a logical error. You've mistakenly used the 'rows' variable to represent columns and vice versa in the input section.  The nested loop structure is partially correct, but the conditional statement within the inner loop is unnecessarily complex and makes the code harder to read.  The output formatting isn't as clean as it could be.  You need to improve the comments to better explain the code's logic. \n\n**Q2:** The code for Q2 only handles three integers, failing to meet the requirement of accepting a variable number of integers. The use of if-else statements is correct for finding the smallest and largest numbers, but the program lacks error handling for invalid input (non-integer values).  The comments are insufficient. \n\n**Q3:** The Q3 code only handles the case of fruits and vegetables, ignoring the other product types (dairy and canned goods).  The program lacks a proper loop to allow the user to enter multiple products.  The discount calculation is correct, but the overall structure is too simplistic and doesn't reflect the requirements of the question.  The code lacks sufficient comments. \n\n**Overall:**  The code lacks sufficient comments throughout all three questions.  The modularity is poor, with functions being too long and not broken down into smaller, more manageable units.  Error handling is almost entirely absent.  The code needs significant restructuring and improvements to meet the assignment's requirements and demonstrate a higher level of programming proficiency.  Consider using more descriptive variable names and improving the overall readability of your code.  Focus on writing cleaner, more efficient, and better-commented code in future submissions.",
      "code_files": [
        "20703971_Ahmad Daffa Fatih Aljabbar\\20703971_Ahmad Daffa Fatih Aljabbar\\Q1.c",
        "20703971_Ahmad Daffa Fatih Aljabbar\\20703971_Ahmad Daffa Fatih Aljabbar\\Q2.c",
        "20703971_Ahmad Daffa Fatih Aljabbar\\20703971_Ahmad Daffa Fatih Aljabbar\\Q3.c"
      ]
    },
    {
      "submission": "20705220.zip",
      "marks": 7.5,
      "feedback": "Your submission demonstrates a functional understanding of basic C programming concepts.  However, there are areas needing significant improvement in code quality, modularity, and error handling. \n\n**Q1:** The code for Q1 is mostly correct and achieves the intended output. However, the comments are minimal and could be more descriptive.  The use of `\\n` for newlines is good practice.  Consider adding input validation to handle non-integer inputs.\n\n**Q2:** The solution to Q2 is partially correct. While the calculations for sum, average, and product are accurate for three integers, the program lacks the flexibility to handle a variable number of integers as specified in the question. The functions `findsmallest` and `findlargest` are a good start towards modularity, but the main function should be improved to handle more than three inputs.  Error handling for invalid input (non-integer values) is missing. \n\n**Q3:** The code for Q3 uses a `switch` statement effectively to handle different product types.  However, the code is repetitive; the sections for fruits and vegetables, and dairy and canned goods are nearly identical. This violates the DRY (Don't Repeat Yourself) principle.  Consider creating functions to calculate the cost for each product category to improve modularity and readability.  Input validation is also lacking; the program doesn't handle non-numeric inputs gracefully.  The discount calculation is correctly implemented. \n\n**Overall:** The code is functional for the given test cases, but lacks robustness and adheres poorly to software engineering best practices.  The comment density is low, and the code could be significantly improved by refactoring to enhance modularity and readability.  Adding comprehensive input validation and error handling is crucial for robust programs.  Consider using more descriptive variable names.  Aim for a higher comment-to-code ratio (around 20-30%).  The use of functions would significantly improve the structure and maintainability of your code.",
      "code_files": [
        "20705220_ErynCheeEnNing\\Exam 1 Programming\\q1.c",
        "20705220_ErynCheeEnNing\\Exam 1 Programming\\q2.c",
        "20705220_ErynCheeEnNing\\Exam 1 Programming\\q3.c"
      ]
    },
    {
      "submission": "20717304.zip",
      "marks": 7.5,
      "feedback": "Your submission demonstrates a functional understanding of basic C programming concepts.  All three questions are attempted and produce outputs that generally match the expected results for simple inputs. However, there are several areas for improvement:\n\n**Q1:** The code correctly prints the asterisk grid.  However, the code lacks comments explaining the purpose of each section, which is crucial for readability and maintainability.  The spacing and variable names could also be improved for better readability (e.g., using `columns` instead of `clmns`).\n\n**Q2:** The program calculates the sum, average, product, smallest, and largest of three integers correctly.  The use of single-selection `if` statements is appropriate, fulfilling the requirement.  However, the code lacks error handling for non-integer inputs.  The program should gracefully handle cases where the user enters non-numeric data.  Additionally, comments are sparse and could be significantly improved.\n\n**Q3:** This question shows the best implementation among the three. The `switch` statement is used effectively, and the program handles different product types correctly.  The discount calculation is also implemented correctly.  However, the code could benefit from more descriptive variable names (e.g., `productType` instead of `ptype`).  The lack of comments reduces readability.  Error handling for invalid inputs (e.g., negative weights or quantities) is missing.\n\n**Overall:** The code is functional for basic test cases but lacks robustness and sufficient comments.  Improving code quality, adding comprehensive comments, and implementing error handling are crucial for better grades.  Consider using more descriptive variable names and improving code formatting for better readability.  Aim for a higher comment-to-code ratio (at least 20-30%).  The use of functions to modularize the code would significantly improve its structure and maintainability.  Remember to always handle potential errors and edge cases to create robust and reliable programs.",
      "code_files": [
        "20717304_Eashwar\\20717304_Eashwar\\Q1.c",
        "20717304_Eashwar\\20717304_Eashwar\\Q2.c",
        "20717304_Eashwar\\20717304_Eashwar\\Q3.c"
      ]
    },
    {
      "submission": "20717489.zip",
      "marks": 6.0,
      "feedback": "Your submission demonstrates a basic understanding of the problem statements, but suffers from significant flaws in code quality, correctness, and testing. \n\n**Q1:** The loop structure is incorrect, resulting in an output that doesn't match the specified grid format.  The code also lacks comments explaining the logic.  The use of `scanf_s` is appropriate for security but the code doesn't handle potential input errors (non-integer input). \n\n**Q2:** The code has multiple critical errors.  The `count` variable is not initialized correctly before the `scanf_s` call, leading to undefined behavior.  The array `integer` is not declared, causing a segmentation fault. The logic for calculating the smallest and largest integers is flawed and doesn't correctly handle multiple inputs.  There's no input validation to ensure at least three integers are entered.  The code lacks comments and clear variable names. \n\n**Q3:** The `switch` statement is implemented correctly, but the code lacks error handling for invalid input (non-numeric input). The discount calculation is also incorrect; it should be `total * (1 - discount / 100.0)`.  The code uses `int` for price and quantity, which can lead to loss of precision.  The code lacks sufficient comments to explain the logic. \n\nOverall, your code needs significant improvements in terms of correctness, error handling, code quality, and testing.  You should review basic C programming concepts, including loop structures, array handling, input validation, and error handling.  Pay close attention to the provided sample outputs and ensure your code produces identical results.  Add comments to explain your code's logic and improve readability.  Consider using a debugger to identify and fix runtime errors.",
      "code_files": [
        "21797489_Chen HongJian\\21797489_Chen HongJian\\x64\\21797489_Chen HongJian\\q1.c",
        "21797489_Chen HongJian\\21797489_Chen HongJian\\x64\\21797489_Chen HongJian\\q2.c",
        "21797489_Chen HongJian\\21797489_Chen HongJian\\x64\\21797489_Chen HongJian\\q3.c"
      ]
    },
    {
      "submission": "20718864.zip",
      "marks": 6.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but has significant flaws in implementation and code quality. \n\n**Question 1:** You correctly implemented nested loops to print a grid of asterisks, fulfilling the core requirement. However, the grid size is hardcoded (8 rows, 9 columns), failing to meet the prompt's requirement for user-specified dimensions.  The lack of input prompts and dynamic size adjustment significantly impacts the functionality and correctness. \n\n**Question 2:** You correctly calculated the sum, product, and identified the largest and smallest integers among three inputs. However, the average calculation is integer division, leading to inaccurate results for non-divisible sums.  The program only handles three integers, ignoring the requirement to accept a variable number of inputs.  The use of multiple `if-else if-else` statements instead of the requested single-selection `if` statements for comparisons is a significant flaw. \n\n**Question 3:** The code structure is incomplete and contains several errors. The `while` loop is improperly structured, and the `switch` statement lacks proper handling of user input and cost calculations.  The program doesn't correctly handle floating-point numbers for weights and prices, and the discount calculation is missing.  The input validation is absent, making the program prone to crashes with incorrect inputs.  \n\n**Overall:** Your code lacks sufficient comments, making it difficult to understand the logic.  The modularity is poor, with functions not used effectively.  The code is not robust and lacks error handling.  You need to significantly improve your code quality, error handling, and adherence to the problem specifications to achieve a higher grade.  Focus on improving input validation, dynamic size handling, and correct use of data types.  Review the provided sample answers for guidance on proper implementation and structure.",
      "code_files": [
        "20718864_Adrian Naufal Mazaya\\20718864_Adrian Naufal Mazaya\\Q1.c",
        "20718864_Adrian Naufal Mazaya\\20718864_Adrian Naufal Mazaya\\Q2.c",
        "20718864_Adrian Naufal Mazaya\\20718864_Adrian Naufal Mazaya\\Q3.c"
      ]
    },
    {
      "submission": "20720830.zip",
      "marks": 7.5,
      "feedback": "Your submission demonstrates a functional understanding of basic C programming concepts, successfully completing the core requirements of each question. However, there's room for significant improvement in code quality, efficiency, and robustness. \n\n**Q1:** The code correctly prints the asterisk grid.  However, the loop condition in the inner loop (j<col) is slightly off; it should be j<=col or j<col+1 to print the correct number of asterisks. The lack of comments reduces readability. \n\n**Q2:** The program calculates the sum, average, product, smallest, and largest of three integers correctly.  The use of separate if statements for finding the minimum and maximum is acceptable but less efficient than a more concise approach.  Error handling for non-integer inputs is missing.  The comment density is low.\n\n**Q3:** The switch-case structure is well-implemented for handling different product types.  However, the code is highly repetitive.  The calculation of total and final cost is repeated for each case.  This violates the DRY (Don't Repeat Yourself) principle.  The program lacks input validation (e.g., checking for negative weights or quantities).  The lack of comments makes it difficult to understand the code's logic.  \n\n**Overall:** The code is functional but lacks polish.  Significant improvements are needed in code quality, including better commenting, modularity (breaking down the code into smaller, reusable functions), and error handling.  Consider using more efficient algorithms and improving the overall readability of your code.  Aim for a higher comment-to-code ratio (at least 20-30%).  The repetitive nature of Q3 needs to be addressed by refactoring the code to avoid redundancy.  Adding input validation will make your programs more robust.",
      "code_files": [
        "20720830_Chai Chok Yuen\\20720830_Chai Chok Yuen\\Q1.c",
        "20720830_Chai Chok Yuen\\20720830_Chai Chok Yuen\\Q2.c",
        "20720830_Chai Chok Yuen\\20720830_Chai Chok Yuen\\Q3.c"
      ]
    },
    {
      "submission": "20722250.zip",
      "marks": 7.5,
      "feedback": "Your submission demonstrates a good understanding of basic C programming concepts, successfully completing the core functionality of each question. However, there's room for improvement in code quality, error handling, and adherence to best practices.\n\n**Q1:** The code correctly prints the grid of asterisks.  However, adding comments to explain the purpose of each section would enhance readability.  The spacing between asterisks could be improved for better visual presentation (e.g., using \"* \").\n\n**Q2:** The program calculates the sum, average, product, minimum, and maximum correctly for three integers.  The use of if-else if statements is appropriate, but consider using a more concise approach for finding the minimum and maximum (e.g., using a loop for a variable number of inputs).  Error handling is missing; the program crashes if the user enters non-integer input.  Adding input validation would significantly improve robustness.  The comments are minimal and could be more descriptive.\n\n**Q3:** This question shows good use of a `switch` statement and a `while` loop to handle multiple product types and user input.  The program correctly calculates the total and final cost after discount.  However, error handling is again lacking.  The program doesn't handle invalid input for weight, quantity, or price (e.g., negative values).  Input validation and more comprehensive comments are needed.  The `fflush(stdin)` is generally considered bad practice and should be avoided.  Consider using a more robust method for clearing the input buffer if necessary.\n\n**Overall:** Your code is functional but lacks sufficient comments, error handling, and input validation.  Improving these aspects would significantly enhance the code's quality, robustness, and maintainability.  Consider exploring more efficient algorithms and data structures where applicable.  Remember to always validate user input to prevent unexpected program behavior.  Aim for a higher comment density (around 20-30% of the code) to improve readability and understanding.",
      "code_files": [
        "20722250_Adrian Lee Zhen Hom\\20722250_Adrian Lee Zhen Hom\\Q1.c",
        "20722250_Adrian Lee Zhen Hom\\20722250_Adrian Lee Zhen Hom\\Q2.c",
        "20722250_Adrian Lee Zhen Hom\\20722250_Adrian Lee Zhen Hom\\Q3.c"
      ]
    },
    {
      "submission": "20722371.zip",
      "marks": 7.2,
      "feedback": "Your submission demonstrates a functional understanding of basic C programming concepts, successfully completing the core requirements of each question. However, there's significant room for improvement in code quality, efficiency, and robustness. \n\n**Q1:** This question is well-solved. The nested loops correctly generate the grid.  However, the code lacks comments explaining the purpose of each loop and variable, reducing readability.  Consider adding comments to improve the code's clarity. \n\n**Q2:** The program calculates the sum, average, and product correctly.  The logic for finding the smallest and largest integers is unnecessarily complex and repetitive. A more efficient approach would involve iterating through the numbers only once.  The requirement to use only single-selection if statements is not optimally implemented; nested if-else structures would be more readable and maintainable.  Input validation is missing; the program crashes if the user enters non-integer values. \n\n**Q3:** The switch statement is correctly used to handle different product types. However, the code is highly repetitive. The calculation of cost and discounted cost is repeated for each product type. This violates the DRY (Don't Repeat Yourself) principle.  The program should be refactored to avoid this redundancy.  Furthermore, the program uses integers for weight and price, which can lead to inaccuracies.  Floating-point numbers should be used instead.  Input validation is also lacking; the program doesn't handle invalid input gracefully.  The use of `weight` for dairy products is also confusing and inconsistent with the problem description. \n\n**Overall:** Your code is functional but lacks polish and efficiency.  Focus on improving code structure, reducing redundancy, adding comprehensive comments, and implementing robust input validation.  Consider using more efficient algorithms and data structures where appropriate.  The lack of comments significantly impacts the readability and maintainability of your code.  Aim for a higher comment-to-code ratio (around 20-30%).  Remember to use appropriate data types to avoid potential inaccuracies.  The repetitive nature of your code in Q3 and the inefficient approach in Q2 are major areas for improvement.",
      "code_files": [
        "20722371_ARFAN SHAFEY BIN KAMAL AZIZI\\Q1.c",
        "20722371_ARFAN SHAFEY BIN KAMAL AZIZI\\Q2.c",
        "20722371_ARFAN SHAFEY BIN KAMAL AZIZI\\Q3.c"
      ]
    }
  ],
  "failed": [
    {
      "submission": "20581109.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20590645.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20596548.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20611298.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20712132.zip",
      "error": "No code files found in submission"
    }
  ],
  "total_submissions": 25,
  "test_mode": false,
  "test_limit": null
}