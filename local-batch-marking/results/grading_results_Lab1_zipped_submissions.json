{
  "successful": [
    {
      "submission": "20409676.zip",
      "marks": 5.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but has significant flaws in implementation and code quality. Let's break down the feedback for each question:\n\n**Question 1:**\nYour code for Question 1 is functionally correct in printing the grid of asterisks. However, it lacks comments explaining the code's logic, which is a significant part of the grading criteria.  The spacing between asterisks is also not consistent with the sample output.  You received 1 mark for correct input/output and 1 mark for the loop structure, but lost 1 mark due to lack of comments and inconsistent output formatting.\n\n**Question 2:**\nYour approach to finding the largest and smallest numbers is inefficient and doesn't follow the instructions. The prompt specified using only single-selection if statements, and your solution uses multiple if statements.  Furthermore, your output is not formatted as requested.  You received 1 mark for correct input/output, but lost 2 marks due to incorrect if/else structure and incorrect calculations for the largest and smallest numbers.  The average calculation is also not formatted correctly.\n\n**Question 3:**\nThis question has the most significant issues. Your code uses integer division for calculating the discounted price (`discprice = cost / discount;`), which will lead to incorrect results.  The discount calculation is also wrong. You should be subtracting the discount from the total cost, not dividing.  The use of `weight` for all product types is also incorrect; different product types require different input parameters.  Your switch statement is incomplete, missing cases for several product types.  You received 1 mark for the input, but lost 3 marks due to incorrect program logic, incorrect output, and failure to handle different product types correctly.  The program also lacks error handling for invalid inputs.\n\nOverall, your code needs significant improvements in terms of logic, error handling, and adherence to the instructions.  Focus on understanding the requirements of each question thoroughly before attempting to implement the solution.  Pay close attention to the sample outputs and marking schemes provided.  Remember to add comments to explain your code and use appropriate data types for calculations.  Consider using a more structured approach to problem-solving, breaking down each task into smaller, manageable steps.",
      "code_files": [
        "20409676_Edwin Bundan\\20409676_Edwin Bundan\\Test_1_Q1.c",
        "20409676_Edwin Bundan\\20409676_Edwin Bundan\\Test_1_Q2.c",
        "20409676_Edwin Bundan\\20409676_Edwin Bundan\\Test_1_Q3.c"
      ]
    },
    {
      "submission": "20577892.zip",
      "marks": 4.0,
      "feedback": "Your submission demonstrates a partial understanding of the assignment requirements.  Let's break down the feedback for each question:\n\n**Q1:** Your code for Q1 has several issues.  The loop variables `i` and `j` are incorrectly used and not properly initialized. The `width` variable is undefined. The logic for printing the grid of asterisks is flawed. You need to correct the loop structure and variable usage to accurately print the grid based on user input.  You received 1 mark for attempting to take user input.\n\n**Q2:** Your Q2 solution correctly calculates the sum, average, and product of three integers. However, the logic for finding the largest and smallest integers is partially correct but could be improved for clarity and efficiency.  The use of multiple `if` statements is acceptable, but a more concise approach could be used. You received 2 marks for the correct sum, average, and product calculations.\n\n**Q3:** Your Q3 code has significant flaws. The `switch` statement is incomplete and lacks proper handling for each product type. The discount calculation is also incorrect. The program doesn't correctly handle user input and calculations for different product types.  The logic for calculating the final cost after applying the discount is also flawed. You received 1 mark for attempting to use a switch statement and 1 mark for taking user input. \n\nOverall, your code needs significant improvements in terms of logic, structure, and error handling.  Review the provided sample solutions and focus on understanding the core concepts of loops, conditional statements, and input/output operations in C.  Pay close attention to variable declarations, loop conditions, and the correct use of `printf` and `scanf` functions.  Ensure your code compiles and runs without errors and produces the expected output for all test cases.",
      "code_files": [
        "20577892_Ahmed_Amin_Mohamed_Osman\\20577892_Ahmed_Amin_Mohamed_Osman\\Q1.c",
        "20577892_Ahmed_Amin_Mohamed_Osman\\20577892_Ahmed_Amin_Mohamed_Osman\\Q2.c",
        "20577892_Ahmed_Amin_Mohamed_Osman\\20577892_Ahmed_Amin_Mohamed_Osman\\Q3.c"
      ]
    },
    {
      "submission": "20580127.zip",
      "marks": 5.5,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but contains several errors and omissions. \n\n**Question 1:** Your code for printing the grid of asterisks has a flawed nested loop structure. The inner loop's starting index is incorrect, leading to an inaccurate number of asterisks printed.  Additionally, the newline character is printed before the asterisks in each row. You also did not follow the prompt to use a single `printf` statement to print each row.  You should review nested loop structures and `printf` formatting. \n\n**Question 2:** Your solution for calculating the sum, average, product, smallest, and largest integers is partially correct.  While the calculations themselves are mostly accurate, you only handle the case of exactly three integers. The prompt explicitly stated that the program should handle a variable number of integers.  Your use of `if/else if` statements is also not in line with the instructions which specified using only single-selection `if` statements.  You need to improve your input handling and adapt your code to work with an arbitrary number of integers.  Consider using a `while` loop to read input until a non-integer is encountered. \n\n**Question 3:** Your code for the grocery store system has several issues.  First, you are not using `float` variables consistently for `weight` and `pricePerKg`, leading to potential data loss. Second, the discount calculation is applied incorrectly; you are multiplying the total cost by the discount percentage instead of subtracting the discount amount.  Third, the discount calculation is placed outside the `while` loop, meaning the discount is only applied to the last product entered.  Finally, your `switch` statement is missing `break` statements in some cases, leading to unintended fallthrough.  You need to carefully review your variable types, arithmetic operations, and the placement of your discount calculation.  You should also ensure that your `switch` statement functions correctly.  The use of a `while` loop is good, but the logic within the loop needs significant improvement.",
      "code_files": [
        "20580127_AhmedAbdelhalim\\Lab Assesment 1\\Q1a.c",
        "20580127_AhmedAbdelhalim\\Lab Assesment 1\\Q2.c",
        "20580127_AhmedAbdelhalim\\Lab Assesment 1\\Q3.c"
      ]
    },
    {
      "submission": "20602511.zip",
      "marks": 7.0,
      "feedback": "Your submission demonstrates a basic understanding of C programming, successfully completing the core functionalities of each question. However, there are areas needing significant improvement in terms of code structure, error handling, and adherence to best practices.\n\nQuestion 1: You correctly implemented nested loops to print the grid of asterisks.  However, the prompt asks for the user to specify the number of rows and columns, and your code does not reflect this.  The use of loop1 and loop2 as variable names is not descriptive.  Consider using more meaningful names like 'row' and 'column'.\n\nQuestion 2: You correctly calculated the sum, average, and product. Your approach to finding the smallest and largest integers using multiple if-else statements is inefficient and doesn't scale well for more than three integers.  The prompt specifically requests the use of only single-selection if statements, which you partially addressed, but a more elegant solution using a loop would be more efficient and robust.  Error handling for invalid input is missing.\n\nQuestion 3: Your implementation of the switch statement is acceptable, but the code is repetitive and could be made more concise.  The discount calculation is implemented correctly, but the structure could be improved to avoid redundant code blocks.  Error handling for invalid input is also missing.  The program lacks a clear exit condition, making it less user-friendly.  The use of double for price and totalCost is good practice for handling potential floating-point precision issues.\n\nOverall, your code functions correctly for the given test cases, but it lacks robustness, efficiency, and adherence to good programming practices.  Focus on improving code structure, error handling, and using more efficient algorithms to enhance your code quality.  Refer to the provided sample answers for better approaches to problem-solving and code organization.  Consider using functions to modularize your code and improve readability.",
      "code_files": [
        "20602511_Wong Cheuk Kei\\20602511_Wong Cheuk Kei\\Question 1.c",
        "20602511_Wong Cheuk Kei\\20602511_Wong Cheuk Kei\\Question 2.c",
        "20602511_Wong Cheuk Kei\\20602511_Wong Cheuk Kei\\Question 3.c"
      ]
    },
    {
      "submission": "20607863.zip",
      "marks": 9.5,
      "feedback": "Your code demonstrates a good understanding of basic C programming concepts and successfully completes all three questions.  Question 1 and Question 2 are implemented correctly and efficiently.  Your solutions are well-structured and easy to follow.  In Question 3, while the functionality is correct, the code could benefit from some minor improvements in terms of input validation and error handling. For instance, adding checks to ensure the user inputs positive numbers for weights, quantities, and prices would enhance the robustness of your program.  Consider using a more descriptive variable naming convention for better readability. Overall, this is a solid submission showcasing good programming skills.  A few minor improvements in error handling and input validation would elevate the code to an even higher standard.",
      "code_files": [
        "20607863_Dean Agha Koeswantoro\\20607863_Dean Agha Koeswantoro\\Question1.c",
        "20607863_Dean Agha Koeswantoro\\20607863_Dean Agha Koeswantoro\\Question2.c",
        "20607863_Dean Agha Koeswantoro\\20607863_Dean Agha Koeswantoro\\Question3.c"
      ]
    },
    {
      "submission": "20611251.zip",
      "marks": 7.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but needs significant improvements in code quality and adherence to the problem specifications. \n\n**Q1:** You successfully implemented the nested loops to print the asterisk grid, fulfilling the core requirement. However, the prompt asks for a space after each asterisk ('* '), which your code omits.  This impacts the output's visual presentation and should be addressed.  Adding comments to explain the code's logic would also improve readability.\n\n**Q2:** Your solution correctly calculates the sum, average, and product. However, your approach to finding the smallest and largest integers is inefficient and lacks clarity.  The problem statement explicitly requests the use of only single-selection if statements, which your code does not consistently follow.  The use of multiple `if-else if` statements is not in line with the instructions.  Furthermore, error handling for invalid input (non-integer values) is missing.  The average calculation should use floating-point division to ensure accuracy. \n\n**Q3:** Your implementation of the grocery store cost calculator has several issues.  First, the program does not allow the user to enter multiple product types; it only processes one product per run. The problem statement clearly indicates that the program should continue until the user enters 0 to exit.  Second, you use `int` for `weight` and `price` which is inappropriate for monetary values.  Floating-point types (`float` or `double`) are more suitable.  Third, the discount calculation is incorrect.  The formula `((totalcost*100)-(totalcost * discount))/100` is unnecessarily complex and prone to errors. A simpler and more accurate formula would be `totalcost * (1 - discount / 100)`.  Finally, the code lacks sufficient comments to explain the logic and purpose of different sections.  \n\nOverall, your code demonstrates a functional understanding of basic programming concepts, but it lacks attention to detail, efficient algorithms, and adherence to the problem specifications.  Improving code quality, error handling, and following instructions more closely will significantly enhance your solutions.",
      "code_files": [
        "20611251_Adrian Lee Joon Yin\\20611251_Adrian Lee Joon Yin\\Q1.c.c",
        "20611251_Adrian Lee Joon Yin\\20611251_Adrian Lee Joon Yin\\Q2.c.c",
        "20611251_Adrian Lee Joon Yin\\20611251_Adrian Lee Joon Yin\\Q3.c.c"
      ]
    },
    {
      "submission": "20611605.zip",
      "marks": 7.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts, but there are areas that need improvement. \n\nQ1: Your code for Question 1 is functionally correct and achieves the desired output. However, the comments are minimal, and the variable names could be more descriptive.  Consider adding comments to explain the purpose of each section of the code and using more meaningful variable names (e.g., `numRows`, `numCols` instead of `row`, `column`).\n\nQ2: Your solution to Question 2 correctly calculates the sum, average, and product. However, your approach to finding the smallest and largest integers is inefficient and lacks robustness.  It only handles three integers and doesn't account for cases where two or more integers are equal.  A more efficient and robust solution would involve iterating through an array of integers, which would also allow for a variable number of inputs.  The use of multiple `if` statements instead of a more concise approach also impacts the code's readability and maintainability.  Consider using a loop and comparing each number to the current smallest and largest values.\n\nQ3: Your code for Question 3 is largely correct, but it lacks the flexibility to handle a variable number of product entries. The program only processes one product type per execution.  The use of repetitive code blocks for each product type (Fruits, Vegetables, Dairy, Canned Goods) is inefficient and makes the code harder to maintain.  A more efficient approach would be to use functions or a more structured approach to handle the different product types.  The prompt for discount is also placed inside the loop, which is not ideal.  It should be placed after the loop to allow the user to enter a discount for the total cost of all items.\n\nOverall, your code demonstrates a functional understanding of basic programming concepts, but it lacks efficiency, robustness, and code quality in several areas.  Focus on improving your code structure, using more efficient algorithms, and adding comprehensive comments to enhance readability and maintainability.  Consider using functions to modularize your code and handle different parts of the program separately.  This will make your code more organized, easier to understand, and easier to debug.",
      "code_files": [
        "20612781_Lim Chai Shuen\\20612781_Lim Chai Shuen\\Q1.c",
        "20612781_Lim Chai Shuen\\20612781_Lim Chai Shuen\\Q2.c",
        "20612781_Lim Chai Shuen\\20612781_Lim Chai Shuen\\Q3.c"
      ]
    },
    {
      "submission": "20613250.zip",
      "marks": 9.0,
      "feedback": "Your submission demonstrates a good understanding of basic C programming concepts.  All three questions are attempted and largely functional. \n\n**Q1:** Excellent implementation of nested loops to print the asterisk grid.  The code is concise and efficient. \n\n**Q2:**  The calculation of sum, average, and product is correct. However, the logic for finding the smallest and largest integers could be improved.  Instead of nested if-else statements, consider using a more efficient approach, such as iterating through the numbers and updating the smallest and largest values as you go. This would make the code more scalable if you needed to handle more than three integers.  The use of single-selection if statements is correctly implemented.\n\n**Q3:** The use of a `while` loop and `switch` statement is appropriate for handling user input and different product types. The `counting` function is a good attempt at modularity, but it could be improved by passing the discount percentage as a parameter instead of prompting for it within the function. This would make the function more reusable and independent.  The discount calculation is slightly off; it should be `finalCost = totalCost * (1 - discount / 100);` to correctly apply the discount. \n\nOverall, your code is well-structured and readable.  Addressing the minor issues mentioned above would significantly improve the efficiency and robustness of your code.  Consider using more descriptive variable names for better readability.  Good job on completing all three questions!",
      "code_files": [
        "20613250_Eunice Lee Ying Yun\\20613250_Eunice Lee Ying Yun\\q1.c",
        "20613250_Eunice Lee Ying Yun\\20613250_Eunice Lee Ying Yun\\q2.c",
        "20613250_Eunice Lee Ying Yun\\20613250_Eunice Lee Ying Yun\\q3.c"
      ]
    },
    {
      "submission": "20619015.zip",
      "marks": 9.0,
      "feedback": "Your code demonstrates a good understanding of basic C programming concepts.  All three questions are largely functional and produce the expected outputs for the given inputs. \n\nQ1: Excellent implementation of nested loops to generate the asterisk grid.  The code is concise and easy to read. \n\nQ2:  The calculation of sum, average, and product is correct.  The use of if-else statements to find the smallest and largest numbers is also accurate. However, the prompt only asked for three integers, and your code doesn't handle more than three integers.  The sample answer 2 in the assignment shows how to handle a variable number of integers.  This limits the robustness of your solution.\n\nQ3: The switch statement is implemented correctly, handling different product types appropriately. The discount calculation is also accurate. The program structure is well-organized and easy to follow.  However, the use of integers for weight and price in the fruit and vegetable sections is not ideal.  Using floats would allow for more precise calculations.  Also, the prompt suggests using a while loop to allow the user to continue entering products until they choose to exit. Your implementation only allows for one product entry per run. \n\nOverall, your code is well-structured and mostly correct.  Addressing the points mentioned above regarding input handling, data types, and loop structures would significantly improve the robustness and completeness of your solutions.",
      "code_files": [
        "20619015_Arianna binti Ainurizam\\20619015_Arianna binti Ainurizam\\Q1.c",
        "20619015_Arianna binti Ainurizam\\20619015_Arianna binti Ainurizam\\Q2.c",
        "20619015_Arianna binti Ainurizam\\20619015_Arianna binti Ainurizam\\Q3.c"
      ]
    },
    {
      "submission": "20621408.zip",
      "marks": 9.0,
      "feedback": "Your code demonstrates a good understanding of the basic concepts for each question.  Q1 is implemented correctly and efficiently. In Q2, your approach to finding the largest and smallest integers is functional but could be simplified using a loop for better scalability.  The code for Q3 is mostly correct, but it lacks input validation (e.g., checking for negative weights or quantities) and could benefit from consolidating the cost calculation logic to avoid repetition.  The use of `double` instead of `float` for price in Q3 is a good practice.  Overall, your code is well-structured and easy to read, but addressing the mentioned points would improve its robustness and efficiency. Consider using more descriptive variable names for better readability.  For example, instead of `value1`, `value2`, `value3`, use names like `firstNumber`, `secondNumber`, `thirdNumber`.  A small deduction is applied for the minor issues mentioned.",
      "code_files": [
        "20621408_Charles Dan Zhi Jhet\\20621408_Charles Dan Zhi Jhet\\Q1.c",
        "20621408_Charles Dan Zhi Jhet\\20621408_Charles Dan Zhi Jhet\\Q2.c",
        "20621408_Charles Dan Zhi Jhet\\20621408_Charles Dan Zhi Jhet\\Q3.c"
      ]
    },
    {
      "submission": "20701571.zip",
      "marks": 2.0,
      "feedback": "Your submission demonstrates a very limited understanding of the C programming concepts and requirements of the assignment.  Let's break down the issues in each question:\n\n**Q1:** You haven't printed a grid of asterisks as requested. Your code prints numbers instead. The loop structure is partially correct in terms of iterating through rows and columns, but the output is completely wrong. You need to use the '*' character and correctly format the output using printf.  You also need to handle the input of rows and columns correctly.  This question is worth 3 marks, and based on your submission, you receive 0 marks.\n\n**Q2:** You only calculate the sum of three integers. The question requires calculating the sum, average, product, smallest, and largest of at least three integers. Your code only handles three integers and doesn't calculate the average, product, smallest, or largest.  The input method is also flawed. You should use a loop to handle a variable number of integers.  This question is worth 3 marks, and you receive 0 marks.\n\n**Q3:** Your code only takes the product code as input and has a very basic if-else structure to handle different product types.  It doesn't fully implement the logic for calculating the cost for each product type, nor does it handle the discount calculation or the program exit condition.  The switch statement is missing, and the input and output are incomplete. This question is worth 4 marks, and you receive 20 marks for the partially correct input section. \n\nOverall, your code needs significant improvements in terms of logic, functionality, and adherence to the assignment requirements.  Review the provided sample answers and focus on understanding the fundamental concepts of C programming, including loops, conditional statements, input/output operations, and basic arithmetic calculations.  Pay close attention to the specific requirements of each question and test your code thoroughly before submission.",
      "code_files": [
        "20701571_Abdullah Usmani\\20701571_Abdullah Usmani\\Q1.c",
        "20701571_Abdullah Usmani\\20701571_Abdullah Usmani\\Q2.c",
        "20701571_Abdullah Usmani\\20701571_Abdullah Usmani\\Q3.c"
      ]
    },
    {
      "submission": "20701680.zip",
      "marks": 7.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but needs improvement in several areas. \n\nQuestion 1: You correctly implemented the nested loops to print the grid of asterisks, fulfilling the core requirement. However, the prompt for input could be more user-friendly.  The spacing between asterisks is inconsistent compared to the example provided. \n\nQuestion 2: Your code calculates the sum, average, product, smallest, and largest correctly for three integers.  However, it only handles three integers, not a variable number as requested. The use of if-else if-else is acceptable, but the problem specifically asked for single-selection if statements.  Consider using a loop to handle an arbitrary number of inputs and a more efficient approach to finding the minimum and maximum values. \n\nQuestion 3: Your implementation of the switch statement is functional, but the input validation is weak.  It only accepts single-digit integer codes, and error handling for non-numeric input is missing.  The prompt for discount could be clearer.  The program doesn't allow the user to enter multiple product types in a single run, as implied by the problem description.  Consider using a loop to allow multiple product entries before exiting. \n\nOverall, your code compiles and produces outputs for the given inputs, but it lacks robustness, flexibility, and adherence to all aspects of the problem statements.  Focus on improving input validation, error handling, and the ability to handle a variable number of inputs where applicable.  Pay close attention to the specific requirements of each question, including the use of single-selection if statements in Question 2 and the handling of multiple product types in Question 3.  Improve code comments to enhance readability and understanding.",
      "code_files": [
        "20701680_Florence Tinevimbo Chigwida\\Test1.c",
        "20701680_Florence Tinevimbo Chigwida\\test2.c",
        "20701680_Florence Tinevimbo Chigwida\\test3.c"
      ]
    },
    {
      "submission": "20703971.zip",
      "marks": 5.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but contains several significant flaws. Let's break down the feedback for each question:\n\n**Q1:** You have a fundamental error in your loop structure.  You're attempting to print a newline character within the inner loop, which results in incorrect grid formatting. The newline should only be printed *after* each row is complete.  Additionally, you've mistakenly swapped the prompts for rows and columns.  While your comments are present, they are not particularly descriptive or helpful.  You received 1 mark for the input section, but 0 for the loop structure.\n\n**Q2:** Your code correctly calculates the sum, product, and average for three integers. However, your approach to finding the smallest and largest integers is inefficient and doesn't scale well.  You should use a loop to handle an arbitrary number of integers, as suggested in the sample answer.  The use of if/else if/else is acceptable, but a more efficient approach would be to iterate through the numbers.  You also incorrectly use `%d` to print the floating-point average, leading to loss of precision. You received 1 mark for the input/output and 1 mark for the calculations, but 0 for the if/else structure because it doesn't meet the requirements of handling a variable number of integers.\n\n**Q3:** This question shows the least understanding. Your code only handles a single product type and doesn't incorporate a loop to allow multiple product entries.  The `switch` statement is entirely missing.  The discount calculation is correct, but the overall structure is far from the requirements. You received 0 marks for this question.\n\nTo improve your submission, focus on:\n\n* **Correct Loop Structures:**  Master nested loops for Q1 and iterative loops for Q2. \n* **Efficient Algorithms:** Use more efficient algorithms for finding the minimum and maximum values in Q2.\n* **Program Structure:**  Implement the `switch` statement in Q3 and use loops to handle multiple inputs. \n* **Input Validation:** Add input validation to handle potential errors (e.g., non-numeric input).\n* **Code Clarity:** Write more descriptive comments to explain the logic of your code. \n* **Testing:** Test your code thoroughly with various inputs to identify and fix errors.",
      "code_files": [
        "20703971_Ahmad Daffa Fatih Aljabbar\\20703971_Ahmad Daffa Fatih Aljabbar\\Q1.c",
        "20703971_Ahmad Daffa Fatih Aljabbar\\20703971_Ahmad Daffa Fatih Aljabbar\\Q2.c",
        "20703971_Ahmad Daffa Fatih Aljabbar\\20703971_Ahmad Daffa Fatih Aljabbar\\Q3.c"
      ]
    },
    {
      "submission": "20705220.zip",
      "marks": 7.5,
      "feedback": "Your code demonstrates a good understanding of basic C programming concepts, successfully completing the core functionality of each question. However, there's room for improvement in terms of code structure, efficiency, and handling of edge cases. \n\n**Question 1:** Your solution correctly prints the grid of asterisks using nested loops.  The input and output are handled correctly. However, the prompt could be improved by adding a newline character after the prompt to enhance readability.  Also, adding a space after each asterisk in the grid, as shown in the sample output, would improve the visual presentation. \n\n**Question 2:** You've correctly calculated the sum, average, and product of three integers. The functions for finding the smallest and largest integers are well-structured. However, the program only accepts exactly three integers, limiting its functionality. The sample answer 2 in the assignment description shows how to handle a variable number of integers, which would significantly improve the program's flexibility and robustness.  Consider implementing this for a more complete solution. \n\n**Question 3:** Your implementation of the grocery store cost calculator is functional and uses a switch statement correctly.  The discount calculation is also accurate. However, the code is repetitive.  You have almost identical code blocks for fruits and vegetables, and for dairy products and canned goods.  This repetition makes the code less maintainable and harder to read.  Consider refactoring the code to reduce redundancy.  For example, you could create a function to calculate the cost based on weight or quantity, and then call this function from within the switch statement.  This would make the code more concise and easier to understand.  Also, error handling for invalid inputs (e.g., negative weight or quantity) is missing.  Adding input validation would make the program more robust.  Finally, the prompt for the product code could be improved by adding a newline character after the prompt to enhance readability.",
      "code_files": [
        "20705220_ErynCheeEnNing\\Exam 1 Programming\\q1.c",
        "20705220_ErynCheeEnNing\\Exam 1 Programming\\q2.c",
        "20705220_ErynCheeEnNing\\Exam 1 Programming\\q3.c"
      ]
    },
    {
      "submission": "20717304.zip",
      "marks": 9.0,
      "feedback": "Your code demonstrates a good understanding of basic C programming concepts.  All three questions are implemented and produce the correct output for the given test cases. \n\nQ1:  The asterisk grid is correctly generated using nested loops.  However, there's a minor formatting issue; the spacing between asterisks isn't consistent with the example provided.  Adding a space after the asterisk in the printf statement would resolve this. \n\nQ2: The calculations for sum, average, product, smallest, and largest are all correctly implemented using if statements as required.  The code could be improved by handling potential errors, such as non-integer input. \n\nQ3: The switch statement effectively handles different product types, and the discount calculation is correctly implemented. The program structure is well-organized and easy to follow.  The use of a while loop for continuous input is appropriate. \n\nOverall, your code is functional and demonstrates a solid grasp of the fundamental concepts.  Addressing the minor formatting issue in Q1 and adding error handling in Q2 would further improve the code's robustness and quality.  Consider using more descriptive variable names for better readability.",
      "code_files": [
        "20717304_Eashwar\\20717304_Eashwar\\Q1.c",
        "20717304_Eashwar\\20717304_Eashwar\\Q2.c",
        "20717304_Eashwar\\20717304_Eashwar\\Q3.c"
      ]
    },
    {
      "submission": "20717489.zip",
      "marks": 0.0,
      "feedback": "Error during grading: Invalid json output: ```json\n{\n  \"marks\": 40,\n  \"feedback\": \"Your submission demonstrates a basic understanding of the concepts but contains significant errors and omissions. Let's break down the feedback for each question:\\n\\n**Question 1:** Your code attempts to create a grid of asterisks, but the loop structure is incorrect. The outer loop iterates through columns instead of rows, and the inner loop's condition is also flawed, leading to an incorrect number of asterisks printed.  You also used `scanf_s`, which is a Microsoft-specific function and not standard C.  You need to correct the loop structure to accurately reflect the problem's requirements.  You received 1 mark for attempting to get input, but the output is completely wrong.\\n\\n**Question 2:** Your code has several critical issues. First, you declare `count` as an integer but then attempt to use it in `scanf_s(\"%d\", count);` without providing a memory address. This is a compilation error.  Second, you use `integer[i]` as if it were an array, but you haven't declared or allocated memory for it. This is a runtime error.  Third, your logic for calculating the smallest and largest integers is flawed and doesn't correctly handle multiple inputs.  Finally, your output statements are missing the necessary format specifiers.  You received 1 mark for attempting to calculate the sum, but the rest of the calculations are incorrect due to the fundamental errors in your code. \\n\\n**Question 3:** Your code structure is closer to the requirements, using a `switch` statement to handle different product types. However, you're using `scanf_s` again (non-standard), and you have not handled floating-point numbers correctly.  You are also missing input validation.  The discount calculation is also incorrect. You received 1 mark for the basic switch structure and 1 mark for attempting to calculate the total cost, but the implementation is flawed. \\n\\nOverall, your code needs significant improvements in terms of logic, error handling, and adherence to standard C practices.  Focus on understanding the fundamental concepts of loops, arrays, and input/output operations before attempting more complex problems.  Review the provided sample solutions and pay close attention to the use of standard C functions and proper memory management.\"\n}\n```\nFor troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE",
      "code_files": [
        "21797489_Chen HongJian\\21797489_Chen HongJian\\x64\\21797489_Chen HongJian\\q1.c",
        "21797489_Chen HongJian\\21797489_Chen HongJian\\x64\\21797489_Chen HongJian\\q2.c",
        "21797489_Chen HongJian\\21797489_Chen HongJian\\x64\\21797489_Chen HongJian\\q3.c"
      ]
    },
    {
      "submission": "20718864.zip",
      "marks": 4.0,
      "feedback": "Your submission demonstrates a basic understanding of the concepts but has significant flaws in implementation and adherence to the assignment requirements. \n\n**Question 1:** You correctly used nested loops to print a grid of asterisks. However, the grid size is hardcoded (8 rows, 9 columns), failing to meet the requirement of user-specified dimensions.  This significantly impacts the functionality and results in a loss of marks for correct input/output and loop structure.\n\n**Question 2:** You correctly calculated the sum, product, and identified the largest and smallest integers among three inputs. However, the program only accepts three integers, not a variable number as required.  The average calculation uses integer division, leading to inaccurate results. The use of if/else if/else is not in line with the single-selection if statement requirement.  These issues result in a loss of marks for input/output, if/else structure, and calculation accuracy.\n\n**Question 3:** Your attempt at a switch statement is incomplete and contains several errors. The program does not correctly handle user input for different product types, and the cost calculation is flawed.  The discount calculation is missing entirely.  The use of getchar() in the while loop is inappropriate and doesn't achieve the intended functionality.  These issues result in a significant loss of marks for input, output, program logic, and overall functionality. \n\nTo improve your submission, focus on:\n\n* **User Input:** Implement proper input mechanisms to handle user-specified values for grid dimensions (Q1), variable numbers of integers (Q2), and product type selection (Q3).\n* **Variable Handling:** Use appropriate data types and handle variable numbers of inputs correctly.\n* **Calculations:** Ensure accurate calculations, including floating-point division where necessary.\n* **Control Structures:** Adhere to the specified control structures (single-selection if statements in Q2).\n* **Error Handling:** Implement error handling to gracefully manage invalid inputs.\n* **Code Structure:** Improve code organization, readability, and commenting to enhance clarity and maintainability.  Break down complex tasks into smaller, more manageable functions.\n* **Testing:** Thoroughly test your code with various inputs to identify and fix errors before submission.",
      "code_files": [
        "20718864_Adrian Naufal Mazaya\\20718864_Adrian Naufal Mazaya\\Q1.c",
        "20718864_Adrian Naufal Mazaya\\20718864_Adrian Naufal Mazaya\\Q2.c",
        "20718864_Adrian Naufal Mazaya\\20718864_Adrian Naufal Mazaya\\Q3.c"
      ]
    },
    {
      "submission": "20720830.zip",
      "marks": 7.0,
      "feedback": "Your code demonstrates a functional understanding of basic C programming concepts, but there are areas needing improvement. \n\nQ1: You successfully implemented nested loops to print the asterisk grid. However, your loop conditions are slightly off, resulting in an extra space at the beginning of each row and one less asterisk in each row than specified.  The input/output is mostly correct, but the formatting doesn't precisely match the sample output.  \n\nQ2: You correctly calculated the sum, average, and product of three integers. Your approach to finding the minimum and maximum is also correct. However, the prompt asked for a variable number of integers, and your code only handles three.  The use of only single-selection if statements is good. \n\nQ3: Your implementation of the switch statement to handle different product types is well-structured. The calculation of total and final costs is also correct.  However, the program lacks a loop to allow the user to enter multiple product types before exiting, as specified in the prompt.  The input and output are correct for a single product type. \n\nOverall, your code shows a basic grasp of the concepts, but you need to pay closer attention to the specific requirements of each question, particularly handling variable input and implementing loops for repeated actions.  Improving your code's adherence to the problem statements will significantly improve your score.",
      "code_files": [
        "20720830_Chai Chok Yuen\\20720830_Chai Chok Yuen\\Q1.c",
        "20720830_Chai Chok Yuen\\20720830_Chai Chok Yuen\\Q2.c",
        "20720830_Chai Chok Yuen\\20720830_Chai Chok Yuen\\Q3.c"
      ]
    },
    {
      "submission": "20722250.zip",
      "marks": 9.0,
      "feedback": "Your code demonstrates a good understanding of basic C programming concepts and successfully completes the tasks outlined in the assignment.  Q1 and Q2 are well-structured and produce the correct output.  However, there are a few areas for improvement:\n\nQ1: Your solution is efficient and correctly prints the grid.  The use of nested loops is appropriate.  Adding comments to explain the purpose of each loop would enhance readability.\n\nQ2: The logic for finding the minimum and maximum values is correct, but it could be simplified using a more concise approach.  Consider using a loop to iterate through the numbers and update the minimum and maximum values in each iteration. This would make the code more efficient and easier to extend if you needed to handle more than three numbers.  Also, the prompt could be improved to explicitly state that three integers are required.\n\nQ3: This question shows good use of a switch statement and handles different product types correctly.  The code is well-structured and easy to follow.  However, the use of `fflush(stdin)` is generally discouraged as it's not portable across all systems.  Consider using a different method to clear the input buffer if necessary.  Also, adding input validation to ensure the user enters valid numerical data would improve the robustness of your code.  For example, you could check if the user enters negative values for weight or quantity.\n\nOverall, your code is functional and demonstrates a solid grasp of the fundamental concepts.  Addressing the minor issues mentioned above would significantly improve the code's quality and efficiency.",
      "code_files": [
        "20722250_Adrian Lee Zhen Hom\\20722250_Adrian Lee Zhen Hom\\Q1.c",
        "20722250_Adrian Lee Zhen Hom\\20722250_Adrian Lee Zhen Hom\\Q2.c",
        "20722250_Adrian Lee Zhen Hom\\20722250_Adrian Lee Zhen Hom\\Q3.c"
      ]
    },
    {
      "submission": "20722371.zip",
      "marks": 7.0,
      "feedback": "Your submission demonstrates a basic understanding of C programming and successfully compiles and runs for the given test cases. However, there are several areas for improvement:\n\n**Q1:** This question is well-answered.  The code correctly prints the grid of asterisks as requested.  Good job using nested loops effectively.\n\n**Q2:** Your solution to Q2 is partially correct. While you calculate the sum, average, and product correctly, your approach to finding the smallest and largest integers is inefficient and uses nested if statements, violating the requirement to use only single-selection if statements.  You should refactor this section to use only single if statements for comparison.  The current implementation is also limited to only three integers.  A more robust solution would handle an arbitrary number of integers.\n\n**Q3:** This is where the most significant improvements are needed. Your code only handles the calculation of cost and discounted cost, but it doesn't incorporate the core logic of a switch statement to handle different product types as specified in the question.  The program also uses integers for weight and price, which is inappropriate for representing potentially fractional values.  You should use floating-point numbers (float or double) for these variables.  The program also lacks the crucial while loop to allow the user to repeatedly enter product codes until they choose to exit (by entering 0).  The current implementation only processes one product type.  Finally, the prompt for the product code is missing the option to exit the program (by entering 0).\n\n**Overall:** Your code demonstrates a functional understanding of basic C programming concepts, but it lacks the robustness and sophistication required to fully address the problem statements.  Focus on improving your code structure, error handling, and the use of appropriate data types.  Pay close attention to the specific requirements of each question, including the use of single-selection if statements and the implementation of a switch statement in Q3.  Consider using more descriptive variable names to improve code readability.  The use of comments is minimal and could be significantly improved to enhance understanding.",
      "code_files": [
        "20722371_ARFAN SHAFEY BIN KAMAL AZIZI\\Q1.c",
        "20722371_ARFAN SHAFEY BIN KAMAL AZIZI\\Q2.c",
        "20722371_ARFAN SHAFEY BIN KAMAL AZIZI\\Q3.c"
      ]
    }
  ],
  "failed": [
    {
      "submission": "20581109.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20590645.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20596548.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20611298.zip",
      "error": "No code files found in submission"
    },
    {
      "submission": "20712132.zip",
      "error": "No code files found in submission"
    }
  ],
  "total_submissions": 25,
  "test_mode": false,
  "test_limit": null
}