[
  {
    "student_id": "20604119",
    "code": "\n/* --- q1.c --- */\n//Question 1\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N, index1, index2;\r\n    int *array;\r\n\r\n    //Prompts the user to enter the size of the array\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n    } while (N < 5);\r\n\r\n    //Dynamically allocates memory for the array\r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //Prompts the user to input each element of the array\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    //Prompts the user to input the two indices\r\n    do {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    //Computes the sum of the two target elements using pointers\r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    //Prints the output for the sum\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    //Frees the allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- q2.c --- */\n//Question 2\r\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\n//Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n\r\n    //Prompta the user to enter the values of the three student names and marks one by one\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    //Calculate the average mark\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    //Display student names and marks and the average mark\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n//Function to calculate the average mark\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n//Function to display student names and marks and the average mark\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- q3.c --- */\n//Question 3\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n    int *bids;\r\n\r\n    //Prompts the user to enter the number of bids\r\n    do {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 2) {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n    } while (N < 2);\r\n\r\n    //Dynamically allocates memory for the bids array\r\n    bids = (int *)malloc(N * sizeof(int));\r\n    if (bids == NULL) {\r\n        printf(\"Memory allocation failed\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //Prompts the user to input the values of the bids\r\n    for (int i = 0; i < N; i++) {\r\n        do {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%d\", &bids[i]);\r\n            if (bids[i] < 100000) {\r\n                printf(\"Error: Bid must be at least $100000. Please try again.\\n\");\r\n            }\r\n        } while (bids[i] < 100000);\r\n    }\r\n\r\n    //Determines the highest bid\r\n    int highestBid = bids[0];\r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    //Outputs the value of the highest bid\r\n    printf(\"The highest bid is $%d\\n\", highestBid);\r\n\r\n    //Frees the allocated memory\r\n    free(bids);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print a grid of asterisks based on that input. The logic is sound and produces the expected output. q2:The program correctly reads three integers from the user and calculates their sum, average, product, smallest, and largest values. The logic is sound, and the expected output is achieved. q3:The program successfully implements a menu-driven system for calculating the costs of various grocery products based on user inputs. It handles different product types, applies discounts, and calculates the total cost effectively."
  },
  {
    "student_id": "20593018",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n    int id1, id2;\r\n    \r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    while (N < 5) {\r\n        printf(\"Error: N must be more than or equal to 5. Please try again:\");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    int *arr = (int *)malloc(N*sizeof(int));\r\n    if (arr==NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i=0; i<N; i++) {\r\n        printf(\"Element %d:\",i);\r\n        scanf(\"%d\", (arr+i));\r\n    }\r\n\r\n    while(1){\r\n        printf(\"Enter the indices of the two elements (0<=index1, index2<%d):\",N);\r\n        scanf(\"%d %d\",&id1,&id2);\r\n\r\n        if(id1>=0 && id1<N && id2>=0 && id2<N) {\r\n            break;\r\n        } \r\n        else{\r\n            printf(\"Error: Indices must be within the range of the array elements.Please try again.\\n\");\r\n        }\r\n    }\r\n\r\n    int sum = *(arr+id1)+ *(arr+id2);\r\n    printf(\"The sum of the values at indices %d and %d is:%d\", id1, id2, sum);\r\n    free(arr);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n\n/* --- q2.c --- */\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define number_of_student 3\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum=0;\r\n    for (int i=0; i<count; i++) {\r\n        sum +=marks[i];\r\n    }\r\n    return sum/count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    for (int i=0; i<number_of_student; i++) {\r\n        printf(\"%s:%.2f\\n\",names[i],marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char names[number_of_student][NAME_LENGTH];\r\n    float marks[number_of_student];\r\n    int i;\r\n\r\n    for (int i=0; i<number_of_student; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); \r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n    printf(\"\\nStudent Names and Marks: \");\r\n    displayStudentData(names,marks);\r\n    \r\n    float Average=calculateAverage(marks,number_of_student);\r\n    printf(\"Average Mark: %.2f\",Average);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n\n/* --- q3.c --- */\n#include <stdio.h>\r\n\r\n#define minbid 100000\r\nint main() {\r\n    int b,i,bid,bids[b],highestbid;\r\n    \r\n    do {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &b);\r\n        if (b<2) {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n    }\r\n    while (b<2);\r\n    \r\n    for (i=0; i<b; i++) {\r\n        do {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%d\", &bid);\r\n            if (bid<minbid) {\r\n                printf(\"Error: Bid must be at least $%d. Please try again.\\n\", minbid);\r\n            } else {\r\n                bids[i]=bid; \r\n            }\r\n        } \r\n    while (bid<minbid);\r\n    for (i =0; i<b; i++) {\r\n        if (bids[i] > highestbid) {\r\n            highestbid = bids[i];\r\n        }\r\n    }\r\n    printf(\"The highest bid is: $%d\\n\", highestbid);\r\n\r\n    return 0;\r\n}\r\n}\r\n\r\n",
    "feedback": "q1:The program prompts the user for the number of rows and columns and prints a grid of asterisks. However, the first nested loop is empty and does not contribute to the output, which indicates a misunderstanding of the loop structure. q2:The program accurately calculates the sum, average, product, smallest, and largest of three integers input by the user.Move variable declarations (num1, num2, num3, Sum, product, and Average) inside the main function to avoid using global variables, which enhances code maintainability.Consider simplifying the logic for finding the smallest and largest values. You can initialize smallest and largest with the first number and then update them based on comparisons, which would also handle cases with equal numbers more effectively.  q3: The implementation meets the basic requirements, including calculations for costs based on weight and discounts.The code is repetitive, especially in the sections that handle different product codes. This redundancy could be reduced by consolidating the common logic into a single section or function, improving readability and maintainability. However, asking weight instead of quantity for case 3 & 4"
  },
  {
    "student_id": "20620220",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int num;\n    int index1, index2;\n\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &num);\n    } while (num < 5);\n\n\n    int *array = (int *)malloc(num * sizeof(int));\n    if (array == NULL) {\n        return 1;\n    }\n\n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < num; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (array + i)); \n    }\n\n    while (1) {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < 6): \");\n        scanf(\"%d %d\", &index1, &index2);\n\n        if ((index1 >= 0 && index1 < num) && (index2 >= 0 && index2 < num)) {\n            break; \n        }\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n    }\n\n    int sum = *(array + index1) + *(array + index2);\n\n    printf(\"The sum of the elements at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    free(array);\n\n    return 0;\n}\n\n/* --- Q2.c --- */\n#include <stdio.h>\n#define NAME_LENGTH 50\n#define STUDENT_COUNT 3\n\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\nint main() {\n    char names[STUDENT_COUNT][NAME_LENGTH];\n    float marks[STUDENT_COUNT];\n\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]); \n\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]); \n    }\n\n    float average = calculateAverage(marks, STUDENT_COUNT);\n\n    displayStudentData(names, marks, STUDENT_COUNT);\n    printf(\"\\nThe average mark is: %.2f\\n\", average);\n\n    return 0;\n}\n\n/* --- Q3.c --- */\n#include <stdio.h>\n#define MIN_BID 100000\n\nint main()\n{\n    int num; \n    int bids[num];\n    \n    do {\n        printf(\"Enter the number of bids: \");\n        scanf(\"%d\", &num);\n        if (num < 2) {\n            printf(\"Error: Number of bids must be at least 2. Please try again\\n\");\n        }\n    } while (num < 2);\n    \n    for (int i = 0; i < num; i++) {\n        do {\n            printf(\"Enter the bids (must be at least $100000):\\n\");\n            scanf(\"%d\", &bids[i]);\n            if (bids[i] < MIN_BID) {\n                printf(\"Error: Bid must be at least $100000. Please try again: \");\n            }\n        } while (bids[i] < MIN_BID);\n    }\n    \n    int highest_bid = bids[0];\n    for (int i = 0; i < num; i++) {\n        if (bids[i] > highest_bid){\n            highest_bid = bids[i];\n        }\n    }\n    \n    printf(\"The highest bid is: %d\\n\", highest_bid);\n    \n    return 0;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: syntax errors.there are several issues in the implementation that prevent it from functioning correctly. q3:there are issues with input handling and calculation logic that could lead to incorrect results.The format strings for scanf contain \\n, which is unnecessary and can lead to unexpected behavior. Remove \\n from the format strings."
  },
  {
    "student_id": "20701680",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int n ;\r\n     printf(\"Enter the size to the array\");\r\n    scanf(\"%d\",& n) ;\r\n    \r\n    if (n <5){\r\n       return 1;\r\n    }\r\n    int arr [n];\r\n    int *ptr = &arr[50] ;\r\n    int k, j ;\r\n   \r\n    printf(\"Enter the array elements\\n\") ;\r\n    for (int i = 0 ; i < n ; i++){\r\n        printf(\"Element %d : \\n\" ,i) ;\r\n        scanf(\"%d\",& *(ptr+i)) ;\r\n    }\r\n    printf(\"Enter the indices of the two elements within the range of array elements\" ) ;\r\n    scanf(\"%d %d\", & j, &k);\r\n    if(j>5 || k> 5){\r\n        printf(\"Error:Indices must be within the range of element . Please try again\");\r\n      printf(\"Enter the indices of the two elements within the range of array elements\" ) ;\r\n    scanf(\"%d %d\", & j, &k);  \r\n    }\r\n    \r\n   int  sum =  *(ptr+j) + *(ptr+k) ; \r\n   \r\n  printf(\"The sum of the values at the indices is %d\" , sum) ;\r\n\r\n    \r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n\r\ntypedef struct {\r\n    char name[50];\r\n    float mark;\r\n} Marks;\r\n\r\n\r\nfloat CalculateAverage(float sum, int count) {\r\n    return sum / count;\r\n}\r\n\r\nint main() {\r\n    Marks Students[3];\r\n    float average;\r\n    float sum = 0;\r\n\r\n  \r\n    for (int k = 0; k < 3; k++) {\r\n        printf(\"\\nEnter the name of student %d: \", k + 1);\r\n        scanf(\"%s\", Students[k].name); \r\n        printf(\"Enter mark of student %d: \", k + 1);\r\n        scanf(\"%f\", &Students[k].mark); \r\n    }\r\n\r\n    \r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"%s: %.1f\\n\", Students[i].name, Students[i].mark);\r\n        sum += Students[i].mark; \r\n    }\r\n\r\n   \r\n    average = CalculateAverage(sum, 3);\r\n    printf(\"\\nAverage mark: %.1f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int n ;\r\n \r\n    int highestbid = 0;\r\n    \r\n    \r\n   \r\n    printf(\"Enter the number of bids\");\r\n    scanf(\"%d\",&n);\r\n    int bid[n] ;\r\n    if (n < 2)\r\n    {\r\n        printf(\"Number of bids must be atleast 2 please  try again\");\r\n        scanf(\"%d\",&n);\r\n       \r\n    }\r\n    for (int i = 1 ; i < n+1 ; i ++){\r\n    printf(\"Enter the bids (must be atleast$100000) :\");\r\n    printf(\"Bid %d  \" , i);\r\n    scanf(\"%d\",& bid[i] );\r\n    if (bid[i]< 100000){\r\n        printf(\"Bid must be atleast $100000. Please try again\");\r\n          printf(\"Bid %d  \" , i);\r\n    scanf(\"%d\",& bid[i] );\r\n    }\r\n    if (bid[i] > highestbid){\r\n        highestbid = bid[i];\r\n    }\r\n    \r\n   }\r\n    printf(\"The highest bid is : %d\",highestbid);\r\n   }\r\n   \r\n    \r\n   return 0 ; \r\n  \r\n}\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print a grid of asterisks based on that input. The logic is sound and produces the expected output. q2:The program correctly prompts the user for three integers and computes the sum, average, product, smallest, and largest values. The use of \\t in the scanf format string is unnecessary and may lead to confusion. It's better to use spaces or %d %d %d to read integers separated by spaces without formatting issues.he logic for determining the smallest integer can be simplified. q3:The program correctly implements a menu-driven system that allows users to enter product details, calculate total costs, and apply discounts.\n    The use of a switch statement for different product codes is appropriate, but the code is repetitive across cases, particularly in the handling of discounts and total cost calculations."
  },
  {
    "student_id": "20603953",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(){\r\n    int n =0;\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &n);\r\n    if (n<5){\r\n        printf(\"Error: N must be >= 5. Pls try again: \");\r\n        scanf(\"%d\", &n);\r\n    }\r\n    while(n >= 5){\r\n        \r\n        int *aPtr = (int*)malloc(n*sizeof(int));    // create a size modfiyable array which is base on user input\r\n        puts(\"Enter the array elements: \");\r\n            \r\n        for (int i=0; i<n; i++){\r\n            int element=0;\r\n            printf(\"Element %d: \", i);\r\n            scanf(\"%d\", &element);\r\n            aPtr[i] =  element;   \r\n        }\r\n\r\n        int index1=0;\r\n        int index2=0;\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", n);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if (index1 > n || index2 > n){      // if indices out of array's range, print error message\r\n            printf(\"Error: Indices must be within the range of the array elements.\\nPlease try again: \");                \r\n            scanf(\"%d %d\", &index1, &index2);   // scan & save again\r\n        }\r\n        while (0 < index1 < n && 0 <= index2 <n){\r\n            int *indexPtr = aPtr;\r\n            int sum = *(indexPtr + index1) + *(indexPtr + index2);  // calculate sum of two elements at the corresponding indices\r\n            printf(\"The sum of the values at indices %d and %d is: %d\", index1, index2, sum);    \r\n            break;      // break out of inner while loop\r\n        }\r\n        break;  // break out of outer while loop\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\r\n#include <ctype.h>\r\n\r\n#define NAME_LENGTH 50\r\n\r\n// Function prototype\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const\r\nfloat marks[]); // NAME_LENGTH 50 \r\nvoid r_whitespaces();\r\n\r\n\r\nint main(){\r\n    char sNames[3][NAME_LENGTH];\r\n    float sMarks[3];\r\n    for (int i=0; i<3; i++){\r\n        r_whitespaces();    // remove whitespaces after student 1 marks\r\n        \r\n        printf(\"Enter the name of student %d: \", i+1);\r\n        fgets(sNames[i], sizeof(sNames), stdin);\r\n        sNames[i][strcspn(sNames[i], \"\\n\")] = 0;    // remove newline after entering name\r\n        \r\n        printf(\"Enter the mark of student %d: \", i+1);\r\n        float mark=0;\r\n        scanf(\"%f\", &mark);\r\n        sMarks[i] = mark;       // scan and save student mark to sMarks[i]\r\n    }\r\n    \r\n    printf(\"\\n\");\r\n    displayStudentData(sNames, sMarks);\r\n\r\n    float average = calculateAverage(sMarks, 3);\r\n    printf(\"\\nAverage mark: %.2f\", average);\r\n    \r\n    return 0;\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count){\r\n    float sum=0;\r\n    for (int i=0; i<count; i++){\r\n        sum += marks[i];    \r\n    }\r\n    return sum/count;       // return average\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const\r\nfloat marks[]){\r\n    puts(\"Student names & marks: \");\r\n    for (int i=0; i<3; i++){\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);   // print student names & marks\r\n    }\r\n} \r\n\r\n// remove whitespaces before entering names (after entering float marks)\r\nvoid r_whitespaces(){\r\n    int ch;\r\n        while ((ch = getchar()) != '\\n')\r\n            continue; //discard any leftover whitespaces\r\n            //getchar() reads a character from the input buffer, discards and repeat until the character is not a newline ('\\n') or end-of-file (EOF)\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(){\r\n    int bid=0;\r\n    int *arrPtr = (int*)malloc(bid*sizeof(int));    // create a size modfiyable array which is base on user input\r\n    printf(\"Enter number of bids: \");\r\n    scanf(\"%d\", &bid);\r\n\r\n    if (bid < 2){\r\n        printf(\"Error: Number of bids must be at least 2. Pls try again: \");\r\n        scanf(\"%d\", &bid);\r\n    }\r\n\r\n    while(bid >=2){\r\n        int bid_amount=0;\r\n        printf(\"Enter the bids (must be at least $100 000): \");\r\n        \r\n        for (int i=0; i<bid; i++){\r\n            printf(\"\\nBid %d: \", i+1);\r\n            scanf(\"%d\", &bid_amount);\r\n            arrPtr[i] = bid_amount;\r\n            if (bid_amount <= 100000){   // if amount is <= $100 000, print error message\r\n                printf(\"Error: Bid must be at least $100 000. Pls try again: \");\r\n            }\r\n        }\r\n        \r\n        int highest = 0;\r\n        for (int i = 1; i < bid; ++i) {\r\n            if (arrPtr[0] < arrPtr[i]) {    // if arrPtr[i] > arrPtr[0]\r\n            arrPtr[0] = arrPtr[i];          // arrPtr[0] is current largest num\r\n            }\r\n        }\r\n        highest = arrPtr[0];\r\n        printf(\"The highest bid is: %d\", highest);\r\n        break;\r\n    }\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20713649",
    "code": "",
    "feedback": "q1:The code is mostly well-structured with clear variable initialization and comments. q2:The program correctly computes the sum, average, product, smallest, and largest values, but uses integer division for average calculation, which may lead to loss of precision. q3:The code effectively calculates costs and applies discounts"
  },
  {
    "student_id": "20590531",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly calculates the sum, average, product, smallest, and largest of three integers provided by the user. The use of functions to determine the smallest and largest values is a good programming practice.The average is calculated using integer division because both sum and 3 are integers, which can lead to incorrect results.  q3:While using int for price and quantitySold is acceptable, it's worth noting that price can sometimes be a floating-point number (especially when dealing with cents in currencies). Consider using double for price if necessary."
  },
  {
    "student_id": "20705932",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(){ \n    int size;\n    int index1 = -1;\n    int index2 = -1;\n    int sum;\n    int *p;\n    int *q;\n    printf(\"Enter the size of the array: \\n\");\n    scanf(\"%d\",&size);\n    \n    int arr[size] = (int) malloc(size + 1 * sizeof(char));\n    printf(\"enter each element of the array one by one: \\n\");\n    for (int i = 0; i < size; i++) {\n        scanf(\"%d\", &arr[i]);\n       \n    }\n    getchar();\n\n    for (int i = 0; i < size; ++i) {\n        printf(\"Element %d:%d \\n\", i, arr[i]);\n        \n    }\n        \n    \n    printf(\"Choose the indices of the two elements(0 <= index1, index2 < 6): \\n\");\n    scanf(\"%d\\n%d\",&index1,&index2);\n    while ((index1 < 0|| index1 >= size) || (index2 < 0|| index2 >= size)) {\n        printf(\"Error: Indices not in range. Try again.\\n\");\n        scanf(\"%d\",&index1);\n        scanf(\"%d\", &index2);\n        \n        \n    }\n    \n    \n    p = arr;\n    q = arr;\n    while (p != &arr[index1]) {\n        p++;\n    }\n    while (q != &arr[index2]) {\n        q++;\n    }\n    sum = *p + *q;\n    printf(\"the sum of the values at indices %d and %d is %d\", index1, index2, sum);\n    \n\n    return 0;\n}\n/* --- Q2.c --- */\n#include <stdio.h>\n#define NAME_LENGTH 50\n#define COUNT 3\n\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0\n    for (int i; i<count; i++) {\n        sum += marks[i]\n    }\n    return sum/count;\n};\nvoid displayStudentData(const char names[][NAME_LENGTH], const\nfloat marks[]) {\n    printf(\"student names and marks: \\n\");\n    for (int i = 0; i < count: i++) {\n        printf(\"%s : %.2f/n\", names[i], marks[i]);\n    }\n};\n\nint main(){\n    char names[COUNT][NAME_LENGTH];\n    float marks[COUNT];\n    \n    for (int i; i > COUNT, i++) {\n    printf(\"enter student %d name: \", i+1);\n    scanf(\" %[^\\n]\", names[i]);\n    printf(\"enter student %d mark: \", i+1);\n    scanf(\"%f\", marks[i]);\n    \n}\nfloat average =  calculateAverage(marks, COUNT)\ndisplayStudentData(names, marks, COUNT)\nprintf(\"student average is: %.2f\\n\", average)\n\n\n    return 0;\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main(){ \n    int bids;\n    \n    printf(\"enter the no. of bids: \\n\", bids);\n    scanf(\"%d\", &bids);\n    while (bids < 2) {\n        printf(\"invalid no. of bids. try again.\\n\");\n        printf(\"enter the no. of bids: \\n\", bids);\n        scanf(\"%d\", &bids);\n    int bidarr[bids];\n    }\n    for (int i = 0; i < bids; i++) {\n        int bidarr[bids];\n        printf(\"Enter bid %d: \\n\", i+1);\n        scanf(\"%d\", &bidarr[i]);\n        if (bidarr[i] >= 100000) {\n            continue; \n        }\n        else{\n            printf(\"error, bid must $100k. Try again.\\n\");\n            i--;\n        }\n    }\n    int max_bid = 0;\n    for (int i = 0; i < bids; i++) {\n        int bidarr[bids];\n        if (bidarr[i] > max_bid) {\n            max_bid = bidarr[i];\n        }\n        \n    }\n    printf(\"the highest bid is %d \", max_bid);\n\n\n    return 0;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3: incorrect output (no discounted price) Variables should be declared outside of the switch statement. The current placement can lead to errors.The program uses int for prices, which should ideally be float to handle decimal values.The switch statement lacks a default case to handle invalid product codes."
  },
  {
    "student_id": "20590530",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int arraysize = 0;\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\\n\", arraysize);\r\n\r\n    int *ptr;\r\n    ptr = (int *)malloc(arraysize * sizeof(int));\r\n    //prompt for user to enter array elements\r\n    printf(\"Enter the array elements: \\n\");\r\n\r\n    for (int j = 0; j < arraysize; j++) {\r\n        ptr[j] = -1;\r\n    }\r\n\r\n    int count = 0;\r\n    while (count < arraysize) {\r\n        int input;\r\n        printf(\"Element: \");\r\n        scanf(\"%d\\n\", &input);\r\n        ptr[count] = input;\r\n        count++;\r\n    }\r\n\r\n    int i, k;\r\n    printf(\"Enter the indices of the two elements(0 <= index1, index2 < %d): \", arraysize);\r\n    fgets(i, sizeof(i), stdin);\r\n    if (i > arraysize || k > arraysize) {\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\");\r\n        return 1;\r\n    } else {\r\n        int i = *ptr;\r\n        int k = *ptr;\r\n        int sum = ptr[i] + ptr [k];\r\n        printf(\"The sum of the values at indices 4 and 5 is: %d\", sum);\r\n    }\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float average = 0;\r\n    float sum = 0;\r\n    sum = *marks[0] + *marks[1] + *marks[2];\r\n    average = sum / 3;\r\n    printf(\"Average Mark: %.2f\\n\");\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const\r\nfloat marks[]){\r\n    char *ptr = names[];\r\n    float *ptrr = const float marks[];\r\n    printf(\"Student Names and Marks: \\n\");\r\n    printf(\"%s: %.2f\", *ptr[i], *ptrr[i]);\r\n} // NAME_LENGTH 50 \r\n\r\nint main () {\r\n    char names[2] = {i, j, k};\r\n    float marks[2] = {i, j, k};\r\n    printf(\"Enter the name of student 1: \");\r\n    scanf(\" %[^\\n]\", names[i]);\r\n    printf(\"Enter the mark of student 1: \");\r\n    scanf(\" %.f\\n\", marks[i]);\r\n    printf(\"Enter the name of student 2: \");\r\n    scanf(\" %[^\\n]\", names[j]);\r\n    printf(\"Enter the mark of student 2: \");\r\n    scanf(\" %.f\\n\", marks[j]);\r\n    printf(\"Enter the name of student 3: \");\r\n    scanf(\" %[^\\n]\", names[k]);\r\n    printf(\"Enter the mark of student 3: \");\r\n    scanf(\" %.f\\n\", marks[k]);\r\n\r\n\r\n}",
    "feedback": "q1:The outer loop (the do-while) does not correctly control the number of rows. The variable j is never incremented, leading to an infinite loop. q2:  The conditions to determine the smallest and largest numbers are incorrect. Incorrect output. q3: The dairy products case does not calculate or display the final cost after applying any discounts. Add similar logic as in other cases. The variable discount is declared twice, which leads to a compilation error. The calculation of the final cost uses integer division, which can lead to incorrect results when discount is not a multiple of 100."
  },
  {
    "student_id": "20620222",
    "code": "\n/* --- Question1.c --- */\n#include <stdio.h>\r\n\r\nint main(void) {\r\n    int n, i, index1, index2; \r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &n);\r\n\r\n    if (n >= 5) {\r\n        int arr1[n];\r\n\r\n        printf(\"Enter the array elements:\\n\");\r\n        for (i = 0; i < n; i++) {\r\n            printf(\"Element %d: \", i + 1);\r\n            scanf(\"%d\", &arr1[i]);\r\n        }\r\n\r\n        printf(\"Enter the indices of the 2 elements (0 <= index1, index2 < %d): \", n);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        //check index\r\n        if (0 <= index1 && index1 < n && 0 <= index2 && index2 < n) {\r\n            int sum = arr1[index1] + arr1[index2];\r\n            printf(\"The sum of values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n        } else {\r\n            printf(\"Error: Indices must be within the range 0 to %d. Please try again.\\n\", n - 1);\r\n        }\r\n    } else {\r\n        printf(\"Error: Size of the array must be at least 5.\\n\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n\n/* --- Question2.c --- */\n#include <stdio.h>\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\n\r\nint main(void) {\r\n    char names[3][100];\r\n    float marks[3];\r\n    int i;\r\n\r\n    //obtaining the data\r\n    for (i = 0; i < 3; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf(\"%s\", names[i]);\r\n\r\n        printf(\"Enter marks of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    float average = calculateAverage(marks, 3);\r\n    printf(\"Average marks = %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n//calculating the average\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\n/* --- Question3.c --- */\n#include <stdio.h>\r\n\r\nint largest(int arr[], int number);\r\n\r\nint main() {\r\n    int number;\r\n\r\n    //Enter number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &number);\r\n\r\n    if (number < 2) {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\r\n        return 1; \r\n    }\r\n\r\n    int arr[number];\r\n\r\n    //enter into array\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    for (int i = 0; i < number; i++) {\r\n        do {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%d\", &arr[i]);\r\n            if (arr[i] < 100000) {\r\n                printf(\"Error: Bid must be at least $100000. Please enter again.\\n\");\r\n            }\r\n        } while (arr[i] < 100000);\r\n    }\r\n\r\n    //highest bid\r\n    printf(\"Highest Bid: %d\\n\", largest(arr, number));\r\n\r\n    return 0;\r\n}\r\n\r\nint largest(int arr[], int number) {\r\n    int max = arr[0];\r\n    for (int i = 1; i < number; i++) {\r\n        if (arr[i] > max) {\r\n            max = arr[i];\r\n        }\r\n    }\r\n    return max;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20610050",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly calculates the sum, average, product, smallest, and largest of a user-defined number of integers.  q3: incorrect output, not prompting for price"
  },
  {
    "student_id": "20601157",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h> // library needed for malloc\r\n\r\nint main(){\r\n\r\n    int size;\r\n    int index1;\r\n    int index2;\r\n    int arraysizecheck=0;\r\n    int indicesrange=0;\r\n    int sum;\r\n    \r\n\r\n\r\nwhile (!arraysizecheck){ // checks for validity of array size\r\n\r\n    printf(\"Enter the size of the array (N>=5) :\"); \r\n    scanf(\"%d\",&size);\r\n\r\n    if (size<5){\r\n        printf(\"Invalid array size!\\n\");\r\n    }\r\n\r\n    else{\r\n        arraysizecheck=1;  // loops infinitely until user prompts a correct array size \r\n    }\r\n}\r\n\r\n    int *array=malloc(size*sizeof(*array)); // using malloc to dynamically allocate memory for size (from user input)\r\n\r\n    if (!array){\r\n        printf(\"There was a problem in memory allocation!\"); // error checking\r\n        return 1;\r\n    }\r\n\r\n    for (int i=0;i<size;++i){\r\n        printf(\"Enter element %d: \",i+1);   // enter elements to populate array\r\n        scanf(\"%d\",&array[i]);\r\n    }\r\n\r\n    while (!indicesrange){ // input indexes of array to get the sum of 2 elements\r\n\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d)\",size);\r\n        scanf(\"%d %d\",&index1,&index2);\r\n\r\n        if (index1<0 || index2>size){\r\n            printf(\"Error! Indices must be within the range of the array elements. Please try again!\\n\");\r\n        }\r\n\r\n        else{\r\n            indicesrange=1; // loops indefinitely until user inputs within correct range \r\n        }\r\n\r\n    }\r\n\r\n    int *ptr=&array[0];\r\n    sum=(*ptr+index1) + (*ptr+index2); // using pointers to point to index of elements, then dereference + sum the elements\r\n    free(array);\r\n\r\n    printf(\"The sum of the values at indices %d and %d is : %d\",index1,index2,sum);\r\n    return 0;\r\n\r\n}\n/* --- q2.c --- */\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50\r\n\r\nfloat calculateAverage(const float marks[],int count){\r\n\r\n    float markssum=0;\r\n    float average;\r\n\r\n    for (int i=0;i<count;++i){\r\n        markssum+=marks[i];\r\n    }\r\n\r\n    average=markssum/(count);\r\n\r\n    return average;\r\n\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH],const float marks[], int count){\r\n\r\n    printf(\"Student Names and Marks:\\n\");\r\n    for (int i=0;i<count;++i){\r\n        printf(\"%s: %.2f\\n\",names[i],marks[i]);\r\n        }\r\n}\r\n\r\nint main (){\r\n\r\n    float marks[3];\r\n    char names[50][NAME_LENGTH];\r\n    int count = 0;\r\n\r\n    for (int i=0;i<3;++i){\r\n        printf(\"Enter the name of student %d:\",count+1);\r\n        scanf(\" %*[^\\n]\",names[i]); // this scans for first newline so if this only it skips the remaining LOOP\r\n        scanf(\"%*c\");\r\n\r\n\r\n        printf(\"Enter the mark of student %d:\",count+1);\r\n        scanf(\"%f\",&marks[i]);\r\n        count++;\r\n    }\r\n\r\n    displayStudentData(names,marks,count);\r\n\r\n    float average= calculateAverage(marks,count);\r\n\r\n    printf(\"Average Mark :%.2f\",average);\r\n\r\n\r\n\r\n}\n/* --- q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n\r\n    int validnumberbids = 0;\r\n    int numberofbids;\r\n    int maxbid = 0;\r\n\r\n    while (!validnumberbids)\r\n    {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &numberofbids);\r\n\r\n        if (numberofbids < 2)\r\n        {\r\n            printf(\"Number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n        else\r\n        {\r\n            validnumberbids=1;\r\n        }\r\n    }\r\n\r\n    int *array = malloc(numberofbids * sizeof(*array)); // using malloc to dynamically allocate memory for size (from user input)\r\n\r\n    for (int i = 0; i < numberofbids; ++i)\r\n    {\r\n        printf(\"Enter the bids (must be at least $100000): \\n\");\r\n        printf(\"Bid %d:\", i + 1);\r\n        scanf(\"%d\", &array[i]);\r\n        if (array[i] < 100000)\r\n        {\r\n            printf(\"Bid must be at least $100000. Please try again.\\n\");\r\n        }\r\n\r\n        for (int i = 0; i < numberofbids; ++i)\r\n        {\r\n            if (array[i] > maxbid)\r\n            {\r\n                maxbid = array[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: $%d\", maxbid);\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns, then prints a grid of asterisks as intended. The use of puts(\"\") for new lines is effective and clear. q2: The program correctly computes the sum, average, product, smallest, and largest of three integers based on user input. The use of type casting for the average calculation is appropriate and ensures precision. the logic for finding the smallest and largest numbers is unnecessarily complex. There are redundancies in the comparison code that could be streamlined. q3:The program correctly allows the user to choose a product type, input weight and price, calculate the total and discounted costs, and display the results. However, it lacks a loop to allow multiple entries until the user decides to exit.there is a lot of repeated code for each product type, which could be consolidated"
  },
  {
    "student_id": "20703971",
    "code": "",
    "feedback": "q1:The program successfully prints a grid of asterisks based on user-defined rows and columns. The codes have some unnecessary logic which can be improved. q2: The program correctly calculates the sum, average, product, smallest, and largest integers from three inputs.For improved clarity, consider printing the average with a format specifier that reflects its floating-point nature (e.g., %.2f for two decimal places).  q3: The program partially meets the requirements but lacks the use of a switch statement or similar logic to handle different product codes. This leads to redundant inputs that are not relevant for all product types."
  },
  {
    "student_id": "20713832",
    "code": "\n/* --- Q1 .C --- */\n#include <stdio.h>\n#include <stdlib.h> // stdlib is used as memory allocation and deallocation are part of it\n\nint main() {\n    int N; // // intiliazing the integer 'n' which is number of integers\n\n    \n    printf(\"Enter the size of the array (N >= 5): \"); //// asking the user to input the number of elements in the array\n    scanf(\"%d\", &N);// to read the number of elements\n\n    // Validate size\n    while (N < 5) { // to check the size of the array a while loop is used\n        printf(\"Invalid input: Size must be at least 5. Please try again.\\n\"); // in the case where the number of elements inputed is less than 5, this message is shown.\n        printf(\"Enter the size of the array (N >= 5): \"); // this is to ask the user again for new inputs\n        scanf(\"%d\", &N); // scanf function is used to read the number of elements and check if they are in the range\n    }\n\n    \n    int *array = (int *)malloc(N * sizeof(int)); // this function is used to dynamically allocate memory for the array\n\n    if (array == NULL) { // putting condition such that if the number of values in the array is null, the following message is shown.\n        printf(\" Memory allocation failed.\\n\"); \n        return 1;\n    }\n\n    printf(\"Enter the array elements:\\n\");// asking the user for input of the elements\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i); // used to display the element with the corresponding number\n        scanf(\"%d\", array + i); // Using the pointer arithmetic to store values\n    }\n\n    int index1, index2; // intializing the integers index1 and index2\n\n    \n    while (1) { // to validate the indices a while loop is used\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);// asking the user to enter the the indices within the range\n        scanf(\"%d %d\", &index1, &index2); // using scanf function to read the indices\n\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) { // putting a condition using if such that the value of the indices must be more than 0 and less than N\n            break; // if the conditions are met validate the indices\n        } else {\n            printf(\"Invalid input: Indices must be within the range of the array elements. Please try again.\\n\"); // if the mentioned conditions are not met , the following messages will be shown.\n        }\n    }\n\n    \n    int sum = *(array + index1) + *(array + index2); // implementing the sum using pointer based approach.\n\n    \n    printf(\"The sum of the values of indices %d and %d is: %d\\n\", index1, index2, sum); // the result is displayed.\n\n   \n    free(array);// this is used to deallocate the memory which was allocated earlier.\n\n    return 0;\n}\n\n/* --- Q2.C --- */\n#include <stdio.h>\n\n\n#define NAME_LENGTH 50 // to define the amount of characters allowed for the name\n#define STUDENT_COUNT 3 // to define the max number of students\n\ntypedef struct { // creating a new structure to store student data.\n    char name[NAME_LENGTH]; // using char for name\n    float mark; // using float for mark\n} Student; // giving the name student for the structure\n\nfloat calculateAverage(const float marks[], int count); // it takes the sum of all values stored in the array and divide it by the number of elements in the array\nvoid displayStudentData(const Student students[], int count);// to display the names and marks of the students stored in the array\n\nint main() {\n    Student students[STUDENT_COUNT]; //  to declare the students array\n    float marks[STUDENT_COUNT];// to declare the marks array\n\n    for (int i = 0; i < STUDENT_COUNT; i++) { // using for loop to ensure the number of students doesn't exceed the limit\n        printf(\"Enter the name of student %d: \", i + 1); // asking the user to input the name of the student one by one\n        scanf(\" %[^\\n]\", students[i].name); // scanf function is used to read the input\n        printf(\"Enter the mark of %s: \", students[i].name); // asking the user to input the marks of the student\n        scanf(\"%f\", &students[i].mark); // scanf function is used to read the input\n        marks[i] = students[i].mark; //  to copy mark for function\n    }\n\n   \n    float averageMark = calculateAverage(marks, STUDENT_COUNT); // this is used to calculate average mark\n\n    \n    displayStudentData(students, STUDENT_COUNT); // Pass 'students' array here\n    printf(\"The average mark is: %.2f\\n\", averageMark); // the average mark is displayed\n\n    return 0;\n}\n\n\nfloat calculateAverage(const float marks[], int count) { // this is the function used to calculate the average mark\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) { \n        sum += marks[i]; // used to calculate the average\n    }\n    return sum / count; // used for average.\n}\n\n\nvoid displayStudentData(const Student students[], int count) { // this is the function used to display the student names and marks\n    printf(\"\\nStudent Data:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"Name: %s, Marks: %.2f\\n\", students[i].name, students[i].mark); // Correctly accessing 'students[i].name' and 'students[i].mark'. this is used so that when the output is displayed the names and marks of eah student is shown side by side as inidcated in the sample output\n        \n    }\n} // i used const Student students[], int count instead of const char names[][NAME_LENGTH, as i am more comfortable with this and it works better. it also resembles the sample output.\n\n/* --- Q3.C --- */\n\n\n\n#include <stdio.h>\n\nint validateNumberOfBids(); // to intialize the function which checks whether the number of bids are more than 2\nvoid TheBids(int bids[], int n);// to intialize the function called bids which takes n inputes from the user and store it in array\nint findHighestBid(int bids[], int n);// initializing the function which finds out the highest bid\n\nint main() {\n    int n; // intiliazing the integer called n which is number of bids\n\n    \n    n = validateNumberOfBids();\n    if (n < 2) { // putting a condition such that if the value of n is less than 2 , the following message is shown\n        printf(\"Invalid input: At least two valid bids are required to determine the highest bid.\\n\"); // this message is displayed\n        return 0;\n    }\n\n    \n    int bids[n]; // initializing an array to store the bids\n    TheBids(bids, n); // inputting the bids with validation\n\n   \n    int highestBid = findHighestBid(bids, n); // intialiazing the function for highest bid and finding it out by checking the array\n    printf(\"The highest bid is $%d.\\n\", highestBid); // the highest bid is displayed\n\n    return 0;\n}\n\n\nint validateNumberOfBids() { // the function to validate the number of bids\n    int n;\n    do { // a do loop is used to ensure the validity\n        printf(\"Enter the number of bids (N ≥ 2): \"); // asking the user to input the number of bids\n        scanf(\"%d\", &n); // scanf function is used to read the input\n        if (n < 2) { // if the input is less than 2, the following message is displayed\n            printf(\"Invalid input: You must have at least 2 bids.\\n\");\n        }\n    } while (n < 2); // this is to ensure that the loop is repeated and the user has a chance to input the correct way\n    return n;\n}\n\n\nvoid TheBids(int bids[], int n) { // intialzing a function to get valid bids from the user\n    for (int i = 0; i < n; i++) { \n        do {\n            printf(\"Enter bid #%d (minimum $100,000): \", i + 1); // asking the user to enter a bid one by one\n            scanf(\"%d\", &bids[i]);// using scanf to read the input\n            if (bids[i] < 100000) { // if the bid is less tha 100000, the following message is shown.\n                printf(\"Invalid bid: Each bid must be at least $100,000.\\n\"); \n            }\n        } while (bids[i] < 100000);// this is to ensure that the loop is repeated and the user can input the bid in the correct way\n    }\n}\n\n\nint findHighestBid(int bids[], int n) { // intializing a function to find the highest id\n    int highest = bids[0]; // intializing the first element to be the highest\n    for (int i = 1; i < n; i++) {\n        if (bids[i] > highest) { // using the compare method with each element and eventually finding the highest.\n            highest = bids[i]; // after finding the highest , assigning it to highest\n        }\n    }\n    return highest; // used to return the highest value.\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program accurately calculates the sum, average, product, smallest, and largest of a user-defined number of integers. The logic is sound and follows a clear flow. q3:The program effectively calculates the total cost for various grocery items based on user input and applies a discount."
  },
  {
    "student_id": "20590645",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n// function to validate input as an integer\r\nint getValidInteger(const char *prompt) {\r\n    int value;\r\n    char term;\r\n    while (1) {\r\n        printf(\"%s\", prompt);\r\n        if (scanf(\"%d%c\", &value, &term) != 2 || term != '\\n') {\r\n            printf(\"Error: Please enter a valid integer.\\n\");\r\n            while (getchar() != '\\n'); \r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n// Function to validate and get the array size\r\nint getValidSize() {\r\n    int size;\r\n    do {\r\n        size = getValidInteger(\"Enter the size of the array (N >= 5): \");\r\n        if (size < 5) {\r\n            printf(\"Error: Size must be at least 5.\\n\");\r\n        }\r\n    } while (size < 5);\r\n    return size;\r\n}\r\n\r\n// function to input elements into the array \r\nvoid inputArray(int *arr, int size) {\r\n    for (int i = 0; i < size; i++) {\r\n        printf(\"Enter element %d: \", i + 1);\r\n        *(arr + i) = getValidInteger(\"\"); // assign the values\r\n    }\r\n}\r\n\r\n// function to validate and get the indices\r\nvoid getValidIndices(int *index1, int *index2, int size) {\r\n    do {\r\n        *index1 = getValidInteger(\"Enter the first index: \");\r\n        *index2 = getValidInteger(\"Enter the second index: \");\r\n        if (*index1 < 0 || *index1 >= size || *index2 < 0 || *index2 >= size) {\r\n            printf(\"Error: Indices must be within the range 0 to %d.\\n\", size - 1);\r\n        }\r\n    } while (*index1 < 0 || *index1 >= size || *index2 < 0 || *index2 >= size);\r\n}\r\n\r\n// function to sum the two elements\r\nint calculateSum(int *arr, int index1, int index2) {\r\n    return *(arr + index1) + *(arr + index2); \r\n}\r\n\r\nint main() {\r\n    // get a valid size for the array\r\n    int size = getValidSize();\r\n\r\n    // dynamically allocate mmemory for the array\r\n    int *arr = (int *)malloc(size * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // insert the elements using pointers\r\n    inputArray(arr, size);\r\n\r\n    // get valid indices\r\n    int index1, index2;\r\n    getValidIndices(&index1, &index2, size);\r\n\r\n    // calculate the sum of the chosen elements\r\n    int sum = calculateSum(arr, index1, index2);\r\n    printf(\"The sum of elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n\r\n    free(arr); // free the memory allocated\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n#define NUM_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\n\r\n\r\n// Function to calculate the average of the marks\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    printf(\"Name\\t\\tMarks\\n\");\r\n    printf(\"-----------------------\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%-15s %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH]; // Array to store student names\r\n    float marks[NUM_STUDENTS];             // Array to store student marks\r\n    int i;\r\n\r\n    // Input student names and marks\r\n    for (i = 0; i < NUM_STUDENTS; i++) {\r\n        // Input and validate student name\r\n        while (1) {\r\n            printf(\"Enter the name of student %d: \", i + 1);\r\n            scanf(\" %[^\\n]\", names[i]); // Read full name including spaces\r\n\r\n            // Validate name (not empty)\r\n            if (strlen(names[i]) > 0) {\r\n                break;\r\n            } else {\r\n                printf(\"Invalid input. Name cannot be empty. Please try again.\\n\");\r\n            }\r\n        }\r\n\r\n        // Input and validate student marks\r\n        while (1) {\r\n            printf(\"Enter the marks of %s (0 to 100): \", names[i]);\r\n            if (scanf(\"%f\", &marks[i]) == 1 && marks[i] >= 0 && marks[i] <= 100) {\r\n                break; // Valid marks entered\r\n            } else {\r\n                printf(\"Invalid input. Marks must be a number between 0 and 100. Please try again.\\n\");\r\n                while (getchar() != '\\n') // Clear invalid input\r\n                    ;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Calculate the average mark\r\n    float average = calculateAverage(marks, NUM_STUDENTS);\r\n\r\n    // Display the student data and average mark\r\n    displayStudentData(names, marks, NUM_STUDENTS);\r\n    printf(\"Average Marks: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n// function to validate the number of bids\r\nint getNumberOfBids() {\r\n    int n;\r\n    printf(\"Enter the number of bids (N): \");\r\n    while (scanf(\"%d\", &n) != 1 || n < 2) {\r\n        printf(\"Invalid input. N must be an integer and at least 2.\\n\");\r\n        printf(\"Enter the number of bids (N): \");\r\n        while (getchar() != '\\n'); // Clear invalid input\r\n    }\r\n    return n;\r\n}\r\n\r\n// function to validate and get the bid values\r\nvoid getBids(int bids[], int n) {\r\n    for (int i = 0; i < n; i++) {\r\n        printf(\"Enter bid %d (minimum $100,000): \", i + 1);\r\n        while (scanf(\"%d\", &bids[i]) != 1 || bids[i] < 100000) {\r\n            printf(\"Invalid input. Bid must be an integer and at least $100,000.\\n\");\r\n            printf(\"Enter bid %d (minimum $100,000): \", i + 1);\r\n            while (getchar() != '\\n'); // Clear invalid input\r\n        }\r\n    }\r\n}\r\n\r\n// function to find the highest bid\r\nint findHighestBid(int bids[], int n) {\r\n    int maxBid = bids[0];\r\n    for (int i = 1; i < n; i++) {\r\n        if (bids[i] > maxBid) {\r\n            maxBid = bids[i];\r\n        }\r\n    }\r\n    return maxBid;\r\n}\r\n\r\nint main() {\r\n    int n;\r\n\r\n    // get the number of bids with validation\r\n    n = getNumberOfBids();\r\n\r\n    // create array to store the bids and get the bid values\r\n    int bids[n];\r\n    getBids(bids, n);\r\n\r\n    // find the highest bid\r\n    int highestBid = findHighestBid(bids, n);\r\n\r\n    \r\n    printf(\"The highest bid is $%d.\\n\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The code effectively fulfills the assignment requirements and demonstrates a solid understanding of nested loops for printing asterisks. q2:The program correctly calculates the sum, product, average, smallest, middle, and largest values of the three integers. q3: did not use switch case instead of if…else. The code effectively calculates costs and applies discounts, but it could be streamlined to avoid repetition"
  },
  {
    "student_id": "20715960",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20619586",
    "code": "\n/* --- Question 1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(){\r\n    int n;\r\n    int* ptr;\r\n\r\n    while (1)    {\r\n        printf(\"Enter the size of the array (N >= 5):\");\r\n        scanf(\"%d\",&n);\r\n            if(n>=5){\r\n                break;\r\n            }\r\n        }\r\n    ptr = (int*)malloc(n * sizeof(int));\r\n\r\n    if (ptr == NULL) {\r\n        printf(\"Memory not allocated.\\n\");\r\n        exit(0);\r\n    }\r\n\r\n    int num;\r\n    int indice1, indice2;\r\n\r\n    puts(\"Enter the array elements:\");\r\n    for (int i = 0; i < n; ++i) {\r\n            printf(\"Element %d: \", i);\r\n            scanf(\"%d\",&num);\r\n            ptr[i] = num;\r\n    }\r\n\r\n    while (1) {\r\n        \r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < 6): \");\r\n        scanf(\"%d %d\",&indice1, &indice2);\r\n        if(indice1 < n && indice1 >= 0 && indice2 < n && indice2 >= 0 ){\r\n            break;\r\n        }else{\r\n            puts(\"Error: the indices of the elements must be within range of the array elements. Please try again.\");\r\n        }\r\n    }\r\n\r\n    int sum;\r\n    sum = ptr[indice1] + ptr[indice2];\r\n    printf(\"The sum o fthe values at indices %d and %d is: %d\", indice1, indice2, sum);\r\n}\n/* --- Question2.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#define  NAME_LENGTH 50 \r\n\r\nchar names[3][NAME_LENGTH];\r\nfloat marks[3];\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const\r\nfloat marks[]);\r\n\r\nint main() {\r\n    for (int i = 0; i < 3; ++i) {\r\n        printf(\"Enter the name of student %d: \", i+1);\r\n        scanf(\" %[^\\n]\", names[i]);;\r\n        printf(\"Enter the marks of student %d: \", i+1);\r\n        float mark;\r\n        scanf(\"%f\", &mark);\r\n        marks[i] =mark;\r\n    }\r\n    puts(\"\");\r\n    displayStudentData(names, marks);\r\n    calculateAverage(marks, 3);\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count){\r\n    float average;\r\n    for(int i = 0; i < count; i++){\r\n       average = average + marks[i];\r\n    }\r\n    average = average /count;\r\n    printf(\"Average Mark: %.2f\", average);\r\n    puts(\"\");\r\n\r\n}\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]){\r\n    puts(\"Student Names and Marks: \");\r\n    for(int i = 0; i < 3; i++){\r\n        printf(\"%s\", names[i]);\r\n        printf(\": %.2f\\n\", marks[i]);\r\n    }\r\n    puts(\"\");\r\n}\n/* --- Question3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(){\r\n    int n;\r\n    printf(\"Enter the number of bids: \");\r\n    while (1){\r\n        scanf(\"%d\",&n);\r\n        if(n>1){\r\n            break;\r\n        }\r\n        else{\r\n            printf(\"Number of bids must be at least 2. Please try again: \");\r\n        }\r\n    }\r\n\r\n    int bid[n];\r\n    for (int i = 0; i < n; ++i) {\r\n        printf(\"Bid %d: \", i+1);\r\n        while (1) {\r\n            int bidding;\r\n            scanf(\"%d\", &bidding);\r\n            if(bidding > 100000){   \r\n                bid[i]=bidding;          \r\n                break;\r\n            }else{\r\n                printf(\"Bid must be at least $100,000. Please try again:\");\r\n            }\r\n        }\r\n    }\r\n\r\n    int highest;\r\n    for (int i = 0; i < n; ++i) {\r\n        if (highest <= bid[i]){\r\n            highest = bid[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highes bid is $%d\", highest);\r\n    \r\n    \r\n   }",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. Q3: incorrect exit case"
  },
  {
    "student_id": "20611470",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\r\nint main()\r\n{\r\n    int N, index1, index2;\r\n    int *array;\r\n\r\n    printf(\"Enter the size of the array (N >= 5) : \");\r\n    scanf(\"%d\", &N);\r\n\r\n    while (N < 5 || N <= 0)     // validate N >= 5\r\n    {\r\n        printf(\"Please make sure N >= 5\");\r\n        printf(\"Enter the size of the array (N >= 5) : \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    array = (int *)malloc(N * sizeof(int));     // allocate memory for array\r\n    \r\n    printf(\"Enter the array elements : \\n\");\r\n    for (int i = 0; i < N; i++)\r\n    {\r\n        printf(\"Elements %d : \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    printf(\"Enter the indices of the two elements (index1 >= 0, index2 < %d) : \", N-1);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n\r\n    while (index1 < 0 || index2 > N)     // Validate index 1 and 2\r\n    {\r\n        printf(\"Indices must be within the range of array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d) : \", N-1);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n    } \r\n\r\n    int sum = *(array + index1) + *(array + index2); \r\n\r\n\r\n    printf(\"The sum of the elements at indices %d and %d is : %d\\n\", index1, index2, sum);   // Print the sum\r\n\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\nfloat calculateAverage(const float marks[], int count) \r\n{\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) \r\n    {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) \r\n{\r\n    printf(\"Student Names and Marks : \\n\");\r\n    for (int i = 0; i < count; i++) \r\n    {\r\n        printf(\"%s : %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() \r\n{\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n\r\n    for (int i = 0; i < STUDENT_COUNT; i++) \r\n    {\r\n        printf(\"\\nEnter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n    printf(\"\\n\");\r\n    displayStudentData(names, marks,STUDENT_COUNT);\r\n    printf(\"\\nAverage Mark : %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N, i;\r\n    int highestBid = 0;\r\n\r\n    // Prompt the user to enter the number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // Validate the number of bids\r\n    while (N < 2) {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    int bids[N];\r\n\r\n    // Prompt the user to enter the bids\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    for (i = 0; i < N; i++) {\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%d\", &bids[i]);\r\n\r\n        // Validate each bid\r\n        while (bids[i] < 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &bids[i]);\r\n        }\r\n\r\n        // Determine the highest bid\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Output the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and successfully prints a grid of asterisks based on the input values. However, there are a few minor syntax issues that prevent the code from compiling correctly. q2:The program correctly prompts the user for three integers, calculates their sum, average, product, smallest, and largest values. The logic used for calculations and comparisons is sound, and the expected results are accurately produced. q3:The program effectively implements a menu-driven system that allows users to input details for various product types, calculate total costs, and apply discounts."
  },
  {
    "student_id": "20607863",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int size = 0;\r\n    int *array;\r\n    int index1 = 0, index2 = 0;\r\n    int sum = 0;\r\n\r\n    // Prompt user for size of array\r\n    while (1) {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &size);\r\n\r\n        // Validate size >= 5\r\n        if (size >= 5) {\r\n            break;\r\n        } else {\r\n            puts(\"Size not in correct range. Try again.\");\r\n        }\r\n    }\r\n\r\n    // Allocate memory for the array\r\n    array = malloc(size * sizeof(*array));\r\n\r\n    // Prompt user for array elements\r\n    puts(\"Enter the elements of the array:\");\r\n    for (size_t i=0; i<size; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\",array+i);\r\n    }\r\n\r\n    // Prompt user for indices\r\n    while (1) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", size);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        // Input validation\r\n        if (0 <= index1 && index1 < size && 0 <= index2 && index2 < size) {\r\n            break;\r\n        } else {\r\n            puts(\"Values not in correct range. Try again.\");\r\n        }\r\n    }\r\n\r\n    // Calculate and output sum\r\n    sum = *(array+index1) + *(array+index2);\r\n    printf(\"The sum of the integers in index %d and %d: %d\", index1, index2, sum);\r\n\r\n    free(array);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n#define NAME_LENGTH 50\r\n#define NUM_STUDENTS 3\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_STUDENTS];\r\n\r\n    // Prompt user for names and marks\r\n    for (size_t i=0; i<NUM_STUDENTS; i++) {\r\n        // Input names\r\n        printf(\"Name of Student %d: \", i+1);\r\n        fgets(names[i], NAME_LENGTH, stdin);\r\n        names[i][strcspn(names[i], \"\\n\")] = 0; // Removes trailing newline of fgets return value\r\n\r\n        // Input marks\r\n        while (1) {\r\n            printf(\"Mark of Student %d: \", i+1);\r\n            scanf(\"%f\", &marks[i]);\r\n            getchar(); // scanf leaves the newline in the input buffer, getchar removes it so that the next fgets works\r\n\r\n            // Mark validation\r\n            if (0 <= marks[i] && marks[i] <= 100) {\r\n                break;\r\n            } else {\r\n                puts(\"Mark needs to be in range 0-100. Please try again.\");\r\n            }\r\n        }\r\n    }\r\n    puts(\"\");\r\n    displayStudentData(names, marks); // DisplayStudentData function call\r\n\r\n    return 0;\r\n}\r\n\r\n// Calculate average of marks in an array and returns float\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (size_t i=0; i<count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum/count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    puts(\"Student Names and Marks:\");\r\n\r\n    // Prints in format NAME: MARK\r\n    for (size_t i = 0; i<NUM_STUDENTS; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    puts(\"\");\r\n\r\n    // Calls calculateAverage and passes the result into the printf statement\r\n    printf(\"Average Mark: %.2f\", calculateAverage(marks, NUM_STUDENTS)); \r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\r\nint main() {\r\n    float *bids;\r\n    int size;\r\n    float max;\r\n\r\n    // Prompt user for number of bids\r\n    while (1) {\r\n        printf(\"Enter the number of bids (N >= 2): \");\r\n        scanf(\"%d\", &size);\r\n\r\n        // Input validation\r\n        if (size >= 2) {\r\n            break;\r\n        } else {\r\n            puts(\"There must be at least 2 bids. Please try again.\");\r\n        }\r\n    }\r\n\r\n    // Allocate memory for the array\r\n    bids = malloc(size * sizeof(*bids));\r\n\r\n    // Prompt user for bids\r\n    puts(\"Enter the bids (must be at least $100,000):\");\r\n    for (int i=0; i<size; i++) {\r\n        while (1) {\r\n            printf(\"Bid %d: \", i+1);\r\n            scanf(\"%f\",&bids[i]);\r\n\r\n            // Input validation\r\n            if (bids[i] >= 100000) {\r\n                break;\r\n            } else {\r\n                puts(\"Bids must be at least $100,000. Please try again.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Calculates the highest bid\r\n    max = bids[0];\r\n    for (size_t i = 0; i < size; i++) {\r\n        if (bids[i] > max) {\r\n            max = bids[i];\r\n        } \r\n    }\r\n\r\n    printf(\"The highest bid is %.2f\", max);\r\n\r\n    return 0;\r\n}\n/* --- LabAssessment2/Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int size = 0;\r\n    int *array;\r\n    int index1 = 0, index2 = 0;\r\n    int sum = 0;\r\n\r\n    // Prompt user for size of array\r\n    while (1) {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &size);\r\n\r\n        // Validate size >= 5\r\n        if (size >= 5) {\r\n            break;\r\n        } else {\r\n            puts(\"Size not in correct range. Try again.\");\r\n        }\r\n    }\r\n\r\n    // Allocate memory for the array\r\n    array = malloc(size * sizeof(*array));\r\n\r\n    // Prompt user for array elements\r\n    puts(\"Enter the elements of the array:\");\r\n    for (size_t i=0; i<size; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\",array+i);\r\n    }\r\n\r\n    // Prompt user for indices\r\n    while (1) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", size);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        // Input validation\r\n        if (0 <= index1 && index1 < size && 0 <= index2 && index2 < size) {\r\n            break;\r\n        } else {\r\n            puts(\"Values not in correct range. Try again.\");\r\n        }\r\n    }\r\n\r\n    // Calculate and output sum\r\n    sum = *(array+index1) + *(array+index2);\r\n    printf(\"The sum of the integers in index %d and %d: %d\", index1, index2, sum);\r\n\r\n    free(array);\r\n\r\n    return 0;\r\n}\n/* --- LabAssessment2/Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n#define NAME_LENGTH 50\r\n#define NUM_STUDENTS 3\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_STUDENTS];\r\n\r\n    // Prompt user for names and marks\r\n    for (size_t i=0; i<NUM_STUDENTS; i++) {\r\n        // Input names\r\n        printf(\"Name of Student %d: \", i+1);\r\n        fgets(names[i], NAME_LENGTH, stdin);\r\n        names[i][strcspn(names[i], \"\\n\")] = 0; // Removes trailing newline of fgets return value\r\n\r\n        // Input marks\r\n        while (1) {\r\n            printf(\"Mark of Student %d: \", i+1);\r\n            scanf(\"%f\", &marks[i]);\r\n            getchar(); // scanf leaves the newline in the input buffer, getchar removes it so that the next fgets works\r\n\r\n            // Mark validation\r\n            if (0 <= marks[i] && marks[i] <= 100) {\r\n                break;\r\n            } else {\r\n                puts(\"Mark needs to be in range 0-100. Please try again.\");\r\n            }\r\n        }\r\n    }\r\n    puts(\"\");\r\n    displayStudentData(names, marks); // DisplayStudentData function call\r\n\r\n    return 0;\r\n}\r\n\r\n// Calculate average of marks in an array and returns float\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (size_t i=0; i<count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum/count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    puts(\"Student Names and Marks:\");\r\n\r\n    // Prints in format NAME: MARK\r\n    for (size_t i = 0; i<NUM_STUDENTS; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    puts(\"\");\r\n\r\n    // Calls calculateAverage and passes the result into the printf statement\r\n    printf(\"Average Mark: %.2f\", calculateAverage(marks, NUM_STUDENTS)); \r\n}\n/* --- LabAssessment2/Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\r\nint main() {\r\n    float *bids;\r\n    int size;\r\n    float max;\r\n\r\n    // Prompt user for number of bids\r\n    while (1) {\r\n        printf(\"Enter the number of bids (N >= 2): \");\r\n        scanf(\"%d\", &size);\r\n\r\n        // Input validation\r\n        if (size >= 2) {\r\n            break;\r\n        } else {\r\n            puts(\"There must be at least 2 bids. Please try again.\");\r\n        }\r\n    }\r\n\r\n    // Allocate memory for the array\r\n    bids = malloc(size * sizeof(*bids));\r\n\r\n    // Prompt user for bids\r\n    puts(\"Enter the bids (must be at least $100,000):\");\r\n    for (int i=0; i<size; i++) {\r\n        while (1) {\r\n            printf(\"Bid %d: \", i+1);\r\n            scanf(\"%f\",&bids[i]);\r\n\r\n            // Input validation\r\n            if (bids[i] >= 100000) {\r\n                break;\r\n            } else {\r\n                puts(\"Bids must be at least $100,000. Please try again.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Calculates the highest bid\r\n    max = bids[0];\r\n    for (size_t i = 0; i < size; i++) {\r\n        if (bids[i] > max) {\r\n            max = bids[i];\r\n        } \r\n    }\r\n\r\n    printf(\"The highest bid is %.2f\", max);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program effectively prompts the user for the number of rows and columns, and it correctly uses nested loops to print a grid of asterisks based on the user input. The logic is sound, and the output matches expectations. q2:The program correctly prompts the user for three integers and calculates the sum, average, product, smallest, and largest values. The logic used to determine the minimum and maximum values is accurate, and the calculations yield the expected results. q3:The program correctly implements a menu-based system to handle different product types and calculates total costs based on user input. The use of a while loop allows continuous input until the user chooses to exit, which is a good design choice."
  },
  {
    "student_id": "20722972",
    "code": "\n/* --- Q1.c --- */\n// QUESTION 1\r\n\r\n#include<stdio.h>\r\n#include<stdlib.h>\r\n\r\n//function prototype\r\nint valid_index(int index, int arr_size);\r\nvoid print_array(int *arrPtr, int arr_size);\r\n\r\n// function main begins program execution\r\nint main(void){\r\n    //initialisation\r\n    int arr_size=0;\r\n    int index1=-1;\r\n    int index2=-1;\r\n    int sum=0;\r\n\r\n    // 1. prompt user to enter the size N of the array\r\n    printf(\"%s\", \"Enter the size of the array (at least 5): \");\r\n    scanf(\"%d\", &arr_size);\r\n\r\n    // validate if N>=5\r\n    while(arr_size<5){\r\n        puts(\"The size of the array must be greater or equal to 5.\");\r\n        printf(\"%s\", \"Enter the size of the array (at least 5): \");\r\n        scanf(\"%d\", &arr_size);\r\n    }\r\n\r\n    // dynamically allocate memory for the array using pointers\r\n    int *arrPtr=malloc(arr_size*sizeof(int));\r\n    int *startPtr=arrPtr;\r\n\r\n    // prompt the user to enter each element of the array one by one\r\n    for(int i=0; i<arr_size; i++){\r\n        printf(\"\\nPlease enter the entry of the integer array with index %d: \", i);\r\n        scanf(\"%d\", arrPtr);\r\n        arrPtr++;\r\n    }\r\n    arrPtr=startPtr;\r\n    //testing \r\n    //print_array(startPtr, arr_size); \r\n\r\n    /*\r\n     prompt the user to enter the two indices of the array elements of \r\n     their choice.\r\n    */\r\n   puts(\" ======== SUMMING TWO ARRAY ELEMENTS ========\");\r\n   // enter first index\r\n   while(valid_index(index1, arr_size)<0){\r\n    printf(\"\\nEnter index of FIRST element (any integer between 0 and %d): \", arr_size-1);\r\n    scanf(\"%d\", &index1);\r\n   }\r\n\r\n   // enter second index\r\n   while(valid_index(index2, arr_size)<0){\r\n    printf(\"\\nEnter index of SECOND element (any integer between 0 and %d): \", arr_size-1);\r\n    scanf(\"%d\", &index2);\r\n   }\r\n\r\n   // find sum of the values of the two array elements\r\n   sum=*(arrPtr+index1)+*(arrPtr+index2);\r\n\r\n   // display output for the sum\r\n   printf(\"The sum of the values at indices %d and %d is: %d\", index1, index2, sum);\r\n\r\n}\r\n\r\n// ================= FUNCTIONS ===================\r\n// tests if index entered by user is valid (within range of 0 to arr_size-1)\r\nint valid_index(int index, int arr_size){\r\n    if(index>=0 && index<arr_size){\r\n        return 1;\r\n    }else{\r\n        return -1;\r\n    }\r\n}\r\n\r\n// prints the array (for testing purposes)\r\nvoid print_array(int *arrPtr, int arr_size){\r\n    puts(\"\");\r\n    for(int i=0; i<arr_size; i++){\r\n        printf(\"%d\\t\", *arrPtr);\r\n        arrPtr++;\r\n        if((i+1)%10==0){\r\n            puts(\"\");\r\n        }\r\n    }\r\n}\n/* --- Q2.c --- */\n// QUESTION 2\r\n\r\n#include<stdio.h>\r\n#define ARR_SIZE 3\r\n#define MAX_NAME 50\r\n\r\n// function prototypes\r\nfloat calculateAverage(const float mark_arr[], size_t arr_size);\r\nvoid displayStudentData(const char name_arr[][MAX_NAME], const float mark_arr[], size_t arr_size);\r\n\r\n// function main begins program execution\r\nint main(void){\r\n    // initialise array and other variables\r\n    char name_arr[ARR_SIZE][MAX_NAME];\r\n    float mark_arr[ARR_SIZE];\r\n    float input_mark=0.0;\r\n    float avg=0.0;\r\n\r\n    // prompt the user to enter the values of the three student names and marks one by one\r\n    for(int i=0; i<ARR_SIZE; i++){\r\n        printf(\"Enter the name of student %d: \", i+1);\r\n        scanf(\" %[^\\n]\", name_arr[i]); // ignore newline command\r\n        printf(\"Enter the mark of student %d: \", i+1);\r\n        scanf(\"%f\", &input_mark);\r\n        mark_arr[i]=input_mark;\r\n    } \r\n\r\n    // display output\r\n    displayStudentData(name_arr, mark_arr, ARR_SIZE);\r\n}\r\n\r\n// ============== OTHER FUNCTIONS ==================\r\n// calculates average of all elements of given array\r\nfloat calculateAverage(const float mark_arr[ARR_SIZE], size_t arr_size){\r\n    float sum=0.0;\r\n    for(int i=0; i<arr_size; i++){\r\n        sum+=mark_arr[i];\r\n    }\r\n    return sum/arr_size; // return average (no casting required as sum is a float)\r\n}\r\n\r\n// displays names and marks of each student, and average of all marks at the end in formatted table\r\nvoid displayStudentData(const char name_arr[ARR_SIZE][MAX_NAME],const float mark_arr[ARR_SIZE], size_t arr_size){\r\n    puts(\"========== RESULTS ==========\");\r\n    printf(\"%-21s|%7s\",\"Name\", \"Marks\");\r\n    printf(\"%s\",\"\\n-----------------------------\");\r\n    // loop to display each row entry\r\n    for(int i=0; i<arr_size; i++){\r\n        printf(\"\\n%-21s|%7.2f\", name_arr[i], mark_arr[i]);\r\n    }\r\n    printf(\"%s\",\"\\n-----------------------------\");\r\n    // display average row\r\n    printf(\"\\n%-21s|%7.2f\", \"Average mark\", calculateAverage(mark_arr, arr_size));\r\n}\n/* --- Q3.c --- */\n// QUESTION 3\r\n\r\n#include<stdio.h>\r\n#include<string.h> // to use function strlen\r\n\r\n//function prototypes\r\nint valid_bid(int bid);\r\nvoid display_error(char error_msg[]);\r\nint highest_bidder(int bid_arr[], size_t num_bit);\r\n\r\n// function main begins program execution\r\nint main(void){\r\n    // initialisation of variables\r\n    int num_bids=0;\r\n    int bid=0;\r\n\r\n    // prompt user to enter number of bids\r\n    printf(\"%30s\", \"Enter the number of bids: \");\r\n    scanf(\"%d\", &num_bids);\r\n    while(num_bids<2){\r\n        display_error(\" Error: Number of bids must be at least 2. Please try again.\");\r\n        printf(\"%30s\", \"Enter the number of bids: \");\r\n        scanf(\"%d\", &num_bids);\r\n    }\r\n\r\n    // initialise bid array\r\n    int valid_bid_arr[num_bids];\r\n\r\n    // prompt user to enter their bids one by one\r\n    // perform validation of user inputs (at least 100,000);\r\n    puts(\"==========================================\");\r\n    puts(\"Enter the bids (must be at least $100,000)\");\r\n    puts(\"\");\r\n    for(int i=0; i<num_bids; i++){ // loop to enter bid\r\n        printf(\"Bid %d: $\", i+1);\r\n        scanf(\"%d\", &bid);\r\n\r\n        while(valid_bid(bid)<0){ // validation\r\n            display_error(\" Error: Bid must be at least $100,000. Please try again\");\r\n            printf(\"\\tBid %d: $\", i+1);\r\n            scanf(\"%d\", &bid);\r\n        }\r\n\r\n        // store valid bid in array\r\n        valid_bid_arr[i]=bid;\r\n    }\r\n    int result=highest_bidder(valid_bid_arr, num_bids);\r\n\r\n    // display result\r\n    puts(\"==========================================\");\r\n    printf(\"The highest bid is $%d by bidder #%d.\", valid_bid_arr[result], result+1);\r\n}\r\n\r\n// ========= OTHER FUNCTIONS ============\r\n\r\n// checks if bid is valid\r\nint valid_bid(int bid){\r\n    if(bid>=100000){\r\n        return 1;\r\n    }else{\r\n        return -1;\r\n    }\r\n}\r\n\r\n// displays formatted error message\r\nvoid display_error(char error_msg[]){\r\n    int length=strlen(error_msg);\r\n    for(int i=0;i<length+2;i++){\r\n            printf(\"-\");\r\n        }\r\n        puts(\"\");\r\n        puts(error_msg);\r\n        for(int i=0;i<length+2;i++){\r\n            printf(\"-\");\r\n        }\r\n        puts(\"\");\r\n}\r\n\r\n// finds and returns the highest bidder\r\nint highest_bidder(int bid_arr[], size_t num_bid){\r\n    // initialise local variables\r\n    int max=0;\r\n    int bidder_index=0;\r\n\r\n    for(int i=0; i<num_bid; i++){\r\n        if(bid_arr[i]>max){ // loop through array and \r\n            max=bid_arr[i]; // update value of max if there is a larger bid\r\n            bidder_index=i;\r\n        }\r\n    }\r\n    return bidder_index; \r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20591632",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint sum_numbers(int *arr1, int *arr2) {\r\n    return *arr1 + *arr2; // Dereference pointers to get the values\r\n}\r\n\r\nint main() {\r\n    int size = 0;\r\n    int idc1, idc2;\r\n\r\n    printf(\"Enter the size of the array (N>=5): \");\r\n    scanf(\"%d\", &size);\r\n\r\n    // Check if the size is less than 5\r\n    if (size < 5) {\r\n        printf(\"Please enter an array size of 5 or more.\\n\");\r\n        return 1; // Exit if size is invalid\r\n    }\r\n\r\n    int arr[size];\r\n\r\n    for (int i = 0; i < size; i++) {\r\n        printf(\"Enter element %d: \", i + 1);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    printf(\"Enter the indices of two elements (0 <= index1, index2 < %d): \", size);\r\n    scanf(\"%d%d\", &idc1, &idc2);\r\n\r\n    // Check if indices are valid\r\n    if (idc1 > 0 && idc1 <= size && idc2 > 0 && idc2 <= size) {\r\n        // Call sum_numbers with the addresses of the elements\r\n        printf(\"The sum of the values at indices %d and %d is: %d\\n\", idc1, idc2, sum_numbers(&arr[idc1-1], &arr[idc2-1]));\r\n    } else {\r\n        printf(\"Invalid indices entered.\\n\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h> \r\n#define SIZE 3\r\n#define NAME_LENGTH 50\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\nfloat calculateAverage(const float marks[], int count);\r\n\r\nint main(void) {\r\n    char student[SIZE][NAME_LENGTH]; \r\n    float marks[SIZE]; \r\n\r\n    for (int i = 0; i < SIZE; i++) {\r\n        printf(\"Enter the full name of student %d: \", i + 1);\r\n        fgets(student[i], sizeof(student[i]), stdin); // Read full name\r\n\r\n        // Remove newline character to avoid buffer overflow \r\n        student[i][strcspn(student[i], \"\\n\")] = '\\0'; \r\n\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n        while (getchar() != '\\n'); // Avoid newline buffer overflow\r\n    }\r\n\r\n    displayStudentData(student, marks); \r\n    float average = calculateAverage(marks, SIZE); // Calculate average\r\n    printf(\"\\nAverage Marks: %.2f\\n\", average); // Display average\r\n\r\n    return 0;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < SIZE; i++) {\r\n        printf(\"%s: %.2f \\n\", names[i], marks[i]); \r\n    }\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum_marks = 0.0; // Initialize sum\r\n    for (int i = 0; i < count; i++) {\r\n        sum_marks += marks[i]; // Calculate sum of marks\r\n    }\r\n    float average = sum_marks / count; // Calculate average\r\n    return average; // Return the average\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MIN_BID 100000 // Minimum bid value\r\n\r\nint main(void) {\r\n    int num_bid;\r\n\r\n    // Input number of bids with validation\r\n    do {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &num_bid);\r\n        if (num_bid < 2) {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again. \\n\");\r\n        }\r\n    } while (num_bid < 2);\r\n\r\n    int bids[num_bid]; // Array to store the bids\r\n\r\n    // Input bids  to the array with validation\r\n    printf(\"Enter the bids (must be at least $100000): \\n\");\r\n    for (int i = 0; i < num_bid; i++) {\r\n        int bid;\r\n        do {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%d\", &bid);\r\n            if (bid < MIN_BID) {\r\n                printf(\"Error: Bid must be at least $100,000. Please try again: \\n\");\r\n            }\r\n        } while (bid < MIN_BID);\r\n        \r\n        bids[i] = bid; // Store valid bid\r\n    }\r\n\r\n    // Determine the highest bid\r\n    int highestBid = bids[0];\r\n    for (int i = 1; i < num_bid; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Output the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n\r\n\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and prints a grid of asterisks according to the specified dimensions. The logic is sound, and the output is as expected. q2: The program accurately calculates the sum, average, product, smallest, and largest of three integers input by the user. The use of separate functions to find the largest and smallest values is a good design choice that enhances modularity and clarity. The average is currently calculated using the individual numbers again after the sum. Instead, you could directly use the sum q3:The program correctly prompts the user for product details based on the selected product code and calculates the total and discounted costs appropriately. It handles various product types and calculates costs based on weight or quantity, as intended."
  },
  {
    "student_id": "20713727",
    "code": "\n/* --- 1/main.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N;\n    int *arr;\n    int index1;\n    int index2;\n    int sum;\n\n    // Prompt the user for the size of the array and validate\n    printf(\"Enter the size of the array (N >= 5): \");\n    scanf(\"%d\", &N);\n    while (N < 5) {\n        printf(\"Size must be at least 5. Please re-enter: \");\n        scanf(\"%d\", &N);\n    }\n\n    // Dynamically allocate memory for the array\n    arr = (int *)malloc(N * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory allocation failed.\\n\");\n        return 1; \n    }\n\n    // Prompt the user to enter each element of the array\n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", arr + i); // Use pointer notation\n    }\n\n    // Prompt the user to enter two valid indices\n    while (1) {\n        printf(\"Enter the first index (0 to %d): \", N - 1);\n        scanf(\"%d\", &index1);\n        printf(\"Enter the second index (0 to %d): \", N - 1);\n        scanf(\"%d\", &index2);\n\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\n            break; // Indices are valid\n        } else {\n            printf(\"error: Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    }\n\n    sum = *(arr + index1) + *(arr + index2);\n    printf(\"The sum of elements at index %d and %d is: %d\\n\", index1, index2, sum);\n    \n    return 0;\n}\n\n/* --- 2/main.c --- */\n#include <stdio.h>\n#define STUDENT_COUNT 3\n#define NAME_LENGTH 50\n\n// Function prototypes\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\n\nint main() {\n    char names[STUDENT_COUNT][NAME_LENGTH];\n    float marks[STUDENT_COUNT];\n    float average;\n\n    // Prompt the user to enter student names and marks\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);\n        printf(\"Enter the mark of student %d：\", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    average = calculateAverage(marks, STUDENT_COUNT);\n\n    // Display the student data and average mark\n    displayStudentData(names, marks, STUDENT_COUNT);\n    printf(\"Average Mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n// Function to calculate the average mark\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n// Function to display student names, marks, and the average mark\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\n    printf(\"\\nStudent Name and Marks:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"Name: %s, Marks: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\n/* --- 3/main.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N; // Number of bids\r\n    float highestBid = 0; \r\n\r\n    // Prompt the user to enter the number of bids and validate\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    if (N < 2) {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    float bids[N]; // Array to store the bids\r\n\r\n    // Input bid values with validation\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        while (1) {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%f\", &bids[i]);\r\n\r\n            if (bids[i] >= 100000.0) {\r\n                break; \r\n            } else {\r\n                printf(\"Error: Bid must be at least $100000. Plese try again: \");\r\n                scanf(\"%f\", &bids[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine the highest bid\r\n    for (int i = 0; i < N; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:Syntax error.The program aims to print a grid of asterisks based on user-defined rows and columns. However, there are issues in how the asterisks are printed, which prevents it from producing the correct output format. q2:The program correctly calculates the sum, average, product, and identifies the largest and smallest of three integers entered by the user. The logic is sound and produces the expected output. q3:Incomplete empty code"
  },
  {
    "student_id": "20723718",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n\nint main() { // begin function main \n    int N;\n    printf(\"Enter the size of the array (N >= 5): \");\n    scanf(\"%d\", &N);\n    if (N < 5) {\n        printf(\"Invalid array size.\");\n        return 0;\n    }\n    else {\n        puts(\"Enter the array elements:\");\n    }\n\n    int arr[N];\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", &arr[i]);\n    }\n    \n    int index1, index2;\n    \n    while(1) {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < 6): \");\n        scanf(\"%d %d\", &index1, &index2);\n\n        int *Ptr1 = &arr[index1];\n        int *Ptr2 = &arr[index2];\n        \n        if (index1 < 0 || index2 >= (N + 1)) {\n            puts(\"Error: Indices must be within the range of array elements.\");\n        } else {\n            int sum = *Ptr1 + *Ptr2;\n            printf(\"The sum of values at indices %d and %d is %d\", index1, index2, sum);\n            return 0;\n        }\n    }\n\n\n    return 0;\n} // end function main\n/* --- Q2.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define NAME_LENGTH 50\n\n// function prototype\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\n\nint main() { // begin function main\n    char name[3][NAME_LENGTH];\n    float marks[3] = {0};\n\n    for (int i = 0; i < 3; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        if (i != 0) {\n            while(getchar() != '\\n');   \n            }\n        scanf(\" %[^\\n]\", name[i]);\n        printf(\"Enter the marks of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n    \n    displayStudentData(name, marks);\n    printf(\"\\nAverage mark: %.2f\", calculateAverage(marks, 3));\n} // end function main\n\n\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    puts(\"\\nStudent names and marks:\");\n    int count = 3;\n    for (int i = 0; i < count; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0;\n    float average = 0;\n\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    average = sum / count;\n    return average;\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main(void) {\n    int N;\n    double bids[N];\n\n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &N);\n\n    if (N >= 2) {\n        puts(\"Enter the bids (must be at least $100,000):\");\n        for (int i = 0; i < N; i++) {\n            printf(\"Bid %d: \", i + 1);\n            scanf(\"%lf\", &bids[i]);\n            if (bids[i] < 100000) {\n                printf(\"Error: Bid must be at least $100,000. Please try again.\\n\");\n                i--;\n            }\n        }\n    } else {\n        printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\n    }\n    \n    double max = 0;\n\n    for (int i = 0; i < N; i++) {\n        if (max < (bids[i])) {\n            max = bids[i];\n        }\n    }\n    \n    printf(\"The highest bid is $%lf\", max);\n    return 0;\n        \n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and successfully prints a grid of asterisks based on the input values. However, there are a few minor syntax issues that prevent the code from compiling correctly. q2:The program correctly prompts the user for three integers and calculates their sum, average, and product. It also aims to determine the smallest and largest of the three integers. However, the logic for determining the smallest and largest numbers is overly complex and can lead to confusion. q3:The program effectively implements a menu-driven system for calculating costs of various grocery items based on user inputs. It handles different product types, applies discounts, and calculates total costs correctly."
  },
  {
    "student_id": "20712881",
    "code": "\n/* --- Q1.C --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N, *array, index1, index2;\n\n    //Prompt the user for the size of the array (N) and validate\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"Error: Size of the array must be at least 5.\\n\");\n        }\n    } while (N < 5);\n\n    //Dynamically allocate memory for the array\n    array = (int *)malloc(N * sizeof(int));\n    if (array == NULL) {\n        printf(\"Error: Memory allocation failed.\\n\");\n        return 1;\n    }\n\n    //Prompt the user to enter array elements\n    printf(\"Enter the array elements:\\n\");\n\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", &array[i]);\n    }\n\n    //Prompt the user for indices and validate\n    do {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\n\n    //Calculate the sum using pointers\n    int sum = *(array + index1) + *(array + index2);\n\n    //Print the result\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    //Free allocated memory\n    free(array);\n\n    return 0;\n}\n/* --- Q2.C --- */\n#include <stdio.h>\n#include <string.h>\n\n#define NAME_LENGTH 50\n#define STUDENT_COUNT 3\n\n//Structure to store student data\ntypedef struct {\n    char name[NAME_LENGTH];\n    float mark;\n} Student;\n\n//Function prototypes\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\n\nint main() {\n    Student students[STUDENT_COUNT];\n    float marks[STUDENT_COUNT];\n    char names[STUDENT_COUNT][NAME_LENGTH];\n\n    //Input student names and marks\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", students[i].name);  // Read full name with spaces\n        strcpy(names[i], students[i].name); // Copy name for function\n        printf(\"Enter the mark of %s: \", students[i].name);\n        scanf(\"%f\", &students[i].mark);\n        marks[i] = students[i].mark; // Copy mark for function\n    }\n\n    //Calculate average mark\n    float averageMark = calculateAverage(marks, STUDENT_COUNT);\n\n    //Display data and average\n    displayStudentData(names, marks, STUDENT_COUNT);\n    printf(\"The average mark is: %.2f\\n\", averageMark);\n\n    return 0;\n}\n\n// Function to calculate the average of marks\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n// Function to display student names and marks\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\n    printf(\"\\nStudent Data:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"Name: %s, Mark: %.2f\\n\", names[i], marks[i]);\n    }\n}\n/* --- Q3.C --- */\n#include <stdio.h>\n\n//Function prototypes\nint validateNumberOfBids(); // Function to validate and return the number of bids\nvoid getBids(int bids[], int n); // Function to collect valid bids from the user\n// Function to find and return the highest bid from the array\nint findHighestBid(int bids[], int n);\n\nint main() {\n    int n; // Variable to store the number of bids\n\n    // Validate and get number of bids\n    n = validateNumberOfBids();\n    // If the number of bids is less than 2, output an error message \n    if (n < 2) {\n        printf(\"Error: At least two valid bids are required to determine the highest bid.\\n\");\n        return 0; \n    }\n\n    int bids[n]; // Declare an array to hold the bids\n    getBids(bids, n); // Function call to populate the bids array\n\n    // Find the highest bid\n    int highestBid = findHighestBid(bids, n); // Function call to find the highest bid\n\n    printf(\"The highest bid is $%d.\\n\", highestBid); // Output the highest bid\n\n    return 0; \n}\n\n// Function to validate and get the number of bids\nint validateNumberOfBids() {\n    int n; // Variable to store the number of bids\n    do {\n        // Prompt the user to enter the number of bids\n        printf(\"Enter the number of bids (N ≥ 2): \");\n        scanf(\"%d\", &n); // Read user input\n        // Check if the input is valid (N ≥ 2)\n        if (n < 2) {\n            printf(\"Invalid input. You must have at least 2 bids.\\n\");\n        }\n    } while (n < 2); // Repeat until a valid number is entered\n    return n; // Return the valid number of bids\n}\n\n// Function to collect valid bids from the user\nvoid getBids(int bids[], int n) {\n    for (int i = 0; i < n; i++) { // Loop through each bid\n        do {\n            // Prompt the user to enter the bid amount\n            printf(\"Enter bid #%d (minimum $100,000): \", i + 1);\n            scanf(\"%d\", &bids[i]); // Read user input\n            // Validate that the bid is at least $100,000\n            if (bids[i] < 100000) {\n                printf(\"Invalid bid. Each bid must be at least $100,000.\\n\");\n            }\n        } while (bids[i] < 100000); // Repeat until a valid bid is entered\n    }\n}\n\n// Function to find and return the highest bid in the array\nint findHighestBid(int bids[], int n) {\n    int highest = bids[0]; // Initialize the highest bid as the first bid in the array\n    for (int i = 1; i < n; i++) { // Start loop from the second bid\n        // If the current bid is greater than the highest, update the highest\n        if (bids[i] > highest) {\n            highest = bids[i];\n        }\n    }\n    return highest; // Return the highest bid\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20606861",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h> // For malloc and free\r\n\r\nint main() {\r\n    int N;\r\n    int *array;\r\n    int *ptr;\r\n    int index1, index2;\r\n\r\n    // Ask for the array size (must be at least 5)\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Error: The size of the array must be at least 5. Please try again.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // Allocate memory for the array\r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Error: Memory allocation failed.\\n\");\r\n        return 1; // Exit if memory allocation fails\r\n    }\r\n\r\n    // Input elements into the array\r\n    printf(\"Enter the array elements:\\n\");\r\n    ptr = array; // Point to the start of the array\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", ptr); // Store input directly using pointer\r\n        ptr++; // Move pointer to the next element\r\n    }\r\n\r\n    // Input the indices and validate them\r\n    do {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if (index1 < 0 || index2 < 0 || index1 >= N || index2 >= N) {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    } while (index1 < 0 || index2 < 0 || index1 >= N || index2 >= N);\r\n\r\n    // Calculate the sum using pointers\r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    // Output the result\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free the allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define numst 3  // number of student\r\n#define maxnamelenght 50  // Maximum length for student names\r\n\r\n\r\n// Function to calculate the average of the marks\r\nfloat getAverage(float marks[], int total) {\r\n    float sum = 0;\r\n    for (int i = 0; i < total; i++) {\r\n        sum += marks[i]; // Add each mark to the sum\r\n    }\r\n    return sum / total; // Return the average\r\n}\r\n\r\n// Function to display student names and their marks\r\nvoid showStudentData(char names[][maxnamelenght], float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < numst; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]); // Print name and mark\r\n    }\r\n}\r\n\r\nint main() {\r\n    char studentNames[numst][maxnamelenght];// Array to store names\r\n    float studentMarks[numst];// Array to store marks\r\n\r\n    // Collect names and marks from the user\r\n    for (int i = 0; i < numst; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", studentNames[i]); // Read the full name with spaces\r\n        printf(\"Enter marks for student %d: \", i + 1);\r\n        scanf(\"%f\", &studentMarks[i]); // Read the marks\r\n    }\r\n\r\n    // Calculate the average of the marks\r\n    float average = getAverage(studentMarks, numst);\r\n\r\n    // Display the names, marks, and average\r\n    showStudentData(studentNames, studentMarks);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average); // Print the average\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N, i, b, hb, vb = 0;\r\n\r\n    // Get the number of bids (N)\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // Ensure at least 2 bids\r\n    while (N < 2) {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    // Initialize highestbid to 0 (lowest possible value)\r\n    hb = 0;\r\n\r\n    //  Get the bids and validate each one\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    for (i = 0; i < N; i++) {\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%d\", &b);\r\n\r\n        // If bid is less than 100000, prompt again\r\n        while (b < 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &b);\r\n        }\r\n\r\n        // Update highest bid if current bid is higher\r\n        if (b > hb) {\r\n            hb = b;\r\n        }\r\n\r\n        vb++;  // Count valid bids\r\n    }\r\n\r\n    // If there are fewer than two valid bids, display an error\r\n    if (vb < 2) {\r\n        printf(\"Error: A highest bid cannot be determined.\\n\");\r\n    } else {\r\n        // Output the highest bid\r\n        printf(\"The highest bid is: $%d\\n\", hb);\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n",
    "feedback": "q1: syntax errors. The variables i and j used in the loops are not declared. You should declare them before using them.  There are unnecessary semicolons at the end of the for loop declarations. This effectively ends the loop early and results in incorrect behavior. The newline character is incorrectly written as /n. It should be \\n. The loop should use < instead of <= to prevent accessing one extra row or column beyond the user's input q2:  there are significant logical and syntax flaws that lead to incorrect behavior. q3: syntax and logical errors. The variable totalcost is used without being declared.The continue statement in the default case is inappropriate because it’s not inside a loop. Instead, you should simply return or break to end the program"
  },
  {
    "student_id": "20613314",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(){\r\n    int arr_size = 0;       // size of arraw\r\n    int *arr;               // pointer to the array\r\n    int step = sizeof(int); // size of 1 element\r\n    int index1, index2;     // indexes in the array to find the sum of its elements\r\n\r\n    while (1){\r\n        // enter the array size\r\n        printf(\"Enter the size of array (N >= 5): \");\r\n        scanf(\"%d\", &arr_size);\r\n\r\n        // if the input is wrong\r\n        if (arr_size < 5) printf(\"Error: The size of array must be within the range (N >= 5)\\n\");\r\n        else break; // if the input is correct , exit the infinite loop\r\n    }\r\n\r\n    arr = calloc(arr_size, step); // allocating memory forthe array\r\n\r\n    printf(\"Enter the array Elements:\\n\");\r\n\r\n    // Entering array elements\r\n    for (int i = 0; i < arr_size; i++){\r\n        printf(\"Element No.%d: \", i);\r\n        scanf(\"%d\", arr + i * step);\r\n    }\r\n\r\n\r\n    while (1) {\r\n        //enter the indeces\r\n        printf(\"Enter the indices of 2 elements (0 < index1, index2 < %d): \", arr_size);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        // check that indeces are within the array bounds\r\n        if ((index1 <= 0 || index1 >= arr_size) || (index2 <= 0 || index2 >= arr_size)) \r\n            printf(\"Error: The indeces must be within the range of array elements. Please, try again.\\n\");\r\n        else break; // if the input is correct ,exit the infinite loop\r\n    }\r\n\r\n    // calculate the sum of 2 elements pointed by indeces\r\n    int sum = *(arr + index1 * step) + *(arr + index2 * step);\r\n\r\n    // output the sum\r\n    printf(\"The sum of the values at indices at %d and %d is: %d\", index1, index2, sum);\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <string.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nconst int NAME_LENGTH = 50;\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]); // NAME_LENGTH 50 \r\n\r\n\r\nint main(){\r\n    float marks[3];\r\n    char names[3][NAME_LENGTH];\r\n    float average;\r\n\r\n\r\n    for (int i = 0; i < 3; i++){\r\n        // read student name\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n\r\n        //read student mark\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // display students and marks\r\n    displayStudentData(names, marks);\r\n\r\n\r\n    average = calculateAverage(marks, 3);\r\n    //print average mark\r\n    printf(\"Average Mark: %0.2f\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// calculate average\r\nfloat calculateAverage(const float marks[], int count){\r\n    int sum = 0;\r\n    for (int i = 0; i < count; i++){\r\n        sum += marks[i];\r\n    }\r\n    return sum/count;\r\n}\r\n\r\n// display students\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]){ // NAME_LENGTH 50\r\n    printf(\"\\nStudent names and marks: \\n\");\r\n\r\n    for (int i = 0; i < 3; i++){\r\n        printf(\"%s: %0.2f \\n\", names[i], marks[i]);\r\n    }\r\n}  \n/* --- Q3.c --- */\n#include <string.h>\r\n#include <stdio.h>\r\n\r\nint main(){\r\n    int n = 0; // number of bids\r\n    int max = 99999; // for the highest bid\r\n\r\n    while (1){\r\n        // Entering\r\n        printf(\"Enter the number of Bids:\");\r\n        scanf(\"%d\", &n);\r\n\r\n        // if the input is wrong\r\n        if (n < 2) printf(\"Number of Bids must be at least 2. Try again.\\n\");\r\n        else break; // if the input is correct , exit the infinite loop\r\n    }\r\n\r\n    int bids[n]; // create an array for bids\r\n\r\n    printf(\"Enter the bids. Must be at least $100000.\\n\");\r\n\r\n    // Entering bids cycle\r\n    for (int i = 0; i < n; i++){\r\n\r\n        while (1){\r\n            // Enter one bid\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%d\", &bids[i]);\r\n\r\n            // if the input is wrong\r\n            if (bids[i] < 100000) printf(\"Error: Bid must be at least 100000. Try again.\\n\");\r\n            else break; // if the input is correct , exit the infinite loop\r\n        }\r\n    }\r\n\r\n    // calculate the highest bid\r\n    for (int i = 0; i < n; i++){\r\n        if (max < bids[i]) max = bids[i];\r\n    }\r\n\r\n\r\n    printf(\"The highest bid is: $%d\", max); // output the highest bid\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns, and then uses nested loops to print a grid of asterisks (*). The output matches the expected result based on the user's inputs. q2:The average is calculated as an integer, which can lead to truncation if the sum is not divisible by 3. If you want a more precise average, consider using float for the average calculation q3:The program correctly implements a menu-driven interface to allow users to enter product types, prices, and weights. It calculates the total cost based on user inputs and applies a discount at the end."
  },
  {
    "student_id": "20612661",
    "code": "\n/* --- Question1.c --- */\n#include <stdio.h>\r\n\r\nvoid clearInputBuffer() {\r\n    int c;\r\n    while ((c = getchar()) != '\\n' && c != EOF); // Discards leftover characters\r\n}\r\n\r\nint main(){\r\n    int arraySize = 0;\r\n    int num1 = 0; \r\n    int num2 = 0;\r\n    int sum = 0;\r\n    int *sumPtr = &sum; \r\n    int array[100] = {0};\r\n    int *arrayPtr1 = array;\r\n    int *arrayPtr2 = array;\r\n\r\n    do{\r\n        printf(\"Enter the size of the array ( N>= 5 ): \");\r\n        scanf(\"%d\", &arraySize);\r\n        clearInputBuffer();\r\n        if (arraySize < 5){\r\n            printf(\"Error: Size entered must be higher or equal to 5. \\n\");\r\n        }\r\n\r\n    }while(arraySize < 5);\r\n\r\n\r\n\r\n    printf(\"Enter the array elements: \\n\");\r\n    for(int i = 0; i < arraySize; i++){\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n\r\n\r\n\r\n        do{\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", arraySize);\r\n        scanf(\"%d %d\", &num1, &num2);\r\n        clearInputBuffer();\r\n\r\n        if (!(((0 <= num1 ) && (num1 < arraySize)) && ((0 <= num2 ) && (num2 < arraySize)))){\r\n            printf(\"Error: Indicates must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n\r\n    }while (!((((0 <= num1 ) && (num1 < arraySize)) && ((0 <= num2 ) && (num2 < arraySize)))));\r\n\r\n    arrayPtr1 += num1;\r\n    arrayPtr2 += num2;\r\n    *sumPtr = *arrayPtr1 + * arrayPtr2;\r\n\r\n    printf(\"The sum of the values at indicates %d and %d is: %d\", num1, num2, sum);\r\n}\n/* --- Question2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\nfloat calculateAverage(const float mark[], int count);\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nvoid clearInputBuffer() {\r\n    int c;\r\n    while ((c = getchar()) != '\\n' && c != EOF); // Discards leftover characters\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count){\r\n    float average;\r\n    average = marks[0] + marks[1] + marks[2];\r\n    average = average / count;\r\n    return average;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]){\r\n    printf(\"Student Names and Marks: \\n\");\r\n    for( int i = 0; i < 3; i++){\r\n         if(i == 0){\r\n             printf(\"%s: %.2f\", names, marks[i]);\r\n        }\r\n        else if(i == 1){\r\n             printf(\"%s: %.2f\", names + 50, marks[i]);\r\n        }\r\n        else if(i == 2){\r\n             printf(\"%s: %.2f\", names +100, marks[i]);\r\n        }\r\n       clearInputBuffer();\r\n    }\r\n}\r\n\r\n\r\nint main(){\r\n    int stdNum = 3;\r\n    char names[NAME_LENGTH * 3];\r\n    float mark[3] = {0};\r\n\r\n    for(int i = 0; i < 3; i++){\r\n        printf(\"Enter the name of student %d: \", i+1);\r\n        if(i == 0){\r\n            scanf(\"%49s\", names);\r\n        }\r\n        else if(i == 1){\r\n            scanf(\"%49s\", names + 50);\r\n        }\r\n        else if(i == 2){\r\n            scanf(\"%49s\", names + 100);\r\n        }\r\n        clearInputBuffer();\r\n        printf(\"Enter the mark of student %d: \", i+1);\r\n        scanf(\"%.2f\", mark[i]);\r\n        clearInputBuffer();\r\n\r\n    }\r\n\r\n    displayStudentData(names, mark);\r\n\r\n    int average = calculateAverage(mark, stdNum);  \r\n    printf(\"Average Mark: %.2f\", average);  \r\n}\n/* --- Question3.c --- */\n#include <stdio.h>\r\n#define ARRAYLENGTH 100\r\n\r\nint main(){\r\n    int numBids = 0;\r\n    int highest = 0;\r\n    int array[ARRAYLENGTH] = {0};\r\n\r\n    printf(\"Enter the number of the bids:\");\r\n    scanf(\"%d\", &numBids);\r\n    while(numBids<2){\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &numBids);\r\n    }\r\n\r\n    printf(\"Enter the bids (must be at least $100000): \\n\");\r\n    for(int i = 0; i < numBids; i++){\r\n        printf(\"Bid %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n        while(array[i] < 100000){\r\n            printf(\"Error, Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &array[i]);\r\n        }\r\n    }\r\n\r\n    for (int i =0; i< numBids; i++){\r\n        if (highest < array[i]){\r\n            highest = array[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: %d\", highest);\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program correctly calculates the total cost for various grocery items based on user input. It handles different product types appropriately and allows for a discount to be applied, which is a solid feature."
  },
  {
    "student_id": "20595032",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n    // Prompt for array size\r\n    do {\r\n        printf(\"Enter array size (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"The minimum number of arrays is 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // Allocate memory\r\n    int *arr = (int *)malloc(N * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Prompt to enter array elements\r\n    printf(\"Enter %d elements for the array (starting with index 0):\\n\", N);\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element at index %d: \", i); // Start with 0\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    // Prompt to enter two indices\r\n    int i1, i2;\r\n    do {\r\n        printf(\"Enter first index (0 to %d): \", N - 1);\r\n        scanf(\"%d\", &i1);\r\n        if (i1 < 0 || i1 >= N) {\r\n            printf(\"Invalid index, please enter a value between 0 and %d.\\n\", N - 1);\r\n        }\r\n    } while (i1 < 0 || i1 >= N);\r\n\r\n    do {\r\n        printf(\"Enter second index (0 to %d): \", N - 1);\r\n        scanf(\"%d\", &i2);\r\n        if (i2 < 0 || i2 >= N) {\r\n            printf(\"Invalid index, please enter a value between 0 and %d.\\n\", N - 1);\r\n        }\r\n    } while (i2 < 0 || i2 >= N);\r\n\r\n    // Calculate the sum of the two elements\r\n    int sum = arr[i1] + arr[i2];\r\n\r\n    // Print the result\r\n    printf(\"The sum of the elements at indices %d and %d is: %d\\n\", i1, i2, sum);\r\n\r\n    // Free allocated memory\r\n    free(arr);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define students 3\r\n#define name 45\r\n\r\n// Function prototypes\r\nfloat Average(const float marks[], int count);\r\nvoid displayStudentData(const char names[][name], const float marks[]);\r\n\r\nint main() {\r\n    char names[students][name];  // Store student name\r\n    float marks[students];       // Store student marks\r\n\r\n    // Prompt to enter students names and marks\r\n    for (int i = 0; i < students; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);  \r\n        printf(\"Enter marks of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // Calculate average marks\r\n    float average = Average(marks, students);\r\n\r\n    // Print student names, marks, and student average\r\n    displayStudentData(names, marks);\r\n    printf(\"\\nAverage mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// Calculate average\r\nfloat Average(const float marks[], int count) {\r\n    float total = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        total += marks[i];\r\n    }\r\n    return total / count;\r\n}\r\n\r\n// Print studet data\r\nvoid displayStudentData(const char names[][name], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks\\n\");\r\n    for (int i = 0; i < students; i++) {\r\n        printf(\"%d : %s - Marks: %.2f\\n\", i + 1, names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define minimum 100000  // Minimum bid value\r\n\r\n// Getting a valid bid\r\nint BidValue() {\r\n    int bid;\r\n    while (1) {\r\n        printf(\"Enter a bid (minimum $100,000): \");\r\n        scanf(\"%d\", &bid);\r\n        if (bid >= minimum) {\r\n            return bid;\r\n        } else {\r\n            printf(\"Error: Bid must be at least $100000. Please try again:\\n\");\r\n        }\r\n    }\r\n}\r\n\r\nint main() {\r\n    int N;\r\n\r\n    // Getting number of bids\r\n    do {\r\n        printf(\"Enter the number of bids (N >= 2): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 2) {\r\n            printf(\"Error: Number of bids must be at least 2.\\n\");\r\n        }\r\n    } while (N < 2);\r\n\r\n    // Storage for bids\r\n    int bids[N];\r\n    \r\n    // Prompt to input bids\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Enter bid #%d: \", i + 1);\r\n        bids[i] = BidValue();\r\n    }\r\n\r\n    // Find highest bid\r\n    int highest = bids[0];\r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highest) {\r\n            highest = bids[i];\r\n        }\r\n    }\r\n\r\n    // Output highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highest);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. Q3: asking weight instead of quantity for case 3 & 4"
  },
  {
    "student_id": "20723677",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N;\n\n    // Prompt user for the size of the array\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"Invalid size. N must be at least 5.\\n\");\n        }\n    } while (N < 5);\n\n    // Dymically allocate memory for the array using pointers\n    int *array = (int *)malloc(N * sizeof(int));\n    if (array == NULL) {\n        printf(\"Memory allocation failed.\\n\");\n        return 1;\n    }\n\n    // Prompt user to enter each element of the array\n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (array + i));\n    }\n\n    int index1, index2;\n\n    // Prompt user for the two indices and validate\n    while (1) {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < 6): \");\n        scanf(\"%d %d\", &index1, &index2);\n\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\n            break;\n        } else {\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\"); // Prompt user for input again until the indices entered are valid\n        }\n    }\n\n    // Use pointers to find the sum of the values at the two indices\n    int sum = *(array + index1) + *(array + index2);\n\n    // Print the sum\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    // Free dynamically allocated memory\n    free(array);\n\n    return 0;\n    }\n\n\n\n/* --- Q2.c --- */\n#include <stdio.h>\n\n#define NUM_STUDENTS 3\n#define NAME_LENGTH 50\n\n// Function prototypes\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count, float average);\n\nint main() {\n    char names[NUM_STUDENTS][NAME_LENGTH];  // Array to store student names\n    float marks[NUM_STUDENTS];              // Array to store student marks\n    float average;\n\n    // Prompt user to enter names and marks\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"Enter the name of student %d: \", i+1);\n        scanf(\" %[^\\n]\", names[i]);  // Read the full name\n        printf(\"Enter the mark of student %d: \", i+1);\n        scanf(\"%f\", &marks[i]);     // Read the marks\n    }\n\n    // Calculate average mark\n    average = calculateAverage(marks, NUM_STUDENTS);\n\n    // Display the data\n    displayStudentData(names, marks, NUM_STUDENTS, average);\n\n    return 0;\n}\n\n// Function to calculate the average of marks\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n// Function to display student names, marks, and the average\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count, float average) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n    printf(\"\\nAverage Marks: %.2f\\n\", average);\n}\n\n/* --- Q3.c --- */\n#include <stdio.h>\n\n#define MIN_BID 100000  // Minimum bid is $100000\n\nint main() {\n    int N;\n\n    // Prompt user for the number of bids and validate\n        printf(\"Enter the number of bids: \");\n        scanf(\"%d\", &N);\n\n        // If the number of bids is less than 2\n        while (N < 2) {\n            printf(\"Error: Number of bids must be at least 2. Please try again: \");\n            scanf(\"%d\", &N); // Prompt user to enter a valid number of bids\n        }\n\n    // Declare an array to store the bids\n    int bids[N];\n\n    // Prompt user to enter each bid and validate\n    printf(\"Enter the bids (must be at least $100000):\\n\");\n    for (int i = 0; i < N; i++) {\n            printf(\"Bid %d: \", i + 1);\n            scanf(\"%d\", &bids[i]);\n\n            // If the bid is below the minimum ($100000)\n            while (bids[i] < MIN_BID) {\n                printf(\"Error: Bid must be at least $100000. Please try again: \");\n                scanf(\"%d\", &bids[i]); // Prompt user for a valid bid\n            }\n    }\n\n    // Determine the highest bid\n    int highestBid = bids[0];  // Initialize the highest bid as the first bid\n    for (int i = 1; i < N; i++) {\n        if (bids[i] > highestBid) {\n            highestBid = bids[i];  // Update the highest bid\n        }\n    }\n\n    // Print the highest bid\n    printf(\"The highest bid is: $%d\\n\", highestBid);\n\n    return 0;\n}\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns, and it prints a grid of asterisks based on the input values. The logic is sound and performs as expected. q2:The program is designed to read a list of integers, calculate their sum, average, product, smallest, and largest values. However, there is a crucial issue with how the product is calculated that leads to incorrect results. Users are forced to enter up to 50 integers. The product variable is initialized to 0. This results in the product always being 0 because any number multiplied by 0 is 0. It should be initialized to 1 instead q3:The program correctly implements a menu-driven system for calculating the costs of various grocery products based on user inputs, applying discounts as needed. It effectively handles different product types and calculates the total and final costs."
  },
  {
    "student_id": "20607620",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n    do {\r\n        printf(\"What is the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Please enter a size greater than or equal to 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n\r\n    int *array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation unsuccessful\\n\");\r\n        return 1;\r\n    }\r\n\r\n\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    int index1, index2;\r\n\r\n\r\n    while (1) {\r\n        printf(\"Enter the first index (0 to %d): \", N - 1);\r\n        scanf(\"%d\", &index1);\r\n        printf(\"Enter the second index (0 to %d): \", N - 1);\r\n        scanf(\"%d\", &index2);\r\n\r\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n            break;\r\n        } else {\r\n            printf(\"Error:Indices must be within the range of the array elements. Please try again\\n\");\r\n        }\r\n    }\r\n    \r\n    int sum = *(array + index1) + *(array + index2);\r\n    printf(\"The sum of the values at indices is: %d\\n\",sum);\r\n\r\n\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int num_students = 3;       \r\n    char names[3][50];            \r\n    int marks[3];\r\n    float average;\r\n\r\n\r\n    for (int i = 0; i < num_students; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); \r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%d\", &marks[i]);\r\n    }\r\n\r\n\r\n    int sum = 0;\r\n    for (int i = 0; i < num_students; i++) {\r\n        sum += marks[i];\r\n    }\r\n    average = (float)sum / num_students;\r\n\r\n\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < num_students; i++) {\r\n        printf(\"%s: %d\\n\", names[i], marks[i]);\r\n    }\r\n\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n\r\n    do {\r\n        printf(\"Enter the number of bids (N ≥ 2): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 2) {\r\n            printf(\"Error: At least two bids are required to determine the highest bid.\\n\");\r\n        }\r\n    } while (N < 2);\r\n\r\n\r\n    int bids[100]; \r\n\r\n\r\n    for (int i = 0; i < N; i++) {\r\n        do {\r\n            printf(\"Enter bid %d (at least $100,000): \", i + 1);\r\n            scanf(\"%d\", &bids[i]);\r\n            if (bids[i] < 100000) {\r\n                printf(\"Error: Each bid must be at least $100,000. Please try again.\\n\");\r\n            }\r\n        } while (bids[i] < 100000);\r\n    }\r\n\r\n\r\n    int highest_bid = bids[0];\r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highest_bid) {\r\n            highest_bid = bids[i];\r\n        }\r\n    }\r\n\r\n\r\n    printf(\"\\nThe highest bid is: $%d\\n\", highest_bid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The include directive has a syntax error.  q2:The average is calculated as a float but is printed as an integer. This will lead to truncation of any decimal values.  q3:The program correctly implements the functionality to calculate the total cost for various product types based on user input for weight, price, and discount. The logic for handling discounts and calculating costs is sound."
  },
  {
    "student_id": "20701628",
    "code": "",
    "feedback": "q1:The semicolons after the for loop headers terminate the loops prematurely, causing the inner block to execute only once regardless of the loop counter. Remove these semicolons q2:The format string for scanf uses commas, which will require the input to be comma-separated.The variables min and max are used to store the smallest and largest integers but are never declared. The logic for determining the smallest and largest integers is incorrect. The correct logic should be structured to compare all three integers properly.The print statements for results should be outside the while loop to avoid printing results on each iteration q3: The variable cost is used but never declared.The program does not handle the case when the user wants to exit (input 0). After calculating the cost, you should print the result to the user"
  },
  {
    "student_id": "20697136",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n\nint main(void){\n    int N = 0;\n    printf(\"Enter the size of the array (N >= 5): \");\n    scanf(\"%d\", &N);\n\n    int array[N];\n    int *arrPtr = array;\n    printf(\"Enter the array elements:\\n\");\n    for(int i = 0; i<N; i++){\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (arrPtr+i));\n    }\n\n    int ind1;\n    int ind2;\n    int sum;\n    for(int j = 0; j>=0; j++){\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &ind1, &ind2);\n        if((ind1 >= 0) && (ind2 < N)){\n            sum = arrPtr[ind1]+ arrPtr[ind2];\n            printf(\"The sum of the values at indices %d and %d is: %d\\n\", ind1, ind2, sum);\n            break;\n        }\n        else {\n            printf(\"Error: indices must be within the range of the array elements. Please try again.\\n\");\n        } \n    }\n}\n/* --- Q2.c --- */\n#include <stdio.h>\n#include <string.h>\n\nfloat calculateAverage(float a, float b, float c);\nvoid displayStudentData(char array1[3], float array2[]);\n\nint main(void){\n    char names[3];\n    float marks[3];\n\n    for(int i = 1; i<=3; i++){\n        printf(\"Enter the name of student %d: \", i);\n        scanf(\" %[^\\n]\", &names[i-1]);\n        printf(\"Enter the mark of student %d: \", i);\n        scanf(\"%f\", &marks[i-1]);\n    }\n    printf(\"Student Names and Marks:\\n\");\n    displayStudentData(names, marks);\n\n    printf(\"Average Mark: %.2f\", calculateAverage(marks[0], marks[1], marks[2]));\n}\n\nvoid displayStudentData(char array1[3], float array2[3]){\n    printf(\"%c: %.2f\\n\", array1[0], array2[0]);\n    printf(\"%c: %.2f\\n\", array1[1], array2[1]);\n    printf(\"%c: %.2f\\n\", array1[2], array2[2]);\n    return;\n}\n\nfloat calculateAverage(float a, float b, float c){\n    float average = (a+b+c)/3;\n    return average;\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main(void){\n    int N = 0;\n    printf(\"Enter number of bids: \");\n    scanf(\"%d\", &N);\n    if(N <= 2){\n        printf(\"Error. Number of bids must be at least 2. Please try again. \");\n        scanf(\"%d\", &N);\n    }\n    int arr[N];\n    printf(\"Enter the bids (must be at least $100000)\");\n    for(int i=0; i<N; i++){\n        scanf(\"%d\", &arr[i]);\n        if(arr[i] < 100000){\n            printf(\"Error. Bid must be at least $100000. Please try again.\");\n            scanf(\"%d\", &arr[i]);    \n        }\n        else{\n            \n        }\n    }\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3: syntax error. The calculation for the total cost of fruits mistakenly multiplies weight by 1 instead of price. unable to run (case 2)"
  },
  {
    "student_id": "20609412",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int *arr;           // Declare a pointer for dynamically allocated array\r\n    int N, index1, index2;\r\n\r\n    // Get the size of the array (>= 5)\r\n    do {\r\n        printf(\"Enter the size of the array elements (must be >= 5): \");\r\n        scanf(\"%d\", &N);\r\n    } while (N < 5);\r\n\r\n    // Allocate memory dynamically using malloc()\r\n    arr = (int *)malloc(N * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1; // Exit if malloc fails\r\n    }\r\n\r\n    // Get the array elements\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i + 1);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    // Get the indices of two elements\r\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n    scanf(\"%d%d\", &index1, &index2);\r\n\r\n    // Validate indices\r\n    while (index1 < 0 || index2 < 0 || index1 >= N || index2 >= N) {\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d%d\", &index1, &index2);\r\n    }\r\n\r\n    // Check for duplicates and replace them with -99\r\n    for (int i = 0; i < N; i++) {\r\n        for (int j = i + 1; j < N; j++) {\r\n            if (arr[i] == arr[j]) {\r\n                arr[j] = -99; // Replace duplicate with -99\r\n            }\r\n        }\r\n    }\r\n\r\n    // Print the modified array\r\n    printf(\"Modified array:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"%d \", arr[i]);\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    // Free dynamically allocated memory\r\n    free(arr);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n// Predefine\r\n#define NAME 50\r\n#define STUDENTS 3\r\n\r\n// Average marks fx\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Display fx\r\nvoid displayStudentData(const char names[][NAME], const float marks[], int count) \r\n{\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\n// Clear input fx\r\nvoid clearInputBuffer() \r\n{\r\n    int c;\r\n    while ((c = getchar()) != '\\n' && c != EOF);\r\n}\r\n\r\nint main() {\r\n    char names[STUDENTS][NAME];\r\n    float marks[STUDENTS];\r\n\r\n    //Get user input\r\n    for (int i = 0; i < STUDENTS; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        fgets(names[i], sizeof(names[i]), stdin);\r\n\r\n        names[i][strcspn(names[i], \"\\n\")] = '\\0';\r\n\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n\r\n        clearInputBuffer(); \r\n    }\r\n\r\n    float averageMark = calculateAverage(marks, STUDENTS);\r\n\r\n    displayStudentData(names, marks, STUDENTS);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", averageMark);\r\n\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n\r\n//function prototype\r\nint findMax(int arr[], int n);\r\n\r\nint main() {\r\n    \r\n    int highest_value, N;\r\n    \r\n    //get user input of how many bids all together\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n    \r\n    //set a array\r\n    int bids[N];\r\n    \r\n    //Perform validation that N ≥ 2\r\n    while (N<2){\r\n        printf(\"\\nError: Number of bids must be at least 2. Pls try again: \");\r\n        printf(\"\\nEnter the number of bids: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n    \r\n    \r\n    //get values of the bids    \r\n    for (int i=0; i<N; i++){\r\n        printf(\"Enter the bids (must be at least $100000)\\n\");\r\n        printf(\"Bid %d:\", i+1);\r\n        scanf(\"%d\", &bids[i]);\r\n        \r\n        while (bids[i]<100000){\r\n            printf(\"Error: Bid must be at least $100000. Pls try again: \");\r\n            printf(\"Bid %d:\", i+1);\r\n            scanf(\"%d\", &bids[i]);\r\n        }\r\n    }\r\n    \r\n    //use the function to find the highest bid\r\n    printf(\"The highest bid is: %d\", findMax(bids, N));\r\n    \r\n    return 0;\r\n}\r\n\r\n\r\n//find highest function\r\nint findMax(int arr[], int n) {\r\n  \r\n      // Assume the first element is the largest\r\n    int max = arr[0];\r\n    for (int i = 1; i < n; i++) {\r\n      \r\n          // Update max if arr[i] is greater\r\n        if (arr[i] > max) {\r\n            max = arr[i];\r\n        }\r\n    }\r\n    return max;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20720333",
    "code": "\n/* --- Q1.c --- */\n#define _CRT_SECURE_NO_WARNINGS\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n\r\nint main() {\r\n    int size;\r\n    int num1, num2;\r\n    int* p;\r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &size);\r\n\r\n    if (size < 5) {\r\n        printf(\"Error: Array size must be at least 5.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    p = (int*)malloc(size * sizeof(int));\r\n    if (p == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < size; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &p[i]);\r\n    }\r\n\r\n    while (1) {\r\n        printf(\"Enter the indices of two elements (0 <= index1, index2 < %d): \", size);\r\n        scanf(\"%d %d\", &num1, &num2);\r\n\r\n        if (num1 >= 0 && num1 < size && num2 >= 0 && num2 < size) {\r\n            int sum = p[num1] + p[num2];\r\n            printf(\"Sum = %d\\n\", sum);\r\n            break;\r\n        }\r\n        else {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    }\r\n\r\n    free(p);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#define _CRT_SECURE_NO_WARNINGS\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n    int count;\r\n\r\n    for (count = 0; count < STUDENT_COUNT; count++) {\r\n        printf(\"Enter the name of student %d: \", count + 1);\r\n        fgets(names[count], NAME_LENGTH, stdin);\r\n        names[count][strcspn(names[count], \"\\n\")] = 0;\r\n\r\n        printf(\"Enter the mark of student %d: \", count + 1);\r\n        scanf(\"%f\", &marks[count]);\r\n\r\n        while (getchar() != '\\n');\r\n    }\r\n\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"\\nThe average mark is: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.c --- */\n#define _CRT_SECURE_NO_WARNINGS\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int bids, max, current_bid;\r\n\r\n    do {\r\n        printf(\"Enter the number of bids (more than 1): \");\r\n        scanf(\"%d\", &bids);\r\n\r\n        if (bids < 2) {\r\n            printf(\"Error: Number of bids must be at least 2.\\n\");\r\n        }\r\n    } while (bids < 2);\r\n\r\n    max = 0;\r\n\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n\r\n    for (int i = 0; i < bids; i++) {\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%d\", &current_bid);\r\n\r\n        while (current_bid < 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please enter again: \");\r\n            scanf(\"%d\", &current_bid);\r\n        }\r\n\r\n        if (current_bid > max) {\r\n            max = current_bid;\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: $%d\\n\", max);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The average is calculated as an integer division since both sum and 3 are integers. This leads to potential loss of precision.  q3:The program is intended to calculate the total cost and apply a discount based on user input for various grocery items. The logic is mostly correct, but there are a few issues that need to be addressed.The line (double)total = weight * price; is incorrect because you cannot cast the assignment itself."
  },
  {
    "student_id": "20705878",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N; //Size N of the array\n    int *array; //Pointer for dynamically allocated array\n    int index1, index2; //Indices provided by the user\n    int sum; //Sum of the two elements\n\n    // Prompt the user to enter the size of the array (N must be >= 5)\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"Error: The size of the array must be at least 5.\\n\");\n        }\n    } while (N < 5); //Repeat until a valid size is entered\n\n    //Allocate memory for the array dynamically\n    array = (int *)malloc(N * sizeof(int));\n    if (array == NULL) { //Check if memory allocation was successful\n        printf(\"Memory allocation failed.\\n\");\n        return 1; //Exit the program if allocation fails\n    }\n\n    // Prompt the user to input elements of the array\n    printf(\"Enter %d elements of the array:\\n\", N);\n    for (int i = 0; i < N; i++) {\n        printf(\"Element [%d]: \", i);\n        scanf(\"%d\", &array[i]);\n    }\n\n    //Prompt the user to input two valid indices and validate it\n    do {\n        printf(\"Enter two indices (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2); //Corrected format string\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\n            printf(\"Error: Indices must be in the range [0, %d).\\n\", N);\n        }\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N); //Repeat until valid indices are provided\n\n    //Calculate the sum of the elements at the two indices using pointers\n    sum = *(array + index1) + *(array + index2);\n\n    //Print the result\n    printf(\"Sum of elements at index %d and %d is: %d\\n\", index1, index2, sum);\n\n    //Free the allocated memory to prevent memory leaks\n    free(array);\n\n    return 0;\n}\n\n/* --- Q2.c --- */\n#include <stdio.h>\n\n#define NAME_LENGTH 50 //Maximum length of a student's name\n#define STUDENT_COUNT 3 //Number of students\n//Function to calculate the average of student marks\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0; //Variable to store the total marks\n    for (int i = 0; i < count; i++) {\n        sum += marks[i]; //Add each mark to the total\n    }\n    return sum / count; //Calculate and return the average\n}\n\n//Function to display student names and marks along with the average\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    printf(\"Student Data:\\n\");\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]); // Print each student's name and mark\n    }\n}\n\n\nint main() {\n    char names[STUDENT_COUNT][NAME_LENGTH]; //Array to store names of students\n    float marks[STUDENT_COUNT]; //Array to store marks of students\n\n    //Prompt the user to input names and marks of students\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]); //Input the student's name\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]); //Input the student's mark\n    }\n\n    //Calculate the average mark\n    float average = calculateAverage(marks, STUDENT_COUNT);\n\n    //Display the student data and the average mark\n    displayStudentData(names, marks);\n    printf(\"Average mark: %.2f\\n\", average);\n\n    return 0;\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N; //Number of bids\n    float *bids; //Pointer to dynamically allocated array for bids\n    float highest_bid = 0.0; //Variable to store the highest bid\n\n    //Prompt the user to enter the number of bids (N must be >= 2)\n    do {\n        printf(\"Enter the number of bids (N >= 2): \");\n        scanf(\"%d\", &N);\n        if (N < 2) {\n            printf(\"Error: There must be at least 2 bids.\\n\");\n        }\n    } while (N < 2); //Repeat until a valid number of bids is provided\n\n    //Allocate memory for the bids dynamically\n    bids = (float *)malloc(N * sizeof(float));\n    if (bids == NULL) { //Check if memory allocation was successful\n        printf(\"Memory allocation failed.\\n\");\n        return 1; //Exit the program if allocation fails\n    }\n\n    //Prompt the user to input each bid and validate it\n    for (int i = 0; i < N; i++) {\n        do {\n            printf(\"Enter bid %d (at least $100,000): \", i + 1);\n            scanf(\"%f\", &bids[i]);\n            if (bids[i] < 100000.0) {\n                printf(\"Error: Each bid must be at least $100,000.\\n\");\n            }\n        } while (bids[i] < 100000.0); //Repeat until a valid bid is entered\n\n        //Update the highest bid if the current bid is greater\n        if (bids[i] > highest_bid) {\n            highest_bid = bids[i];\n        }\n    }\n\n    //Print the highest bid\n    printf(\"The highest bid is: $%.2f\\n\", highest_bid);\n\n    //Free the allocated memory to prevent memory leaks\n    free(bids);\n\n    return 0;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly calculates the sum, average, product, smallest, and largest of a user-defined number of integers.  q3:The program effectively calculates the total cost of various grocery items based on user input, applying discounts where appropriate."
  },
  {
    "student_id": "20613139",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N, index1, index2;\r\n    int *array;\r\n\r\n    //Input and validate array size\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Invalid size. Please enter a value greater than or equal to 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    //Dynamically allocate memory for the array\r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //Input array elements\r\n    printf(\"Enter %d elements for the array:\\n\", N);\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    //Input and validate indices\r\n    do {\r\n        printf(\"Enter two indices (0 <= index1, index2 < %d):\\n\", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Invalid indices. Please enter valid indices.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    //Compute sum using pointers\r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    //Output the result\r\n    printf(\"The sum of elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n\r\n    //Free allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n#define STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\n// Function to calculate the average\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student data\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Name: %s, Marks: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char names[STUDENTS][NAME_LENGTH];\r\n    float marks[STUDENTS];\r\n\r\n    // Input student names and marks\r\n    for (int i = 0; i < STUDENTS; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); // Read name with spaces\r\n        printf(\"Enter the marks of %s: \", names[i]);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // Calculate the average\r\n    float average = calculateAverage(marks, STUDENTS);\r\n\r\n    // Display the data\r\n    displayStudentData(names, marks, STUDENTS);\r\n\r\n    // Display the average\r\n    printf(\"\\nAverage Marks: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n    // Input and validate the number of bids\r\n    do {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 2) {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again:\\n\");\r\n        }\r\n    } while (N < 2);\r\n\r\n    // Array to store bids\r\n    float bids[N];\r\n\r\n    // Input bids and validate each one\r\n    for (int i = 0; i < N; i++) {\r\n        do {\r\n            printf(\"Enter bid %d (must be at least $100,000): \", i + 1);\r\n            scanf(\"%f\", &bids[i]);\r\n            if (bids[i] < 100000) {\r\n                printf(\"Error: Bid must be at least $100,000. Please try again:\\n\");\r\n            }\r\n        } while (bids[i] < 100000);\r\n    }\r\n\r\n    // Determine the highest bid\r\n    float highestBid = bids[0];\r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Output the highest bid\r\n    printf(\"\\nThe highest bid is: $%.0f\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1: no code q2:The program aims to calculate the sum, average, product, and identify the smallest and largest of three integers entered by the user. However, there are logical flaws in how the largest and smallest numbers are determined. q3: Syntax error. When using scanf, the address of the variables must be passed. You need to use the address-of operator & for all the scanf calls.The variable discount should be a float, which is appropriate, but it's also important to ensure that calculations involving percentages remain accurate. The calculation and output logic is repeated in multiple places. This could be refactored into a function to reduce redundancy."
  },
  {
    "student_id": "20718618",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N; // The size of the array\n    int *arr; // Pointer for the dynamically allocated array\n    int *ptr1, *ptr2; // Pointers for the selected elements\n    int index1, index2; // Indices chosen by the user\n    int sum; // Sum of the two numbers at the chosen indices\n\n    // Prompt the user to enter the size of the array (N) and ensure it's at least 5\n    printf(\"Enter the size of the array (N >= 5): \");\n    scanf(\"%d\", &N); // read size of array\n    while (N < 5) { // Creating condition\n        printf(\"Invalid size! Enter a number 5 or more: \");\n        scanf(\"%d\", &N); // Continue prompt until valid input is given\n    }\n\n    // Allocate memory for the array\n    arr = (int *)malloc(N * sizeof(int));\n    if (arr == NULL) { // Creating condition\n        printf(\"Memory allocation failed. Exiting...\\n\");\n        return 1; // Exit the program if memory couldn't be allocated\n    }\n\n    // Prompt the user to enter each element of the array\n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (arr + i)); // Store values using pointer arithmetic\n    }\n\n    // Prompt the user to enter two indices for the array elements\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n    scanf(\"%d %d\", &index1, &index2); // Read indices in a single input \n\n    // Validate the indices are within range\n    while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n    }\n\n    // Set pointers to the chosen indices\n    ptr1 = arr + index1; // Pointer to the first element\n    ptr2 = arr + index2; // Pointer to the second element\n\n    // Compute the sum using the pointers\n    sum = *ptr1 + *ptr2;\n\n    // Display the result\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    // Free the allocated memory\n    free(arr);\n\n    return 0;\n}\n\n\n    \n\n/* --- Q2.c --- */\n#include <stdio.h>  // For input and output functions\n\n#define NAME_LENGTH 50 // Maximum length of student names\n#define NUM_STUDENTS 3 // Number of students\n\n// Function to calculate the average of marks\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0; // Initialize the sum to 0\n    for (int i = 0; i < count; i++) { // Loop through all marks\n        sum += marks[i]; // Add each mark to the sum\n    }\n    return sum / count; // Return the average\n}\n\n// Function to display student names, marks, and the average\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], float average) {\n    printf(\"Student Data:\\n\"); // Print a header\n    for (int i = 0; i < NUM_STUDENTS; i++) { // Loop through all students\n        printf(\"Name: %s, Mark: %.2f\\n\", names[i], marks[i]); // Print each student's name and mark\n    }\n    printf(\"Average Mark: %.2f\\n\", average); // Print the average mark\n}\n\nint main() {\n    char names[NUM_STUDENTS][NAME_LENGTH]; // Array to store student names\n    float marks[NUM_STUDENTS]; // Array to store student marks\n    float average; // Variable to store the average mark\n\n    // Prompt the user to enter student names and marks\n    for (int i = 0; i < NUM_STUDENTS; i++) { // Loop through all students\n        printf(\"Enter name of student %d: \", i + 1); // Ask for the name\n        scanf(\" %[^\\n]\", names[i]); // Read the name (handles spaces), hint\n        printf(\"Enter mark of student %d: \", i + 1); // Ask for the mark\n        scanf(\"%f\", &marks[i]); // Read the mark\n    }\n\n    // Calculate the average without checking for invalid data (logical error here)\n    average = calculateAverage(marks, NUM_STUDENTS);\n\n    // Call the function to display the data\n    displayStudentData(names, marks, average);\n\n    return 0; // Exit the program\n}\n\n\n/* --- Q3.c --- */\n#include <stdio.h>\n\n#define MIN_BID 100000 // Define minimum valid bid amount as 100,000\n\n// Function to get the highest bid (with a logical error fixed)\nint getHighestBid(int bids[], int N) {\n    int highest = bids[0]; // Start with the first bid as the highest value\n    for (int i = 1; i < N; i++) { // Loop through the rest of the bids\n        if (bids[i] > highest) { // If the current bid is greater than the highest\n            highest = bids[i]; // Update the highest bid to the current bid\n        }\n    }\n    return highest; // Return the highest bid found\n}\n\nint main() {\n    int N; // Variable to store the number of bids entered by the user\n    printf(\"Enter the number of bids: \"); // Prompt user for the number of bids\n    scanf(\"%d\", &N); // Read the number of bids from user input\n\n    // Validate that N is at least 2\n    while (N < 2) { // If N is less than 2, prompt again for valid input\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\n        scanf(\"%d\", &N); // Read the number of bids again\n    }\n\n    int bids[N]; // Declare an array to store the bid amounts\n\n    // Get the bids and validate each one\n    for (int i = 0; i < N; i++) { // Loop through to get each bid\n        printf(\"Bid %d: \", i + 1); // Prompt the user to enter the bid for the current index\n        scanf(\"%d\", &bids[i]); // Read the bid from the user input\n\n        // Validate that the bid is at least $100,000\n        while (bids[i] < MIN_BID) { // If the bid is less than $100,000\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\n            scanf(\"%d\", &bids[i]); // Prompt the user to enter a valid bid\n        }\n    }\n\n    // Get and display the highest bid\n    printf(\"The highest bid is: $%d\\n\", getHighestBid(bids, N)); // Call the function to get the highest bid and display it\n\n    return 0; // End of program\n}\n\n\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20710617",
    "code": "\n/* --- lab asst 2/Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n  \r\n  int size;\r\n  printf(\"Enter the size of the array (N>=5): \");\r\n  scanf(\"%d\",&size);\r\n  \r\n   while (size<5){\r\n      printf(\"size must be greater than or equal to 5\\n\");\r\n      printf(\"Enter the size of the array (N>=5): \");\r\n      scanf(\"%d\",&size);\r\n    }\r\n  \r\n  int *arr=(int *)malloc(size*sizeof(int));\r\n   \r\n    printf(\"Enter the array of element:\\n\");\r\n    for (int i =0; i<size ; i++){\r\n        printf(\"Element[%d]=\",i);\r\n        scanf(\"%d\",(arr + i));\r\n    }\r\n     \r\n    \r\n    int i1={0};\r\n    int i2={0}; \r\n    \r\n    printf(\"Enter the indices of the two elements 0<=index1, index2< %d:\\n\",size);\r\n    scanf(\"%d %d\",&i1 , &i2);\r\n   \r\n    while (i1<0 || i2>size){\r\n        printf (\"Error: Indices must be within the range of elemesnts. Please try again\");\r\n         printf(\"Enter the indices of the two elements 0<=index1, index2<%d: \",size);\r\n         scanf(\"%d\",i1);\r\n         scanf(\"%d\",i2);\r\n        \r\n    }\r\n\r\n    int sum = *(arr + i1) + *(arr + i2);\r\n    \r\n    printf(\"sum of values at indices %d and %d is: %d\\n\",i1 , i2 , sum);\r\n    free(arr);\r\n   \r\n    return 0;\r\n}\n/* --- lab asst 2/Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50  \r\n#define scount 3\r\n\r\nfloat calculateAverage(const float marks[], int c) {   //define a function to calculate average\r\n\r\n    float sum = 0.0; \r\n    for (int i = 0; i < c; i++)    // for loop to count the sum of elements of the array as we traverse\r\n    {\r\n        sum = sum + marks[i];\r\n    }\r\n\r\n    return sum/c;  // returns the average value \r\n\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {  // define a function to display all the data \r\n\r\n    printf(\"\\nStudent Names and Marks: \\n\"); \r\n    int c = scount;\r\n    for (int i = 0; i < c; i++)\r\n    {\r\n        printf(\"%s : %.2f\\n\", names[i], marks[i]);  // for loop to traverse through both the arrays and print out data \r\n    }\r\n}\r\n\r\n\r\nint main() {\r\n\r\n    char names[scount][NAME_LENGTH];  //2d array for names since we have multiple names\r\n    float marks[scount];\r\n\r\n    for (int i = 0; i < scount; i++)\r\n    {\r\n        printf(\"Enter the name of student %d: \", i + 1);  // for loop to take user input for values\r\n        scanf(\" %[^\\n]\", names[i]); \r\n\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    displayStudentData(names, marks); // function call to display data\r\n\r\n    float average = calculateAverage(marks, scount);  // function call to calculate average\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n    \r\n\r\n}\n/* --- lab asst 2/Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\nint N;\r\nprintf(\"Enter the number of bids: \");\r\nscanf(\"%d\",&N);\r\n while (N<2){\r\n      printf(\"Error: Number of bids must be atleast 2.Please try again: \");\r\n         scanf(\"%d\",N);\r\n }\r\n \r\n int bids[N];\r\n int highestBid;\r\n  \r\n  for (int i=0;i<N;i++){\r\n      printf(\"Bid %d: \",i+1);\r\n      scanf(\"%d\",&bids[i]);\r\n      \r\n      while (bids[i]<10000){\r\n     printf(\"Error: Bid must be greater than 100000. Please try again:\");\r\n      scanf(\"%d\",&bids[i]);\r\n      \r\n     if(bids[i]>bids[i+1]){\r\n        highestBid=bids[i];\r\n     }\r\n     else{\r\n          highestBid=bids[i+1];\r\n     }\r\n }\r\n}\r\n printf(\"The highest bid is : %d\\n\",highestBid);\r\n return 0;\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and prints a grid of asterisks (*). The outer loop controls the number of rows, while the inner loop controls the number of columns, which is appropriate for the task. q2:The program correctly prompts the user for three integers and calculates their sum, average, product, largest, and smallest values. The calculations are accurate, and the logical flow is appropriate for the task. q3: no submission"
  },
  {
    "student_id": "20703544",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n\nint main()\n{\n    int size = 0;\n    printf(\"Enter the size of array(N>=5) : \");\n    scanf(\"%d\", &size);\n    int array[size];\n    for(int i = 0; i < size; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", &array[i]);\n    }\n    int a;\n    int b;\n    printf(\"Enter two target indices(range: 0 <= indices < %d): \", size);\n    scanf(\"%d %d\", &a, &b);\n    int *ptr1 = &array[a];\n    int *ptr2 = &array[b];\n    printf(\"The sum of the two target indices is %d\", *ptr1 + *ptr2);\n    return 0;\n}\n/* --- Q2.c --- */\n#include <stdio.h>\n\n\nint calculate_average(float mark[], int count);\nvoid display(char name[], float mark[]);\n\nint main()\n{\n    char studentName[3];\n    float mark[3];\n    for(int i = 0; i < 3; i++) {\n        printf(\"Name of student %d: \", i + 1);\n        scanf( \" %[^\\n]\", &studentName[i]);\n        printf(\"Mark: \");\n        scanf(\"%f\", &mark[i]);\n    }\n    display(studentName, mark);\n    return 0;\n}\n\nint calculate_average(float mark[], int count) {\n    float total = 0;\n    for(int j = 0; j < count; j++) {\n        total += mark[count];\n    }\n    float average = (float) total / count;\n    return average;\n}\n\nvoid display(char name[], float mark[]) {\n    for(int k = 0; k < 3; k++) {\n    printf(\"%20s %.2f\\n\", name[k], mark[k]);\n    }\n    printf(\"The average mark of the studetns is %d\", calculate_average(mark, 3));\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main()\n{\n    int num;\n    int array[num];\n    \n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &num);\n    if(num<3) {\n        printf(\"number of bids must at least 3. try again\\n\");\n        scanf(\"%d\", &num);\n    }\n    for(int i = 0; i < num; i++) {\n    printf(\"Enter the bids(must be at least $100000: \");\n    scanf(\"%d\", &array[i]);\n    if(array[i] < 100000){\n        printf(\"The bids must be at least $100000.Try again: \");\n        scanf(\"%d\", &array[i]);\n        }\n    }\n    \n    int max = 0;\n    int j;\n    for(j = 0; j < num; j++) {\n        if(max < array[j]) {\n          max = array[j];\n        }\n    }\n    printf(\"The highest bids is %d\", max);\n    return 0;\n}\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3: incorrect discount calculation"
  },
  {
    "student_id": "20611068",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N, index1, index2;\r\n    int *arr;\r\n\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Invalid size. N must be greater than or equal to 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    \r\n    arr = (int *)malloc(N * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    \r\n    printf(\"Enter the elements of the array:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", arr + i); \r\n    }\r\n\r\n    \r\n    do {\r\n        printf(\"Enter the index of the first element (0 <= index1 < N): \");\r\n        scanf(\"%d\", &index1);\r\n        printf(\"Enter the index of the second element (0 <= index2 < N): \");\r\n        scanf(\"%d\", &index2);\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Invalid indices. Indices must be within the array bounds.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n\r\n    \r\n    int sum = *(arr + index1) + *(arr + index2); \r\n\r\n    \r\n    printf(\"The sum of the elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define NUM_STUDENTS 3\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"\\nName:%s\\nMarks:%.2f\\n\", names[i], marks[i]);\r\n    }\r\n    float average = calculateAverage(marks, NUM_STUDENTS);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n}\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_STUDENTS];\r\n\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Enter name for student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n\r\n        printf(\"Enter marks for student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    displayStudentData(names, marks);\r\n\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N;\r\n    float bids[100]; \r\n    float highestBid;\r\n\r\n    printf(\"Enter the number of bids (N, N >= 2): \");\r\n    scanf(\"%d\", &N);\r\n\r\n\r\n    if (N < 2) {\r\n        printf(\"Error: Number of bits must be at least 2.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Enter bid %d: \", i + 1);\r\n        scanf(\"%f\", &bids[i]);\r\n        if (bids[i] < 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again.\\n\");\r\n            i--; \r\n        }\r\n    }\r\n\r\n    \r\n    highestBid = bids[0];\r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. Q3: incorrect discount calculation"
  },
  {
    "student_id": "20606888",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n\n\n\nint main() {\n    //pointer declaration\n    int *ptr1,  *ptr2;\n    int n, sum;\n    double arr[100];\n    \n    printf(\"Enter the number of elements (1 to 100): \");\n    scanf(\"%d\", &n);\n\n    for (int i = 0; i < n; ++i) {\n        printf(\"Enter number%d: \", i + 1);\n        scanf(\"%lf\", &arr[i]);\n    }\n\n    \n    for (int i = 0; i < 6; i++) {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < 6): \");\n        scanf(\"ptr1 = %u, ptr2 = %u\\n\", ptr1, ptr2);\n    }\n    \n    \n    //Sum of ptr1 and ptr2\n    sum = ptr1 + ptr2;\n    \n    printf(\"The sum of values at indices 4 and 5 is: %d\\n\", sum);\n\n    return 0;\n}\n    \n  \n/* --- Q2.c --- */\n#include <stdio.h>\n#include <string.h>\n#define NUM_STUDENT 3\n\nstruct StudentData {\n    char studentName[50];\n    float studentMark;\n};\n\nint main() {\n    struct StudentData persons[NUM_STUDENT];\n    float avg;\n    \n\n    for(int i=0; i<NUM_STUDENT; i++){\n        printf(\"Enter the name of student: \");\n        scanf(\" %[^\\n]\", persons[i].studentName);\n        \n        printf(\"Enter the mark of student: \");\n        scanf(\"%f\", &persons[i].studentMark);\n        getchar();\n        \n    }\n\n    void displayStudentData(const char names[][50], const float marks[]);\n\n    float calculateAverage(const float marks[], int count);\n    printf(\"Average Mark: %.2f\", avg);\n    \n    return 0;\n}\n    \n/* --- Q3.c --- */\n#include <stdio.h>\n\n//Function to find the highest bid \nfloat* highest_float(float *a, float *b, float *c){\n    if (*a > *b, *a > *c) {\n        return a;\n    }\n    if (*b > *a, *b > *c) {\n        return b;\n    }\n    if (*c > *a, *c > *b) {\n        return c;\n    }\n}\n\nint main()\n{\n    int num_bid;\n    float num1, num2, num3;\n    \n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &num_bid);\n        \n    printf(\"Enter the bids (must be at least $100000):\\n\");\n    \n    printf(\"Bid 1: \");\n    scanf(\"%f\", &num1);\n        \n    printf(\"Bid 2: \");\n    scanf(\"%f\", &num2);\n    \n    printf(\"Bid 3: \");\n    scanf(\"%f\", &num3);\n    \n    //Call function to find highest bid \n    float *highest = highest_float(&num1, &num2, &num3);\n    \n    printf(\"The highest bid is: $%f\\n\", *highest);\n    \n    return 0;\n    }\n    \n",
    "feedback": "q1: The intention of the program is to print a grid of asterisks based on user-defined rows and columns. However, there are issues with the loop structure that prevent it from functioning correctly. q2:The variables sum, average, and product are calculated before the values of a, b, and c are initialized through user input. This will lead to undefined behavior.The average calculation should be done after obtaining the sum, and it should correctly use floating-point arithmetic to avoid integer division truncation. The program currently does not implement logic to find the smallest and largest numbers.  q3:The program is intended to calculate the total cost based on user input for different product types. However, there are several issues that prevent it from functioning correctly."
  },
  {
    "student_id": "20722404",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program effectively prompts the user for three integers and correctly calculates their sum, average, product, smallest, and largest values. q3:The program correctly handles user input to calculate the total and final costs for different types of grocery items, including fruits, vegetables, dairy products, and canned goods. \n    The code for calculating costs is repeated in each case. This can be refactored into a function to avoid redundancy and improve maintainability."
  },
  {
    "student_id": "20615031",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\r\nint main(void){\r\n    //This pointer will hold the \r\n    //base adddress of the block created\r\n    int* ptr;\r\n    int n, value = 0;\r\n\r\n\r\n//Dynamic allocate memory using malloc()\r\n    ptr = (int*) malloc(n * sizeof(int));\r\n\r\n//Check if the memory has been succesfully \r\n//allocated by malloc or not\r\n    if(ptr == NULL){\r\n        printf(\"Memory not allocated.\\n\");\r\n        exit(0);    //Exit Success\r\n\r\n    }\r\n\r\n//Get the number of elements for the array one by one\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &n);\r\n\r\n    printf(\"Enter number the array elements:\\n\");\r\n    for(int i = 0; i < n; ++i){\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &value);\r\n        ptr[i] = i + 1;\r\n    }\r\n\r\n   /* printf(\"The elements of the array are: \");\r\n    for(int i = 0; i < n; ++i){\r\n        printf(\"%d \", ptr[i]);\r\n    }\r\n*/\r\n\r\n    int index1, index2 = 0;\r\ndo{\r\n\r\n    printf(\"\\nEnter the indices of the two elements (0 <= index1, index2 < 6): \");\r\n    scanf(\"%d %d\", &index1, &index2);\r\n\r\n    if(index1 < 0 || index1 >= n || index2 < 0 || index2 >= n){\r\n        printf(\"Error: Indices must be within the range array elements, Please try again.\");\r\n    }\r\n    \r\n    int sum = *(ptr + index1) + *(ptr + index2);\r\n    printf(\"The sum of the values at indices %d and %d is: \", index1 , index2 , sum);\r\n\r\n}while( index1 < 0 || index1 >= n || index2 < 0 || index2 >= n);\r\n\r\n\r\n}\r\n\r\n\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define MAX_LENGTH 100\r\n#define STUDENT_COUNT 3\r\n\r\n//Function Prototype\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][MAX_LENGTH], const float marks[], int count); // NAME_LENGTH 50 \r\n\r\n\r\nint main(void){\r\n    char names [STUDENT_COUNT] [MAX_LENGTH];\r\n    float marks [STUDENT_COUNT];    // three students marks\r\n\r\n\r\n    //Prompt the user to enter the values of the three student names and marks one \r\n    for( int i = 0; i < STUDENT_COUNT; i++){\r\n        printf(\"Enter a student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", &names[i]); //Read the student name\r\n\r\n        printf(\"Enter the mark of student %d: \", i+1);\r\n        scanf(\"%f\", &marks[i]); // Read the student marks\r\n    }\r\n\r\n//Calculate the average marks of student\r\n    float Average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n//Display the student names, marks and the average marks\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"Average mark: %.2f\\n\", Average);\r\n\r\n    \r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count){\r\n    float sum = 0.0;\r\n    for(int i = 0; i < count; i++){\r\n        sum += marks[i];\r\n    \r\n    }\r\n    return sum/count;\r\n}\r\n\r\n//Function to display the names, marks and the average marks\r\nvoid displayStudentData(const char names[][MAX_LENGTH], const float marks[], int count){\r\n    printf(\"\\nStudent Names and Marks\\n\");\r\n    //Print each student Data\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Name: %s\\n Mark: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(void){\r\n    int N = 0;  //declare the number of bids\r\n\r\n// Prompt the user to enter the number of bits\r\n    do{\r\n    printf(\"Enter the number of bids ( N >= 2 ): \");\r\n    scanf(\"%d\", &N);\r\n        if (N < 2){\r\n            printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        }\r\n    }while(N < 2);\r\n\r\n    //allocate the memory for bids array\r\n    int *bid = (int *) malloc(N * sizeof(int));\r\n    if (bid == NULL){\r\n        printf(\"Memory not allocated.\\n\");\r\n        return 1; //Prove there is an error\r\n    }\r\n\r\n// Prompt the user to enter the values of the N bid\r\n    for(int i = 0; i < N ; i++){\r\n        do{\r\n            printf(\"Enter the bids (must be at least $100000)\\nBid %d:\", i+1);\r\n            scanf(\"%d\", &bid[i]);\r\n\r\n            if(bid[i] < 100000){\r\n                printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            }\r\n        }while(bid[i] < 100000);\r\n    }\r\n\r\n//Find the highest bid\r\n    int highest = bid[0];\r\n    for(int i = 0; i < N ; i++){\r\n        if( bid[i] > highest){\r\n            highest = bid[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: %d\", highest);\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20612965",
    "code": "\n/* --- 20612965_Teoh Zhuo Qi/q1.c --- */\n//lab 2 question 1\n#include <stdio.h>\n\nint main(){\n    int N, index1, index2;\n    \n    printf(\"Enter the size of the array(N>=5):\");\n    scanf(\"%d\",&N);\n    \n    if (N<5){\n        printf(\"Error:Size must be at least 5.\\n\");\n        return 1;\n    }\n    \n    int array[N];\n    \n    printf(\"Enter the array elements:\\n\");\n    for (int i=0;i<N;++i){\n        printf(\"Element %d:\",i);\n        scanf(\"%d\",&array[i]);\n    }\n    \n    while(1){\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d):\",N);\n        scanf(\"%d %d\",&index1, &index2);\n        \n        if (index1>=0 && index1<N && index2>=0 && index2<N){\n            break;\n        }\n        \n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n    }\n    \n    int sum = array[index1] + array[index2];\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\",index1,index2,sum);\n    \n    return 0;\n}\n\n/* --- 20612965_Teoh Zhuo Qi/q2.c --- */\n//lab 2 question 2\n#include <stdio.h>\n\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][50], const float marks[], int count);\n\nint main() {\n    char names[3][50];\n    float marks[3];\n    \n    for (int i = 0; i < 3; ++i) {\n        printf(\"Enter name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n    \n    float average = calculateAverage(marks, 3);\n    \n    displayStudentData(names, marks, 3);\n    printf(\"\\n\");\n    printf(\"Average mark: %.2f\\n\", average);\n    \n    return 0;\n}\n\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0;\n    for (int i = 0; i < count; ++i) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\nvoid displayStudentData(const char names[][50], const float marks[], int count) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < count; ++i) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\n/* --- 20612965_Teoh Zhuo Qi/q3.c --- */\n//lab 2 question 3 \n#include <stdio.h>\n\nint main() {\n    int N;\n\n    printf(\"Enter the number of bids: \");\n    while(1) {\n        scanf(\"%d\", &N);\n        if (N >= 2) {\n            break;\n        }\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\n    }\n\n    float bids[100];\n\n    for (int i = 0; i < N; ++i) {\n        while(1) {\n            printf(\"Bid %d: \", i + 1);\n            scanf(\"%f\", &bids[i]);\n            if (bids[i] >= 100000) {\n                break;\n            }\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\n        }\n    }\n\n    float highestBid = bids[0];\n    for (int i = 1; i < N; ++i) {\n        if (bids[i] > highestBid) {\n            highestBid = bids[i];\n        }\n    }\n\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\n\n    return 0;\n}\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. Q2: incorrect smallest. The code does not check the third integer for updating the smallest and largest values. You need to repeat the logic used for the second integer for the third integer as well. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20596548",
    "code": "",
    "feedback": "q1:The program correctly prompts for the number of rows and columns and prints a grid of asterisks as expected. However, there is a small issue with variable shadowing in the inner loop. q2:The program correctly computes the sum, average, product, smallest, and largest of three integers based on user input. Ensure that the average calculation uses floating-point division by modifying it to average = sum / 3.0; to retain precision. Consider using a simpler approach to find the smallest and largest numbers. You could initialize smallest and largest with num1 and then update them based on comparisons. q3:The program correctly calculates the total cost based on user input for various product types and applies a discount at the end."
  },
  {
    "student_id": "20714775",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\nint N;\r\n\r\nprintf(\"Enter the size of the array (N >= 5): \");\r\nscanf(\"%d\", &N);\r\nwhile (N < 5) {\r\nprintf(\"Error: Array size must be at least 5. Please enter again: \");\r\nscanf(\"%d\", &N);\r\n}\r\n\r\n    \r\nint *array = (int *)malloc(N * sizeof(int));\r\nif (array == NULL) {\r\nprintf(\" Memory allocation failed. Exiting program.\\n\");\r\nreturn 1;\r\n}\r\n\r\n    \r\nprintf(\"Enter the array elements:\\n\");\r\nfor (int i = 0; i < N; i++) {\r\nprintf(\"Element %d: \", i);\r\nscanf(\"%d\", (array + i)); //to storage deta\r\n}\r\n\r\nint index1, index2;\r\n\r\n   \r\nwhile (1) {\r\nprintf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\nscanf(\"%d %d\", &index1, &index2);\r\n\r\nif (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\nbreak; \r\n} else {\r\nprintf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n}\r\n}\r\nint sum = *(array + index1) + *(array + index2); \r\nprintf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\nfree(array);\r\n\r\nreturn 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NUM_STUDENTS 3   \r\n#define NAME_LENGTH 50   \r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() {\r\nchar names[NUM_STUDENTS][NAME_LENGTH]; // storage the names of the students\r\nfloat marks[NUM_STUDENTS];             // storage the score of the students\r\n\r\n\r\nfor (int i = 0; i < NUM_STUDENTS; i++) {\r\nprintf(\"Enter the name of student %d: \", i + 1);\r\nscanf(\" %[^\\n]\", names[i]); // input thei names\r\nprintf(\"Enter the mark of student %d: \", i + 1);\r\nscanf(\"%f\", &marks[i]);     // input their scores\r\n}\r\n\r\nfloat average = calculateAverage(marks, NUM_STUDENTS);\r\n\r\ndisplayStudentData(names, marks);\r\nprintf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\nreturn 0;\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\nfloat sum = 0.0;\r\nfor (int i = 0; i < count; i++) {\r\nsum += marks[i];\r\n}\r\nreturn sum / count;\r\n}\r\n\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\nprintf(\"Student Names and Marks:\\n\");\r\nfor (int i = 0; i < NUM_STUDENTS; i++) {\r\nprintf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n}\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\nint main(){\r\nint N=0;\r\nconst int minBid =100000;\r\n\r\nprintf(\"Please enter the number of the bids\\n\");\r\nscanf(\"%d\",&N);\r\n\r\n\r\nwhile(N<2){\r\nprintf(\"Nubmer of bids must be at least 2. Please try again\");\r\nscanf(\"%d\",&N);\r\n}\r\n\r\n\r\nint bids[N];\r\nprintf(\"Enter the bids (must be at least $100000 dollars):\\n\");\r\nfor(int i=0; i < N; i=i+1)\r\n{\r\nprintf(\"Bid %d: \",i+1);\r\nscanf(\"%d\",&bids[i]);\r\n\r\n\r\nwhile(bids[i] < minBid){\r\n    printf(\"Error: Bid must be at least $100000 dollars. Please try again\\n\");\r\n    scanf(\"%d\",&bids[i]);\r\n}\r\n}\r\n\r\n\r\nint highestBid = bids[0];\r\nfor (int i = 1; i < N; i++){\r\nif (bids[i] > highestBid) {\r\nhighestBid = bids[i];\r\n}\r\n}\r\n\r\n printf(\"The highest bid is $%d\\n\", highestBid);\r\n return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. Q3: incorrect case 1. there are significant issues with flow control, variable handling, and logic that prevent it from functioning correctly."
  },
  {
    "student_id": "20704944",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n    } while (N < 5);\r\n\r\n  \r\n    int *array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed\\n\");\r\n        return 1;\r\n    }\r\n\r\n\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    int index1, index2;\r\n\r\n  \r\n    while (1) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        \r\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n            break; \r\n        } else {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    }\r\n\r\n   \r\n    int sum = *(array + index1) + *(array + index2);\r\n    \r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    free(array);\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); \r\n        printf(\"Enter the mark of student %d: \", i+1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n \r\n    displayStudentData(names, marks);\r\n    printf(\"\\n\");\r\n    printf(\"Average mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\nint cmp(int array[4]);\r\nint main(){\r\n    int c,d;\r\n    int array[4];\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\",&c);\r\n    while (c<2) {\r\n    printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n    scanf(\"%d\",&c);\r\n    }\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    printf(\"Bid 1: \");\r\n    scanf(\"%d\",&array[0]);\r\n    while (array[0]<100000) {\r\n        printf(\"Error: Bid must be at least $100000. Please try again:\");\r\n        scanf(\"%d\",&array[0]);\r\n        \r\n    }\r\n\r\n    printf(\"Bid 2: \");\r\n    scanf(\"%d\",&array[1]);\r\n    while (array[1]<100000) {\r\n        printf(\"Error: Bid must be at least $100000. Please try again:\");\r\n        scanf(\"%d\",&array[1]);\r\n    }\r\n\r\n    printf(\"Bid 3: \");\r\n    scanf(\"%d\",&array[2]);\r\n    while (array[2]<100000) {\r\n        printf(\"Error: Bid must be at least $100000. Please try again:\");\r\n        scanf(\"%d\",&array[2]);\r\n    }\r\n    int i=cmp(array);\r\n    printf(\"The higest bid is: %d\",i);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\nint cmp(int array[4]){\r\n    int a;\r\n    if(array[0]>array[1]&&array[0]>array[2]){\r\n        a=array[0];\r\n        return a;\r\n    }\r\n    if(array[1]>array[0]&&array[1]>array[2]){\r\n        a=array[1];\r\n        return a;\r\n    }\r\n    if(array[2]>array[1]&&array[2]>array[0]){\r\n        a=array[2];\r\n        return a;\r\n    }    \r\n}",
    "feedback": "q1:Using a struct for rows and columns is unnecessary. Consider using simple integer variables for clarity.\nTypo in Variable Names: The term columes should be corrected to columns to avoid confusion.  q2:The program correctly calculates the sum, average, product, and identifies the smallest and largest numbers.The logic for finding the smallest and largest values could be simplified and made more readable. q3:The program correctly calculates total and final costs based on product type and applies discounts. However, it lacks a loop for continuous input The code is somewhat structured but contains a lot of repeated code for different product types."
  },
  {
    "student_id": "20612641",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#define SIZE 100\r\n\r\nint main() {\r\n\r\n    int arr[SIZE];\r\n    int *ptr;\r\n    int size;\r\n    int index1, index2;\r\n    int sum = index1+index2;\r\n\r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &size);\r\n\r\n    if (size==5 | size<5){\r\n        printf(\"the number should be equal or more than 5. try again.\\n\");\r\n        return main();\r\n    }\r\n\r\n    printf(\"Enter the array elements: \\n\");\r\n    for (int i=0;i<size;++i){\r\n        printf(\"Element %d: \",i+1);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    printf(\"Enter the indices of the two elements (0 <= index, index2 < %d): \",size);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n\r\n    int *ptr1 = index1;\r\n    int *ptr2 = index2;\r\n\r\n    if (0 <= ptr1 && ptr2<size){\r\n        printf(\"The sum of the two values at indices %d and %d is: %d\",index1,index2,index1+index2);\r\n    } else {\r\n        printf(\"the number should be equal or more than 5. try again.\\n\");\r\n        return main();\r\n    }\r\n\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define SIZE 3\r\n\r\nint main() {\r\n\r\n    double calculateAverage(double mark1, double mark2, double mark3){\r\n    double average = (mark1+mark2+mark3)/3;\r\n    return average;\r\n}\r\n\r\n    char name[SIZE];\r\n    float mark[SIZE];\r\n    char name1, name2, name3;\r\n    double mark1, mark2, mark3;\r\n\r\n\r\n        printf(\"Enter the name of student 1: \");\r\n        scanf(\" %[^\\n]\", &name1);\r\n        printf(\"Enter the mark of student 1: \");\r\n        scanf(\"%f\",&mark1);\r\n        printf(\"Enter the name of student 2: \");\r\n        scanf(\" %[^\\n]\", &name2);\r\n        printf(\"Enter the mark of student 2: \");\r\n        scanf(\"%f\",&mark2);\r\n        printf(\"Enter the name of student 3: \");\r\n        scanf(\" %[^\\n]\", &name3);\r\n        printf(\"Enter the mark of student 3: \");\r\n        scanf(\"%f\",&mark3);\r\n\r\n        printf(\"Students names and marks: \");\r\n        printf(\"Student 1: %.2f\",mark1);\r\n        printf(\"Student 2 %.2f\",mark2);\r\n        printf(\"Student 3: %.2f\",mark3);\r\n\r\n\r\n        printf(\"Average mark: \",calculateAverage(mark1,mark2,mark3));\r\n\r\n\r\n\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#define SIZE 100\r\n#define minBid 100000\r\n\r\nint main() {\r\n\r\n    int bids[SIZE];\r\n    int bidsNum;\r\n    int max;\r\n\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &bidsNum);\r\n\r\n    while (bidsNum<2){\r\n        printf(\"Error. Number of bids must be at least 2. Please try again.\\n\");\r\n        return main();\r\n    }\r\n\r\n    printf(\"Enter the bids (Must be at least $100000): \\n\");\r\n    for (int i=0;i<bidsNum;++i){\r\n        printf(\"Bid %d: \",i+1);\r\n        scanf(\"%d\", bids[i]);\r\n        if (bids>bidsNum){\r\n        printf(\"Bid must be at least $100000. please try again. try again: \");\r\n            continue;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n\r\n    for (int i = 0; i < bidsNum; i++) {\r\n        if (bids[i] > max) max = bids[i];\r\n        printf(\"The highest bid is: $%d\",max);\r\n    }\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. Q3: The calculation of TotalPrice and the way discounts are applied are incorrect."
  },
  {
    "student_id": "20705220",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\r\n#define SIZE 100\r\n\r\n\r\nint main(){\r\n\r\n    int arraySize =0;\r\n    int array[SIZE];\r\n    int index1 =0;\r\n    int index2 =0;\r\n    int sum =0;\r\n    int *aPTr =&index1;\r\n    int *bPTr =&index2;\r\n\r\n    printf(\"Enter the size of array (N>=5): \\n\");\r\n    scanf(\"%d\", &arraySize);\r\n\r\n    while(arraySize <5){\r\n        printf(\"Size of array must be (N>=5).\\n\");\r\n    }\r\n\r\n    printf(\"Enter the array elements: \");\r\n    for(int i=0; i< arraySize; i++){\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    printf(\"Enter the indices of two elements (0 <= index1, index2 < %d): \", arraySize);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n\r\n    while(index1< 0 && index2>arraySize){\r\n        printf(\"Indices must be within the range of the array elements. Please try again.\");\r\n        break;\r\n    }\r\n\r\n\r\n    printf(\"The sum of the two values at indices %d and %d is: %d.\\n\", index1, index2, sum);\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n/* --- q2.c --- */\n#include <stdio.h>\r\n\r\n#define STUDENTNUM 3\r\n#define NAMELENGTH 50\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float mark[], int count);\r\nvoid displayStudentData(const char name[][NAMELENGTH], const float mark[], int count);\r\n\r\nint main() {\r\n    char name[STUDENTNUM][NAMELENGTH];\r\n    float mark[STUDENTNUM];\r\n\r\n    \r\n    for (int i = 0; i < STUDENTNUM; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", name[i]); \r\n        printf(\"Enter the mark for student %d: \", i + 1);\r\n        scanf(\"%f\", &mark[i]); \r\n    }\r\n\r\n    \r\n    float average = calculateAverage(mark, STUDENTNUM);\r\n\r\n    displayStudentData(name, mark, STUDENTNUM);\r\n\r\n    printf(\"\\n\");\r\n\r\n    printf(\"Average mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\nfloat calculateAverage(const float mark[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += mark[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displayStudentData(const char name[][NAMELENGTH], const float mark[], int count) {\r\n    printf(\"Student's Name and Mark:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", name[i], mark[i]);\r\n    }\r\n}\r\n\n/* --- q3.c --- */\n#include <stdio.h>\r\n\r\n#define BIDSSIZE 100\r\n\r\nint main() {\r\n    int numberofBids;\r\n    float bids[BIDSSIZE]; \r\n    float highestBid = 0.0;\r\n\r\n\r\n    printf(\"Enter the number of bids (N >= 2): \");\r\n    scanf(\"%d\", &numberofBids);\r\n\r\n    if (numberofBids < 2) {\r\n        printf(\"Number of bids must be at least 2.\\n\");\r\n        return 0;\r\n    }\r\n\r\n\r\n    printf(\"Enter the bids (each bid must be at least $100000):\\n\");\r\n    for (int i = 0; i < numberofBids; i++) {\r\n        while (1) {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%f\", &bids[i]);\r\n            if (bids[i] >= 100000.0) {\r\n                break; \r\n            } else {\r\n                printf(\"Bid must be at least $100000. Please try again.\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    highestBid = bids[0]; \r\n    for (int i = 1; i < numberofBids; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n\n/* --- ErynCheeEnNing_20705220/q1.c --- */\n#include <stdio.h>\r\n#define SIZE 100\r\n\r\n\r\nint main(){\r\n\r\n    int arraySize =0;\r\n    int array[SIZE];\r\n    int index1 =0;\r\n    int index2 =0;\r\n    int sum =0;\r\n    int *aPTr =&index1;\r\n    int *bPTr =&index2;\r\n\r\n    printf(\"Enter the size of array (N>=5): \\n\");\r\n    scanf(\"%d\", &arraySize);\r\n\r\n    while(arraySize <5){\r\n        printf(\"Size of array must be (N>=5).\\n\");\r\n    }\r\n\r\n    printf(\"Enter the array elements: \");\r\n    for(int i=0; i< arraySize; i++){\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    printf(\"Enter the indices of two elements (0 <= index1, index2 < %d): \", arraySize);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n\r\n    while(index1< 0 && index2>arraySize){\r\n        printf(\"Indices must be within the range of the array elements. Please try again.\");\r\n        break;\r\n    }\r\n\r\n\r\n    printf(\"The sum of the two values at indices %d and %d is: %d.\\n\", index1, index2, sum);\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n/* --- ErynCheeEnNing_20705220/q2.c --- */\n#include <stdio.h>\r\n\r\n#define STUDENTNUM 3\r\n#define NAMELENGTH 50\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float mark[], int count);\r\nvoid displayStudentData(const char name[][NAMELENGTH], const float mark[], int count);\r\n\r\nint main() {\r\n    char name[STUDENTNUM][NAMELENGTH];\r\n    float mark[STUDENTNUM];\r\n\r\n    \r\n    for (int i = 0; i < STUDENTNUM; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", name[i]); \r\n        printf(\"Enter the mark for student %d: \", i + 1);\r\n        scanf(\"%f\", &mark[i]); \r\n    }\r\n\r\n    \r\n    float average = calculateAverage(mark, STUDENTNUM);\r\n\r\n    displayStudentData(name, mark, STUDENTNUM);\r\n\r\n    printf(\"\\n\");\r\n\r\n    printf(\"Average mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\nfloat calculateAverage(const float mark[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += mark[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displayStudentData(const char name[][NAMELENGTH], const float mark[], int count) {\r\n    printf(\"Student's Name and Mark:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", name[i], mark[i]);\r\n    }\r\n}\r\n\n/* --- ErynCheeEnNing_20705220/q3.c --- */\n#include <stdio.h>\r\n\r\n#define BIDSSIZE 100\r\n\r\nint main() {\r\n    int numberofBids;\r\n    float bids[BIDSSIZE]; \r\n    float highestBid = 0.0;\r\n\r\n\r\n    printf(\"Enter the number of bids (N >= 2): \");\r\n    scanf(\"%d\", &numberofBids);\r\n\r\n    if (numberofBids < 2) {\r\n        printf(\"Number of bids must be at least 2.\\n\");\r\n        return 0;\r\n    }\r\n\r\n\r\n    printf(\"Enter the bids (each bid must be at least $100000):\\n\");\r\n    for (int i = 0; i < numberofBids; i++) {\r\n        while (1) {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%f\", &bids[i]);\r\n            if (bids[i] >= 100000.0) {\r\n                break; \r\n            } else {\r\n                printf(\"Bid must be at least $100000. Please try again.\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    highestBid = bids[0]; \r\n    for (int i = 1; i < numberofBids; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print a grid of asterisks based on that input. The logic is sound and produces the expected output. q2:The program correctly prompts the user for three integers and uses functions to determine the smallest and largest of the three. The calculations for the sum, average, and product are all correctly implemented. q3: The program effectively implements a menu-driven system that allows users to enter product details based on a product code, calculate total costs, and apply discounts.The logic for calculating costs is repeated for fruits and vegetables, as well as for dairy products and canned goods. This could be refactored into a function to reduce redundancy."
  },
  {
    "student_id": "20612918",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main(){\r\n    int N, indices1, indices2;\r\n    int arr[N];\r\n    int *p;\r\n    \r\n    //pointer to array\r\n    p = arr;\r\n     printf(\"Enter the size of the array (N>=5): \");\r\n    scanf(\"%d\", &N);\r\n    if (N<5){\r\n        printf(\"Size of the array has to be more than 5. Enter the size again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    //inputting the elements in the array\r\n    printf(\"Enter the array elements: \\n\");\r\n    for(int i=0; i<N; i++){\r\n        for(int i=0; i<N; i++){\r\n            printf(\"Element %d: \", i);\r\n            scanf(\"%d\", p);\r\n            p++;\r\n    }\r\n    \r\n\r\n\r\n    while(1){\r\n        //prommpting user the index of elements to be summed\r\n        printf(\"Enter the indices of the two elements (0<= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &indices1, &indices2);\r\n\r\n        //checking if the indices are in between the range of elements in the array\r\n        if ((indices1>=0 && indices1<N) && (indices2>=0 && indices2<N)){\r\n            break;\r\n        } else{\r\n            //display error message if not\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\");\r\n        }\r\n    }\r\n\r\n    //calculating sum  of elements at the indices chosen\r\n    int sum = arr[indices1] + arr[indices2];\r\n\r\n    printf(\"The sum of values at indices %d and %d is: %d\", indices1, indices2, sum);\r\n\r\n    return 0;\r\n}\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH  50\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main(){\r\n    int count = 3; \r\n    char names[count][NAME_LENGTH];\r\n    float marks[count];\r\n\r\n    //loop to enter name and mark of student\r\n    for (int i=0; i<3; i++){\r\n        printf(\"Enter the name of student %d: \", i+1);\r\n        scanf(\"%s[^\\n]\", &names[i]);\r\n        printf(\"Enter the mark of student %d: \", i+1);\r\n        scanf(\"%f[^\\n]\", &marks[i]);\r\n    }\r\n\r\n    //call display function\r\n    displayStudentData(names, marks,count);\r\n\r\n    \r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count){\r\n    float sum = 0;\r\n    //loop to count sum of marks\r\n    for (int i=0; i<count; i++){\r\n        sum += marks[i];\r\n    }\r\n    // calculating verage\r\n    return sum/count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count){\r\n    for(int i=0; i<count; i++){\r\n        printf(\"\\n%s: %.2f\", names[i], marks[i]); //displaying each name and marks\r\n    }\r\n\r\n    printf(\"\\nAverage Mark: %.2f\",  calculateAverage(marks, count)); //displaying average\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main(){\r\n    int N;\r\n    int value[N];\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    //to check if bids are more than or equal 2, error message if not\r\n    if (N<2){\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n\r\n    // loop to input bid money\r\n    for(int i=0; i<N; i++){\r\n        printf(\"Bid %d: \", i+1);\r\n        scanf(\"%d\", &value[i]);\r\n\r\n        // check if bid money is too little\r\n        if (value[i]<100000){\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &value[i]);\r\n        }\r\n    }\r\n\r\n    //for loop to find the highest bid\r\n    int  highest = 0;\r\n    for(int i=0; i<N; i++){\r\n        if (highest < value[i]){\r\n            highest = value[i];\r\n        }\r\n    }\r\n\r\n    //displaying the highest bid\r\n    printf(\"The highest bid is: $%d\", highest);\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks based on user-defined rows and columns. The nested loops function as intended, producing the expected output. q2: The program correctly calculates the sum, average, product, smallest, and largest of three integers. However, the average calculation uses integer division, which can lead to loss of precision. q3:The code successfully performs calculations for different products and applies discounts, but you need to ensure that totalCost is initialized properly before it is used. and consider moving the discount calculation into the main loop"
  },
  {
    "student_id": "20700664",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(){\n    int arrNum = 5;\n    int element, index1, index2;\n    int array[arrNum];\n    int sum;\n    int *ptr=(int*)malloc(arrNum*sizeof(int));\n\n    printf(\"Enter the size of the array(N>=5):\"); //enter the size of array\n    scanf(\"%d\", &arrNum);\n    printf(\"Enter the array elements:\\n\");//enter elements\n    for(int i=0;i<arrNum;i++){\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", &element);\n        array[i]= element;\n    }\n    \n    //calculate the sum\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", arrNum);\n    scanf(\"%d %d\", &index1, &index2);\n    if(index1<0 || index2>=arrNum){\n        printf(\"Error.Please try again.\");\n    }\n    else{\n        for(int i=index1; i<=index2;i++){\n            sum += array[i];\n        } \n        printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n    }\n    free(ptr);\n    return 0;\n}\n/* --- Q2.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define stuNum 3\n#define NAME_LENGTH 50\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]); // NAME_LENGTH 50 \n\nint main(){\n    const char names[stuNum][NAME_LENGTH];\n    const float marks[stuNum];\n    int count;\n    \n\n    for(int i=0; i<stuNum;i++){\n        printf(\"Enter the name of student %d:\", i);\n        scanf(\" %[^\\n]\", names[i][i]);\n        printf(\"Enter the mark of student %d: \", i);\n        scanf(\"%f\", marks[i]);\n    }\n    \n    displayStudentData;\n    calculateAverage;\n    printf(\"Average Mark: %f\", calculateAverage);\n    return 0;\n}\n\nfloat calculateAverage(const float marks[], int count){\n    float *average;\n    int i;\n    for(i=0; i<count; i++){\n        *average += marks[i];\n    }\n    *average /= count;\n    return *average;\n}\n\nvoid displayStudentData(const char names[stuNum][NAME_LENGTH], const float marks[]){\n    printf(\"Students Names and Marks:\");\n    for(int i=0; i<stuNum; i++){\n        printf(\"%c: %f\",names[i][i], marks[i]);\n    }\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main(){\n    int N, price, max;\n    int array[100];\n\n    printf(\"Enter the number of bids: \");//number of bids \n    scanf(\"%d\", &N);\n    while(N<2){                          //if number is less than 2, try again\n        printf(\"Number of bids must be at least 2.\");\n        printf(\"Please try again: \");\n        scanf(\"%d\", &N);\n    }\n    printf(\"Enter the bids (must be at least $100000): \");//enter the bids\n    for(int i=0; i<N; i++){\n        printf(\"Bid %d: \", N);\n        scanf(\"%d\", &price);\n        while(price<100000){                              //if the price is less than 100000, try again\n            printf(\"Bid must be at least $100000.\");\n            printf(\"Plaese try again: \");\n            scanf(\"%d\", &price);\n        }\n        array[i]= price;\n    }\n\n    max= array[0];\n    for(int i=0; i<N; i++){         //compare\n        if(array[i]>max){\n            max=array[i];\n        }\n    }\n    printf(\"The highest bid is: $%d\\n\", max);\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. Q3: incorrect case 3. In the case 3 and case 4 sections, you are still prompting for \"weight of fruits\" and using \"fruits\" in the output, which should be corrected to \"Dairy Products\" and \"Canned Goods\" respectively.In the output for the final cost, there is a typo: the format specifier should be %.2f instead of $.2%f."
  },
  {
    "student_id": "20618167",
    "code": "\n/* --- LAB 2 A.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(void) {\r\n    int N, *array, index1, index2, sum;\r\n\r\n    //Prompt user to enter the size of the array\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Invalid input. Please enter a value >= 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    //allocate memory for the array\r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //Prompt user to enter each element of the array\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (array + i)); \r\n    }\r\n\r\n    //Prompt user to enter two index and validate them\r\n    while (1) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n            break;\r\n        } else {\r\n            printf(\"Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    }\r\n\r\n    //Calculate the sum of the values \r\n    sum = *(array + index1) + *(array + index2);\r\n\r\n    //Print the output\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n}\r\n\n/* --- LAB 2 B.c --- */\n#include <stdio.h>\r\n\r\n#define NAME 50\r\n#define TOTALSTD 3\r\n\r\nfloat calAverage(const float mark[], int count);\r\nvoid disData(const char name[][NAME], const float mark[], int count);\r\n\r\nint main(void) {\r\n    char name[TOTALSTD][NAME];\r\n    float mark[TOTALSTD];\r\n    int i;\r\n\r\n    //Input names and marks\r\n    for (i = 0; i < TOTALSTD ; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", name[i]); // Read name with spaces\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &mark[i]);    // Read mark\r\n    }\r\n\r\n    //Calculate and display the average mark\r\n    float average = calAverage(mark,TOTALSTD);\r\n\r\n    //Display data\r\n    disData(name, mark,TOTALSTD);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n}\r\n\r\n//Function to calculate the average mark\r\nfloat calAverage(const float mark[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += mark[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n//Function to display names and marks\r\nvoid disData(const char name[][NAME], const float mark[], int count) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", name[i], mark[i]);\r\n    }\r\n}\r\n\n/* --- LAB 2 C.c --- */\n#include <stdio.h>\r\n\r\nint main(void) {\r\n    int N, i;\r\n    double highbid = 0;\r\n\r\n    //Input number of bids \r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    while (N < 2) {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    //Array to store the bids\r\n    double bids[N];\r\n\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n\r\n    for (i = 0; i < N; i++) {\r\n        double bid;\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%lf\", &bid);\r\n\r\n        //Validate each bid\r\n        while (bid < 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%lf\", &bid);\r\n        }\r\n\r\n        bids[i] = bid;\r\n\r\n        //highest bid\r\n        if (bid > highbid) {\r\n            highbid = bid;\r\n        }\r\n    }\r\n\r\n    //Output the highest bid\r\n    printf(\"The highest bid is: $%.0lf\\n\", highbid);\r\n\r\n}\r\n",
    "feedback": "q1: Output is not correct and some syntax errors. q2:The program is designed to take three integers as input and compute their sum, average, product, smallest, and largest values. The average is calculated using integer division. This can lead to incorrect results if the sum is not perfectly divisible by three. To get a more accurate average, consider using a floating-point variable for the average q3:The program is designed to calculate the cost of a product based on its weight, price per kilogram, and any applicable discount."
  },
  {
    "student_id": "20506128",
    "code": "\n/* --- LA2Q1.c --- */\n#include <stdio.h>\r\nint main(void){\r\n\r\n    printf(\"Please enter the size of the array (greater than or equal to 5) : \");\r\n    int arrsize;\r\n    scanf(\"%d\",&arrsize);\r\n\r\n    if (arrsize<5){\r\n        printf(\"Please enter a value equal to or greater than 5\");\r\n    }\r\n\r\n    else {\r\n        int arr[arrsize];\r\n        int *arrptr=arr;\r\n\r\n        for(int i=0;i<arrsize;++i){\r\n            printf(\"Enter element %d:\\n\",i);\r\n            scanf(\"%d\\n\",(arrptr+i));\r\n        }\r\n\r\n        printf(\"Enter indices of two elements: \");\r\n        int in1;\r\n        int in2;\r\n        scanf(\"%d\" \"%d\",&in1,&in2);\r\n        \r\n        if (in1<0 || in2>arrsize-1) {\r\n            printf(\"Please enter indices within the array bounds\");\r\n        }\r\n        \r\n        else {\r\n            int sum=*(arrptr+in1)+*(arrptr+in2);\r\n            printf(\"The sum of the elements in those indices is %d.\",sum);\r\n        }\r\n    }\r\n}\r\n\n/* --- LA2Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 100\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i=0;i<=count;i++) {\r\n        sum += marks[i];\r\n    }\r\n    float avg = sum/count;\r\n    return avg;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    for (int i=0;i<100;i++) {\r\n        printf(\"%s\",names[i]);\r\n    }\r\n}\r\n\r\nint main(void){\r\n\r\n    char names[NAME_LENGTH];\r\n    char *namesptr=names;\r\n    float marks[4]={};\r\n    float *markptr=marks;\r\n    int count=3;\r\n\r\n    puts(\"Please enter name of student 1: \");\r\n    scanf(\"%s\", names);\r\n    puts(\"\\nPlease enter mark of student 1: \");\r\n    scanf(\"%f\", markptr+0);\r\n    puts(\"\\nPlease enter name of student 2: \");\r\n    scanf(\"%s\", names+30);\r\n    puts(\"\\nPlease enter mark of student 2: \");\r\n    scanf(\"%f\", markptr+1);\r\n    puts(\"\\nPlease enter name of student 3: \");\r\n    scanf(\"%s\", names+60);\r\n    puts(\"\\nPlease enter mark of student 3: \");\r\n    scanf(\"%f\", markptr+2);\r\n\r\n    printf(\"\\nThe average of the students' marks is %.2f\", calculateAverage(marks, count));\r\n\r\n    displayStudentData(names, marks);\r\n\r\n}\n/* --- LA2Q3.c --- */\n#include <stdio.h>\r\n\r\nint main(void) {\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    int nobids;\r\n    scanf(\"%d\", &nobids);\r\n\r\n    if (nobids<2) {\r\n        printf(\"The number of bids must be at least 2\");\r\n    }\r\n\r\n    else {\r\n\r\n        int bids[nobids];\r\n        int *bidsptr=bids;\r\n\r\n        for (int i=0;i<=nobids;i++) {\r\n            printf(\"Enter Bid %d: \", i+1);\r\n            scanf(\"%d\", bidsptr+i);\r\n        }\r\n\r\n        int highest=0;\r\n\r\n        for (int c=0;c<=nobids;c++) {\r\n            if (bids[c]>bids[c+1]) {\r\n                highest=bids[c];\r\n            }\r\n            else {\r\n                continue;\r\n            }\r\n        }\r\n        printf(\"%d\", highest);\r\n    }\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20613019",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N, *array, index1, index2, valid = 0;\r\n    \r\n    //Enter size of the array\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"The size of the array must be at least 5. Please try again.\\n\");\r\n        }\r\n    } while (N < 5);\r\n    \r\n    //Dynamically allocate memory for the array \r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //Enter elements of the array \r\n    printf(\"Enter %d elements for the array:\\n\", N);\r\n    \r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (array + i));\r\n    }\r\n\r\n    //Enter the two indices and validate\r\n    do {\r\n        printf(\"Enter the first index (0 <= index < %d): \", N);\r\n        scanf(\"%d\", &index1);\r\n        printf(\"Enter the second index (0 <= index < %d): \", N);\r\n        scanf(\"%d\", &index2);\r\n        \r\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n            valid = 1; \r\n        } else {\r\n            printf(\"Invalid indices. Please enter indices within the range 0 to %d.\\n\", N - 1);\r\n        }\r\n    } while (!valid);\r\n\r\n    //Compute the sum \r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    //Sum \r\n    printf(\"The sum of elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define STUDENT_COUNT 3\r\n#define NAME_LENGTH 50\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n    int i;\r\n\r\n    //Enter names and marks\r\n    for (i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of student %d: \", i + 1); \r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n    \r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    // Display data and average \r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"Average mark: %.2f\\n\", average);\r\n    return 0;\r\n}\r\n\r\n// Function to calculate average\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display data\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Names and marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MIN_BID 100000\r\n\r\nint main() {\r\n    int N;\r\n    \r\n    //Enter number of bids\r\n    do{\r\n        printf(\"Enter the number of bids (minimum 2):\");\r\n        scanf(\"%d\",&N);\r\n        if (N < 2) {\r\n        printf(\"Error! The number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n    } while (N < 2);\r\n\r\n    int bids[N];\r\n    int highestBid = 0;\r\n\r\n    // Input bids and validate each bid\r\n    for (int i = 0; i < N; i++) {\r\n        int bid;\r\n        do {\r\n            printf(\"Enter bid %d (minimum $%d): \", i + 1, MIN_BID);\r\n            scanf(\"%d\", &bid);\r\n            if (bid < MIN_BID) {\r\n                printf(\"Invalid bid. Please enter a bid of at least $%d.\\n\", MIN_BID);\r\n            }\r\n        } while (bid < MIN_BID);\r\n\r\n        // Store the valid bid\r\n        bids[i] = bid;\r\n\r\n        // Update the highest\r\n        if (bid > highestBid) {\r\n            highestBid = bid;\r\n        }\r\n    }\r\n\r\n    // Display the highest\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program calculates the total cost of various grocery items based on user input and applies a discount correctly.Incorrect Discount Calculation: The final cost calculation assumes that the discount is a flat amount deducted from the total cost, rather than a percentage reduction."
  },
  {
    "student_id": "20712242",
    "code": "\n/* --- q1.c --- */\n// c program array on integers and two target indices of the two elements in array from user. \r\n\r\n#include <stdio.h>\r\n\r\nint main(){\r\n\r\n// ask for user input \r\n\r\nint n;\r\n\r\nprintf(\"Enter the size of the array ( N >= 5): \");\r\n\r\nwhile (1){\r\n      scanf(\"%d\", &n);  \r\n      if( n >= 5){\r\n    break;                         //read userinput where n has to be greater or equal to 5\r\n   }\r\n}\r\n\r\n//get those n integers in array by the user by using for loop \r\n\r\nint arr[n];\r\nprintf(\"Enter the array elements: \\n\", n);\r\nfor(int i =0; i < n; i++){\r\n    printf(\"Element %d: \", i );\r\n    scanf(\"%d\", &arr[i]);\r\n}\r\n\r\n// user user for indices of the two elements required. \r\n\r\nint index1;\r\nint index2;\r\n\r\nwhile (1){\r\nprintf(\"Enter the indices of the two elements (0 <= index1, index2 < 6): \");\r\nscanf(\"%d %d\", &index1, &index2);\r\nif( index1 >=0 && index1 < n || index2 >=0 && index2 < n){\r\n    break;\r\n}\r\nprintf(\"Error: Inidces must be wihtin the range of the array elements. Please try again.\");     //display error message if values are outside range \r\n}\r\n\r\n// sum\r\n\r\nint sum= arr[index1]  + arr[index2]; //add the two indexes \r\n\r\n//display the answer\r\nprintf(\"The sum of the values at indices 4 and 5 is: %d\", sum);\r\nreturn 0;\r\n}\r\n\n/* --- q2.c --- */\n// c program that prompts userinput for studetn name and marks \r\n\r\n#include <stdio.h>\r\n#define n 3 // number of students \r\n#define l 50 // the length of string\r\n\r\n\r\n\r\n//function prototypes declared\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][l], const float marks[], int count);\r\n\r\n//functions that will carry out the required calculations, first average\r\nfloat calculateAverage(const float marks[], int count){\r\nfloat sum =0;\r\nfor(int i=0; i < count; i++){\r\nsum+=marks[i];                // this will add all the marks together\r\n}\r\nreturn sum / count;            //since sum already declared as float, this will calculate average in float.\r\n}\r\n\r\n// display the stored data\r\nvoid displayStudentData(const char names[][l], const float marks[], int count){\r\n\r\nprintf(\"\\nStudent Names and Marks:\");   //print on new line\r\n\r\nfor( int i=0; i < count; i++ ){\r\n    printf(\"%s: %.2f\", names[i], marks[i]);     //print the names and marks that are stored\r\n}\r\n}  \r\n\r\n\r\nint main(){\r\n//declare the variables \r\nchar names[n][l];\r\nfloat marks[n]; \r\n\r\n//userinput for name and marks\r\nfor( int i =0; i < n; i++){ \r\n    printf(\"Enter the name of student %d: \", i+1);\r\n     getchar();\r\n    scanf(\"%[^\\n]\", names[i]);\r\n\r\n    printf(\"Enter the mark of student %d: \", i +1);\r\n    scanf(\"%.2f\", &marks[i]); // this will read the marks entered by user \r\n   \r\n}\r\n\r\n\r\n//call the functions to perform their tasks\r\n\r\nfloat average = calculateAverage(marks, n);   //create formula to calculate avg\r\n\r\n// display the result\r\ndisplayStudentData(names, marks, n);\r\nprintf(\"Average mark: %.2f\", average);\r\nreturn 0;\r\n}\r\n\r\n\n/* --- q3.c --- */\n// highets bidder c program \r\n\r\n#include <stdio.h>\r\n#define minimumBid 100000\r\n\r\n\r\nint main(){\r\n\r\n//ask user for the number of birds to put:\r\n\r\nint n;                                    //declare n \r\nprintf(\"Enter the number of birds: \"); \r\n\r\n   //use a whie loop to check the conditions\r\n   while (1){\r\n      scanf(\"%d\", &n);  \r\n      if( n >= 2){\r\n    break;                         //read userinput where n has to be greater or equal to 2\r\n   }\r\n\r\n //otherwise print error message\r\n\r\n printf(\"Number of bids must be at least 2. Please try again: \");\r\n}\r\n\r\n\r\n// display the bids\r\nfloat bid[n];   //array to store the bird bids\r\nprintf(\"Enter the bids (must be at least $100000): \\n\");\r\n\r\nfor( int i =1; i < n; i++){\r\n    printf(\"Bid %d: \", i);\r\n    while (1) {\r\n    scanf(\"%f\", &bid[i]);            //while we keep taking userinput check conditions\r\n    if( bid[i] >= minimumBid){\r\n        break;\r\n        }\r\n        printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n    }  \r\n    }\r\n\r\n//highets bid \r\nfloat highestBid= bid[0];\r\nfor( int i =0; i < n; i++){\r\n    if( bid[i]> highestBid){\r\n        highestBid= bid[i];           //set bid[i] is highest if it is higher than the previous one\r\n    }\r\n    }\r\n\r\n// display the highest bid \r\n\r\nprintf(\" The highest bid is: %.2f\", highestBid);\r\nreturn 0;\r\n}\r\n\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program aims to take three integers as input and calculate their sum, average, product, smallest, and largest values. The overall logic is mostly correct, but there are some  issues in the implementation of the smallest and largest value calculations. The way the smallest number is calculated is not optimal. It does not correctly determine the smallest number across all three integers. Instead of printing the smallest directly within the conditions, it would be better to set smallest to the correct value q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20706838",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h> // To allocate the dynamic memory\n\nint main() {\n    int N;   // Size of the array\n    int *array;   // Pointer to hold the dynamically allocated array\n    int index1;\n    int index2; // Indices of the elements to sum\n\n    // Prompt the user to enter the size of the array\n    printf(\"Enter the size of the array (N >= 5): \");\n    scanf(\"%d\", &N);\n\n    // Validate that N is at least 5\n    while (N < 5) {\n        printf(\"Error: Size of the array must be at least 5.\\n\");\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n    }\n\n    // Dynamically allocate memory for the array\n    array = (int *)malloc(N * sizeof(int));\n    if (array == NULL) {  // Check if memory allocation is good\n        printf(\"Error: Memory allocation failed.\\n\");\n        return 1;\n    }\n\n    // Prompt the user to enter each elements of the array\n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (array + i)); // Use pointer arithmetic to store the elements\n    }\n\n    // Prompt the user to enter the two indices\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n    scanf(\"%d %d\", &index1, &index2);\n\n    // Validate the indices\n    while (index1 < 0 || index2 < 0 || index1 >= N || index2 >= N) {\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n    }\n\n    // Calculate the sum using pointers\n    int sum = *(array + index1) + *(array + index2);\n\n    // Print the result\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    // Free the allocated memory\n    free(array);\n\n    return 0;\n}\n/* --- Q2.c --- */\n#include <stdio.h>\n\n#define STUDENT_COUNT 3    // Number of students to be entered\n#define NAME_LENGTH 50     // Maximum length of each student's name\n\n// Function to calculate the average marks\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n// Function to display student names, marks, and the average mark\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\nint main() {\n    char names[STUDENT_COUNT][NAME_LENGTH];  // Array to store the names of students \n    float marks[STUDENT_COUNT];             // Array to store the marks of students\n    // Input the student names and marks\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);  // Read full name including spaces\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);  // Read the mark\n    }\n\n    // Display the student names and marks\n    displayStudentData(names, marks);\n\n    // To calculate and display the average mark\n    float average = calculateAverage(marks, STUDENT_COUNT);\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main() {\n    int n;\n    int i;\n    \n    //Get the number of bids\n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &n);\n\n    if (n < 2) {\n        printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\n        return 0;\n    }\n\n    int bids[n];\n    printf(\"Enter the bids(must be at least $100000):\\n\");\n    for (i = 0; i < n; i++) {\n        printf(\"Bid %d: \", i + 1);\n        scanf(\"%d\", &bids[i]);\n\n        // Validate each bid to ensure it is >= $100 000\n        while (bids[i] < 100000) {\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\n            scanf(\"%d\", &bids[i]);\n        }\n    }\n\n    // To find the highest bid\n    int highestBid = bids[0];\n    for (i = 1; i < n; i++) {\n        if (bids[i] > highestBid) {\n            highestBid = bids[i];\n        }\n    }\n\n    // Print  the highest bid\n    printf(\"The highest bid is: $%d\\n\", highestBid);\n\n    return 0;\n}\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20595191",
    "code": "\n/* --- Q1.c --- */\n#include<stdio.h>\r\nint main(){\r\n    int n, index1,index2;\r\n    printf(\"Enter the size of the array (N>=5): \");\r\n    scanf(\"%d\", &n);\r\n    int arr[n];\r\n    printf(\"Enter the elements of the array :\\n \");\r\n    for(int i=0 ;i < n ;i++){\r\n        printf(\"Element %d : \", i);\r\n        scanf(\"%d\", &arr[n]);\r\n    }\r\n    printf(\"enter the two indices of the two elements (0<= index1, index2<%d):\",n);\r\n    scanf(\"%d %d\", index1, index2);\r\n    int *one=arr+index1;\r\n    int *two=arr+index2;\r\n    int sum=0;\r\n    sum = one + two;\r\n    printf(\"the sum of values of indices %d and %d is %d\", index1,index2,sum);\r\n       \r\n    \r\n    \r\n}\r\n    \n/* --- Q2.c --- */\n#include<stdio.h>\r\nint main(){\r\n    float m1,m2,m3;\r\n    char n1,n2,n3;\r\n    printf(\"enter name of student 1: \");\r\n    scanf(\"%s\", &n1);\r\n    printf(\"enter the mark for student 1: \");\r\n    scanf(\"%f\", &m1);\r\n    printf(\"enter name of student 1: \");\r\n    scanf(\"%s\", &n2);\r\n    printf(\"enter the mark for student 1: \");\r\n    scanf(\"%f\", &m2);\r\n    printf(\"enter name of student 1: \");\r\n    scanf(\"%s\", &n3);\r\n    printf(\"enter the mark for student 1: \");\r\n    scanf(\"%f\", &m3);\r\n    printf(\"students names and marks:\\n\");\r\n    printf(\"%s : %f\", n1,m1);\r\n    printf(\"%s : %f\", n2,m2);\r\n    printf(\"%s : %f\", n3,m3);\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n#define SIZE 80\n#define minBid 100000\n\nint main() {\n\n    int bids[SIZE];\n    int bn;\n    int max;\n\n\n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &bn);\n\n    while (bn<2){\n        printf(\"Error. Number of bids must be at least 2. Please try again.\\n\");\n        return main();\n    }\n\n    printf(\"Enter the bids (Must be at least $100000): \\n\");\n    for (int i=0;i<bn;++i){\n        printf(\"Bid %d: \",i+1);\n        scanf(\"%d\", bids[i]);\n        printf(\"Bid must be at least $100000. please try again. try again: \");\n            continue;\n    }\n\n    return 0;\n\n}",
    "feedback": "q1:The program successfully prompts the user for the number of rows and columns and prints a grid of asterisks (*). The outer loop iterates through the rows, while the inner loop iterates through the columns, which is appropriate.The variable i is reused in both the outer and inner loops, which can lead to confusion and potential logical errors.  q2:The program correctly prompts the user for three integers, calculates their sum, average, product, and determines the smallest and largest values. The logic is sound, and it produces the expected results.The average is computed as an integer, which can lead to truncation if the sum is not divisible by 3. Using float for average calculation would provide a more accurate result. The logic for determining the smallest and largest values can be simplified. Instead of multiple if statements, using else if can make the code cleaner q3:The program correctly implements a menu-driven interface to allow users to enter product types and calculate costs based on weight/quantity and price, along with applying a discount. The discount calculation formula is incorrect. Instead of subtracting the discount percentage from the price directly, you should calculate the amount to subtract based on the price"
  },
  {
    "student_id": "20706721",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int *array;\r\n    int elementNum, index1, index2, sum;\r\n    \r\n\r\n    // Prompt to enter the size elementNum of the array and validate if elementNum ≥ 5\r\n    printf(\"Enter the size of the array (elementNum>=5): \");\r\n    scanf(\"%d\", &elementNum);\r\n    if (elementNum < 5) {\r\n        printf(\"The size of the array must be at least 5.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Dynamically allocate memory for the array using pointers\r\n    array = (int *)malloc(elementNum * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Prompt the user to enter each element of the array one by one\r\n    printf(\"Enter the elements of the array(elementNum>=5):\\n\");\r\n    int i;\r\n    for (i = 0; i < elementNum; i++) {\r\n        printf(\"Element %d:\",i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n\r\n    //Prompt the user to enter the two indices and validate them\r\n    int valid_indices = 1;\r\n    while (valid_indices) {\r\n        printf(\"Enter the first index (0 <= index < %d): \",elementNum);\r\n        scanf(\"%d\", &index1);\r\n        printf(\"Enter the second index (0 <= index < %d): \",elementNum);\r\n        scanf(\"%d\", &index2);\r\n\r\n        if (index1 < 0 || index1 >= elementNum || index2 < 0 || index2 >= elementNum || index1 == index2) {\r\n            printf(\"Invalid indices. Please enter again.\\n\");\r\n        } else {\r\n            valid_indices = 0;\r\n        }\r\n    } \r\n\r\n    //get the sum of the values of the two array elements\r\n    sum = *(array + index1) + *(array + index2);\r\n\r\n    //Print the output for the sum\r\n    printf(\"The sum of the elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free the dynamically allocated memory\r\n    free(array);\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define scount 3\r\n#define NAME_LENGTH 50\r\n\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    int i;\r\n    for (i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    int i;\r\n    for (i = 0; i < scount; i++) {\r\n        printf(\"Student Name: %s, Mark: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char names[scount][NAME_LENGTH];\r\n    float marks[scount];\r\n    float average;\r\n\r\n    // Prompt to enter the three student names and marks \r\n    int i;\r\n    for (i = 0; i < scount; i++) {\r\n        printf(\"Enter name for student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        while (getchar() != '\\n'); \r\n\r\n        printf(\"Enter mark for student %s: \", names[i]);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // Calculate average mark\r\n    average = calculateAverage(marks, scount);\r\n\r\n    // Display student names, marks, average mark\r\n    displayStudentData(names, marks);\r\n\r\n    printf(\"The average mark is: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n\r\n\r\nint main() {\r\n    int n;\r\n    int highestBid = 0;\r\n    int *bids;\r\n    int min=100000; //at least $100,000\r\n\r\n    //Prompt enter the number of bids (N) and validate that N ≥ 2\r\n    printf(\"Enter the number of bids (N >= 2): \");\r\n    \r\n    scanf(\"%d\", &n);\r\n    if (n < 2) {\r\n        printf(\"Must be more than two bids.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //Dynamically allocate memory for array\r\n    bids = (int *)malloc(n * sizeof(int));\r\n    if (bids == NULL) {\r\n        printf(\"error.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Prompt enter the values of the N bids \r\n    \r\n    int i;\r\n    printf(\"bids must be at least: $%d):\\n\", min);\r\n    for (i = 0; i < n; i++) {\r\n        printf(\"Enter bid %d):\", i);\r\n        scanf(\"%d\", &bids[i]);\r\n        \r\n        while (bids[i] < min) {\r\n            printf(\"Invalid bid. At least $%d.\\n\", min);\r\n            printf(\"Enter bid %d: \", i + 1);\r\n            scanf(\"%d\", &bids[i]);\r\n        }\r\n        \r\n        if (i == 0 || bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Output the value of the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    \r\n    free(bids);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. q2: no submission q3: no submission"
  },
  {
    "student_id": "20617662",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int size;\r\n    //Making a valid array size \r\n    do {\r\n        printf(\"Enter the size of the array(N >= 5): \");\r\n        scanf(\"%d\", &size);\r\n        if (size < 5){\r\n            printf(\"Invalid size. Please enter a size of at least 5.\\n\"); //Validation for minimum number of elements\r\n        }\r\n    } while (size < 5);\r\n    //Allocate memory for array\r\n    int *array = (int*)malloc(size *sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed.\");\r\n        return 1; //Program terminates if error.\r\n    }\r\n    //Request user to enter array elements \r\n    printf(\"Enter the array elements:\\n\", size);\r\n    for (int i = 0; i < size ; i++){\r\n        printf(\"Element %d:\", i);\r\n        scanf(\"%d\", array + i);\r\n    }\r\n    //Enter valid indices to be calculated\r\n    int index1, index2;\r\n    do{ \r\n        printf(\"Enter the indices of two elements by space (0 - %d): \", size - 1);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if (index1 < 0 || index1 >= size || index2 < 0 || index2>size) {\r\n            printf(\"Error. Indices must be within the range of the array elements. Please try again.\\n\");\r\n        } \r\n       } while (index1 < 0 || index1 >= size || index2 < 0 || index2 >= size);\r\n        //Applying pointers to compute the sum of the two indices entered\r\n        int sum = *(array + index1) + *(array + index2);\r\n        //Print the sum of elements \r\n        printf(\"The sum of the elements at indices %d and %d : %d\\n\", index1, index2, sum);\r\n        //Free allocated memory\r\n        free(array);\r\n        \r\n        return 0;\r\n    \r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NUM_STUDENTS 3    // Number of students for data\r\n#define NAME_LENGTH 50    // Length of a students name\r\n\r\n// Calling a function to calculate the average of the marks \r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Another function to display student data (name, marks and average)\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count, float average) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Student %d: Name: %s, Mark: %.2f\\n\", i + 1, names[i], marks[i]);\r\n    }\r\n    printf(\"Average Mark: %.2f\\n\", average);\r\n}\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH];  // Applying array to store student's name \r\n    float marks[NUM_STUDENTS];             // Applying array to store student's marks \r\n    float average;\r\n\r\n    // Enter the student names and marks\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);  // Read the name (including spaces)\r\n        printf(\"Enter mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);  \r\n    }\r\n\r\n    // Average mark is calculated.\r\n    average = calculateAverage(marks, NUM_STUDENTS);\r\n\r\n    //Display student's name, mark, and the average\r\n    displayStudentData(names, marks, NUM_STUDENTS, average);\r\n\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MINIMUM_BID 100000  // Minimum bid amount\r\n\r\nint main() {\r\n    int n; // Initialise the number of bids.\r\n\r\n    // Enter the number of bids \r\n    do {\r\n        printf(\"Enter the number of bids (minimum 2): \");\r\n        scanf(\"%d\", &n);\r\n        if (n < 2) {\r\n            printf(\"Number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n    } while (n < 2);\r\n\r\n    //Array is allocated to store bids.\r\n    float bids[n];\r\n    \r\n    // Validate input bids \r\n    for (int i = 0; i < n; i++) {\r\n        do {\r\n            printf(\"Enter bid %d (must be at least $%d): \", i + 1, MINIMUM_BID);\r\n            scanf(\"%f\", &bids[i]);\r\n            if (bids[i] < MINIMUM_BID) {\r\n                printf(\"Error. Each bid must be at least $%d.Please try again.\\n\", MINIMUM_BID);\r\n            }\r\n        } while (bids[i] < MINIMUM_BID);\r\n    }\r\n\r\n    // The highest bid is determined\r\n    float highestBid = bids[0];  // Initialize highest bid with the first bid\r\n    for (int i = 1; i < n; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Highest bid output\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The line printf(\"*\\n\"); at the end of the outer loop adds an extra asterisk at the end of each row, which is likely not the intended behavior.  q2:The program correctly takes a user-defined number of integers, calculates their sum, average, product, smallest, and largest values. The logic is sound, and it appropriately handles the case for fewer than three integers. q3: The quantity variable should be of type int, not double, since it represents a count of items. .incorrect discounted price (more than one product)"
  },
  {
    "student_id": "20705922",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>  // for standard input-output\r\n#include <stdlib.h>  // for memory allocation\r\n\r\n// This function validates the array size\r\nint validateSize() {\r\n    int size;\r\n    do {\r\n        printf(\"You may enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &size);\r\n        if (size < 5) {\r\n            printf(\"Invalid array size. Please re-enter N >= 5.\\n\");\r\n        }\r\n    } while (size < 5);\r\n    return size;\r\n}\r\n\r\n// this function dynamically allocates memory for the array\r\nint* allocateArray(int size) {\r\n    int *arr = (int *)malloc(size * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation has failed.\\n\");\r\n        exit(1);\r\n    }\r\n    return arr;\r\n}\r\n\r\n// This function will get array elements input from the user\r\nvoid getArrayElements(int *arr, int size) {\r\n    printf(\"You may enter the array elements:\\n\");\r\n    for (int i = 0; i < size; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", arr + i);\r\n    }\r\n}\r\n\r\n// this function validates an index\r\nint validateIndex(int index, int size) {\r\n    if (index >= 0 && index < size) {\r\n        return 1; // valid index\r\n    } else {\r\n        return 0; // invalid index\r\n    }\r\n}\r\n\r\n// this function will prompt the user for two indices and validate them\r\nvoid getValidIndices(int size, int *index1, int *index2) {\r\n    do {\r\n        printf(\"Please enter the indices of the two elements (0 <= index1, index2 < %d): \", size);\r\n        scanf(\"%d %d\", index1, index2);\r\n\r\n        if (!validateIndex(*index1, size) || !validateIndex(*index2, size)) {\r\n            printf(\"Error: Indices have to be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    } while (!validateIndex(*index1, size) || !validateIndex(*index2, size));\r\n}\r\n\r\n// this function will calculate sum of array elements at the given indices using pointer arithmetic.\r\nint calculateSum(int *arr, int index1, int index2) {\r\n    return *(arr + index1) + *(arr + index2);\r\n}\r\n\r\nint main() {\r\n    int N;\r\n    int index1, index2;\r\n\r\n    // this function validates the array size\r\n    N = validateSize();\r\n\r\n    // This function allocates the memory\r\n    int *arr = allocateArray(N);\r\n\r\n    // this function gets the array elements\r\n    getArrayElements(arr, N);\r\n\r\n    // this function gets the valid indices.\r\n    getValidIndices(N, &index1, &index2);\r\n\r\n    // This function calculates the sum\r\n    int sum = calculateSum(arr, index1, index2);\r\n\r\n    // Prints the sum\r\n    printf(\"The total sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // free dynamically allocated memory.\r\n    free(arr);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>  // for standard input-output\r\n#include <string.h>  // for string functions\r\n\r\n#define NAME_LENGTH 50  // max length for student names\r\n#define NUM_STUDENTS 3 // number of students specified\r\n\r\n// This function calculates the average mark\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return (count > 0) ? (sum / count) : 0.0; \r\n}\r\n\r\n// This fnction displays the student names, marks, and the average mark.\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], float average) {\r\n    printf(\"\\nStudent Names & Marks:\\n\");\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    printf(\"Average Mark: %.2f\\n\", average);\r\n}\r\n\r\nint main() {\r\n    char studentNames[NUM_STUDENTS][NAME_LENGTH];\r\n    float studentMarks[NUM_STUDENTS];\r\n\r\n    // tThis will prompt the user to enter student names and marks.\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Please enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", studentNames[i]); \r\n\r\n        printf(\"You may enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &studentMarks[i]);\r\n    }\r\n\r\n    // This calculates the average mark\r\n    float avgMark = calculateAverage(studentMarks, NUM_STUDENTS);\r\n\r\n    // This will print the students' names, marks, and their average mark.\r\n    displayStudentData(studentNames, studentMarks, avgMark);\r\n\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>  // For standard input-output\r\n\r\nint main() {\r\n    int numBids;\r\n    float bids[100]; // this assumes a max number of 100 bids, can be adjusted if need be.\r\n    float highestBid = 0.0;\r\n\r\n    // This will 'get' and validate the number of bids\r\n    do {\r\n        printf(\"You may enter the number of bids: \");\r\n        scanf(\"%d\", &numBids);\r\n        if (numBids < 2) {\r\n            printf(\"Error: The number of bids must at least be 2. Please try again: \");\r\n            scanf(\"%d\", &numBids); // 'get' the input again.\r\n        }\r\n    } while (numBids < 2);\r\n\r\n    // 'get' and validate the bids\r\n    printf(\"Please enter the bids (must be at least $100000):\\n\");\r\n    for (int i = 0; i < numBids; i++) {\r\n        do {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%f\", &bids[i]);\r\n            if (bids[i] < 100000.0) {\r\n                printf(\"Error: The bid must be at least $100000. Please try again: \");\r\n                scanf(\"%f\", &bids[i]); // 'get' the input again.\r\n            }\r\n        } while (bids[i] < 100000.0);\r\n\r\n        // This shall update highestBid if the current bid is higher\r\n        if (i == 0 || bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // This will output the highest bid.\r\n    printf(\"The highest bid is: $%.0f\\n\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:there are issues in the logic that lead to incorrect behavior, particularly with the handling of input and the calculation of the product. q3: Syntax errors, code not runable. The program intends to calculate the total cost based on the product type but contains logical issues that prevent it from working correctly.\n    It only executes the switch statement once and does not allow for repeated entries until the user decides to exit.\n    The discount calculation is incorrect. The logic should apply the discount after calculating the total cost, but it incorrectly modifies the discount variable instead of calculating the finalCost.\n    The variable types for discount should be float to handle decimal percentages properly."
  },
  {
    "student_id": "20712132",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int *arr = NULL; // pointer for the array\r\n    int N; // size of the array\r\n    int index1, index2; // indices for the two elements to be added\r\n    int sum;\r\n\r\n    // ask the user to enter the size of the array\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Invalid size. Please enter a value greater than or equal to 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // allocate memory for the array\r\n    arr = (int *)malloc(N * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // ask the user to enter elements of the array\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (arr + i)); // Use pointer arithmetic to access the array\r\n    }\r\n\r\n    // ask the user to enter two indices and validate\r\n    while (1) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d):\\n\", N);\r\n        printf(\"Index 1: \");\r\n        scanf(\"%d\", &index1);\r\n        printf(\"Index 2: \");\r\n        scanf(\"%d\", &index2);\r\n\r\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n            break;\r\n        } else {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\", N);\r\n        }\r\n    }\r\n\r\n    // 5) Use pointer-based approach to compute the sum\r\n    sum = *(arr + index1) + *(arr + index2);\r\n\r\n    // 6) Print the sum\r\n    printf(\"The sum of the elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free the dynamically allocated memory\r\n    free(arr);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define STUDENT_COUNT 3   // number of students\r\n#define NAME_LENGTH 50    // maximum length of student names\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH]; // array to store student names\r\n    float marks[STUDENT_COUNT];            // array to store student marks\r\n    float average;                         // variable to store the average marks\r\n\r\n    // ask the user to enter student names and marks one by one\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); // input name\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]); // input marks\r\n    }\r\n\r\n    // calculate the average marks\r\n    average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    // display student data and average marks\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// function to calculate the average of marks\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i]; // sum up all the marks\r\n    }\r\n    return sum / count; // return the average\r\n}\r\n\r\n// function to display student data and their marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s : %.2f\\n\",names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MIN_BID 100000  // minimum bid amount\r\n\r\nint main() {\r\n    int N;              // number of bids\r\n    float bids[100];    // array to store bids \r\n    float highestBid;   // variable to store the highest bid\r\n\r\n    // ask the user to enter the number of bids and validate\r\n    do {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &N);\r\n\r\n        if (N < 2) {\r\n            printf(\"Error: Number of bids must me at least 2. Please try again.\\n\");\r\n        }\r\n    } while (N < 2);  // repeat until N >= 2\r\n\r\n    // input and validate each bid\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Enter bid %d (minimum $%d): \", i + 1, MIN_BID);\r\n        scanf(\"%f\", &bids[i]);\r\n\r\n        // Validate the bid amount\r\n        while (bids[i] < MIN_BID) {\r\n            printf(\"Error: Bid must be at least $%d. Please try again: \", MIN_BID);\r\n            scanf(\"%f\", &bids[i]);\r\n        }\r\n    }\r\n\r\n    // determine the highest bid\r\n    highestBid = bids[0];  \r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];  \r\n        }\r\n    }\r\n\r\n    // output the highest bid\r\n    printf(\"The highest bid is: $%f\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks based on user-defined rows and columns. The nested loops function as intended, producing the desired output. q2: The program correctly calculates the sum, average, product, smallest, and largest of three integers. The average calculation uses casting to ensure it is computed as a floating-point number, which is a good practice. q3:The code effectively performs calculations for different products and applies discounts, but ensure that totalCost is properly initialized before use."
  },
  {
    "student_id": "20611605",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    // initialise variables\r\n    int N; \r\n    int a , b;\r\n    \r\n    //ask user for size of array\r\n    printf(\"Enter the size of the array (N>=5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    //initialise more variables after finding out size of array \r\n    int array[N]; \r\n    int *ptr = array;\r\n\r\n    if (N < 5){ // ask user to enter bigger number if not bigger than 5\r\n        printf(\"Enter a bigger number\"); \r\n    }\r\n    else {\r\n        printf(\"Enter the array of elements\\n\"); //ask user to enter a value to each element\r\n        for (int i = 0; i < N; ++i){\r\n        printf(\"Enter elements %d: \", i);\r\n        scanf(\"%d\", ptr + i);\r\n        }\r\n\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \",N); // ask for which element to find the sum of \r\n        scanf(\"%d %d\",&a, &b);\r\n        if (a >= N || b >= N || a < 0 || b < 0){ // check if inputs are valid \r\n            printf(\"Indices must be within the range of array elements\");\r\n        }\r\n        else{\r\n            printf(\"The sum of the values at indices %d and %d is: %d\", a, b, (*(ptr + a)) + (*(ptr + b))); //print the sum \r\n        }\r\n        \r\n\r\n    }\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    //initialise variables\r\n    char student1[50], student2[50], student3[50];\r\n    float marks[3];\r\n\r\n    //ask for first student and marks\r\n    printf(\"Enter name of first student: \"); \r\n    scanf(\"%s\", student1);\r\n    printf(\"Enter marks of first student: \");\r\n    scanf(\"%f\", marks);\r\n\r\n    //ask for second student and marks\r\n    printf(\"Enter name of first student: \"); \r\n    scanf(\"%s\", student2);\r\n    printf(\"Enter marks of first student: \");\r\n    scanf(\"%f\", marks + 1);\r\n\r\n    //ask for third student and marks \r\n    printf(\"Enter name of first student: \"); \r\n    scanf(\"%s\", student3);\r\n    printf(\"Enter marks of first student: \");\r\n    scanf(\"%f\", marks + 2);\r\n\r\n    //display marks \r\n    printf(\"Student Names and Marks\\n\");\r\n    printf(\"%s: %.2f\\n\",student1, *marks);\r\n    printf(\"%s: %.2f\\n\",student2, *(marks + 1));\r\n    printf(\"%s: %.2f\\n\",student3, *(marks + 2));\r\n\r\n    //display average \r\n    printf(\"\\nAverage Mark: %.2f\",((*(marks)) + (*(marks + 1)) + (*(marks + 2)))/3);\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(){\r\n    //initialise varaibles\r\n    int N;\r\n\r\n    //ask for amount of bids\r\n    printf(\"Enter the amount the bids:\");\r\n    scanf(\"%d\", &N);\r\n\r\n    //initialise more variables\r\n    int bids[N];\r\n    int temp = 0;\r\n\r\n    //check if enough bids\r\n    if (N <= 2){\r\n        printf(\"Not enough bids to determine who higher\");\r\n    }\r\n\r\n    else{\r\n        \r\n        //ask for bids\r\n        printf(\"Enter the bids (must be at least $100000)\\n\");\r\n        for (int i = 0; i < N; ++i){\r\n            printf(\"Enter bid %d: \", i); //ask for bid \r\n            scanf(\"%d\", bids + i);\r\n            if (*(bids + i) < 100000){ //check if bid too small or not\r\n                printf(\"Bid too small, try again\\n\");\r\n                exit(0);\r\n            }\r\n            else if (temp < *(bids + i)){ //check if bid is bigger than current highest bid\r\n                temp = *(bids + i);\r\n            }\r\n        }\r\n        printf(\"Highest bid is $%d\", temp); //display highest bid\r\n    }\r\n\r\n}",
    "feedback": "q1:The program prompts the user correctly for the number of rows and columns and attempts to print a grid of asterisks. However, the inner loop starts from 1, which results in one fewer asterisk printed in each row than specified by the user. The correct loop should start from 0 to ensure the right number of asterisks is printed. q2:The program correctly calculates and displays the sum, average, product, smallest, and largest of three numbers input by the user. q3:The variable total is used to accumulate costs but is not initialized before its first use."
  },
  {
    "student_id": "20718938",
    "code": "\n/* --- Q1/Q1/Q1.c --- */\n#define _CRT_SECURE_NO_WARNINGS 1\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int n = 0;\n    int a = 0;\n    int b = 0;\n    int sum = 0;\n    int* arr = NULL;\n\n    printf(\"Enter the size of the array (must be >= 5): \");\n    scanf(\"%d\", &n);\n    while (n < 5) {\n        printf(\"Invalid size. Size must be >= 5.\\n\");\n        printf(\"Enter the size of the array (must be >= 5): \");\n        scanf(\"%d\", &n);\n    }\n\n    arr = (int*)malloc(n * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n\n    printf(\"Enter %d elements:\\n\", n);\n    for (int i = 0; i < n; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (arr + i));\n    }\n\n    printf(\"Enter first value (0 to %d): \", n - 1);\n    scanf(\"%d\", &a);\n    printf(\"Enter second value (0 to %d): \", n - 1);\n    scanf(\"%d\", &b);\n\n    while (a < 0 || a >= n || b < 0 || b >= n) {\n        printf(\"Invalid values! Please enter values between 0 and %d.\\n\", n - 1);\n        printf(\"Enter first value (0 to %d): \", n - 1);\n        scanf(\"%d\", &a);\n        printf(\"Enter second value (0 to %d): \", n - 1);\n        scanf(\"%d\", &b);\n    }\n\n    sum = *(arr + a) + *(arr + b);\n\n    printf(\"Sum of elements at values %d and %d is: %d\\n\", a, b, sum);\n\n    free(arr);\n\n    return 0;\n}\n/* --- Q2/Q2/Q2.c --- */\n#define _CRT_SECURE_NO_WARNINGS 1\n#include <stdio.h>\n#define NAME_LENGTH 50\n#define STUDENT_COUNT 3\n\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0;\n    int i = 0;\n\n    for (i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n\n    return sum / count;\n}\n\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    int i = 0;\n    float avg = 0;\n\n    printf(\"\\nStudent Data:\\n\");\n    for (i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Student %d: %s\\n\", i + 1, names[i]);\n        printf(\"Mark: %.2f\\n\", marks[i]);\n    }\n\n    avg = calculateAverage(marks, STUDENT_COUNT);\n    printf(\"\\nAverage Mark: %.2f\\n\", avg);\n}\n\nint main() {\n    char names[STUDENT_COUNT][NAME_LENGTH] = { 0 };\n    float marks[STUDENT_COUNT] = { 0 };\n    int i = 0;\n    char temp = 0;\n\n    for (i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Enter student %d name: \", i + 1);\n        scanf(\"%c\", &temp);\n        scanf(\"%[^\\n]\", names[i]);\n\n        printf(\"Enter mark for %s: \", names[i]);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    displayStudentData(names, marks);\n\n    return 0;\n}\n/* --- Q3/Q3/Q3.c --- */\n#define _CRT_SECURE_NO_WARNINGS 1\n#include <stdio.h>\nint main() {\n\n    int a = 0;  //Initialize a variable.\n    double b = 0;//current bid\n    double c = 0;//highest bid\n    int i = 1;  //loop\n\n    while (a < 2) {\n        printf(\"Enter the number of bids: \");\n        scanf(\"%d\", &a);\n\n        if (a < 2) {\n            printf(\"Error: Number of bids must be at least 2. Please try again: \");\n            scanf(\"%d\", &a);\n        }\n    }\n    printf(\"Enter the bids (must be at least $100000):\\n\");\n\n    for (i = 1; i <= a; i++) {\n        printf(\"Bid %d: \", i);\n        scanf(\"%lf\", &b);\n\n        while (b < 100000) {\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\n            scanf(\"%lf\", &b);\n        }\n\n        if (b > c) {\n            c = b;\n        }\n    }\n\n    printf(\"The highest bid is: $%.0f\\n\", c);\n\n    return 0;\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and successfully prints a grid of asterisks based on the input values. However, there are a few minor syntax issues that prevent the code from compiling correctly. q2:The program correctly calculates the sum, average, product, smallest, and largest values of three integers input by the user. The logic is sound, and the calculations are performed as expected.The logic for finding the minimum and maximum values can be simplified. You can initialize min and max to the first number and then compare the other two numbers without the need for separate checks. This also ensures that it works correctly even if numbers are equal. q3: The program functions as intended, allowing users to enter product codes and calculate costs based on input weights or quantities. The use of a loop enables multiple entries until the user chooses to exit."
  },
  {
    "student_id": "20574289",
    "code": "\n/* --- Q1.c.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n  \n    // Variable Declaration\n    int N, ind1, ind2;\n    int *ARRAY;\n    \n    // Input Acquisition and Validation\n    printf(\"Enter the size of the array;\");\n    do {\n        printf(\"\\nPlease ensure the value is atleast 5: \");\n    scanf(\"%d\", &N);\n    } while (N < 5);\n    \n    // Dynamic Allocation of Memory for Array/Pointer Usage\n    ARRAY = (int *)malloc(N * sizeof(int));\n    if (ARRAY == NULL) {\n        printf(\"Mem Alloc Failed. . .\");\n        return 1;\n    }\n    \n    // Input Array Elements\n    printf(\"\\nNow please enter the array elements.\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d:\", i);\n        scanf(\"%d\", (ARRAY+i));\n    }\n    \n    // Indices Check within the ARRAY\n    printf(\"Enter the indices of the two elements [Index 1 >= 0] && [Index 2 < %d]\", N-1);\n    do {\n        printf(\"\\n Enter the first index:\");\n        scanf(\"%d\", &ind1);\n        printf(\"\\n Enter the second index: \");\n        scanf(\"%d\", &ind2);\n    } while ( ind1 < 0 || ind1 >= N || ind2 < 0 || ind2 >= N);\n    \n    // Sum, Results, Freeing MEM Allocation\n    // Sum Calculation using Pointers\n    int sum = *(ARRAY + ind1) + *(ARRAY + ind2);\n    \n    // Results Print\n    printf(\"\\nThe sum of the elements/values at indices %d and %d, is; %d\\n\", ind1, ind2, sum);\n    \n    // Free Mem Function\n    free(ARRAY);\n    return 0;\n}\n\n/* --- Q2.c.c --- */\n#include <stdio.h>\r\n#define STUDENT_COUNT 3\r\n#define NAME_LENGTH 50\r\n\r\n// Function Prototype Provided for Q2\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\n// Main Program Block\r\nint main() {\r\n    // Variable, Array Declarations\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n    int i;\r\n    \r\n    // Input Student Compartment\r\n    for (i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter student %d name: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);                     // Student name Compartment\r\n        \r\n        printf(\"Enter %s's mark: \", names[i]);\r\n        scanf(\"%f\", &marks[i]);                         // Student grade Compartment\r\n    }\r\n    \r\n    // Calculate and display results\r\n    displayStudentData(names, marks);\r\n    \r\n    return 0;\r\n}\r\n\r\n// Average Grade Calculation Block\r\nfloat calculateAverage(const float marks[], int count) {\r\n    \r\n    // Variable Declarations\r\n    float sum = 0;\r\n    int i;\r\n    \r\n    // Sum Calculation\r\n    for (i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    \r\n    // Average Calculation by Sum/count or Total/no. of values\r\n    return sum / count;\r\n}\r\n\r\n// Student Data Display Block\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    \r\n    // Variable Declarations\r\n    int i;\r\n    float average;\r\n    \r\n    printf(\"\\nStudent Data:\\n\");\r\n    printf(\"-------------\\n\");\r\n    \r\n    // Requisition of names & marks from Array\r\n    for (i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Student: %s, Mark: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    \r\n    // Final Summary Prints\r\n    average = calculateAverage(marks, STUDENT_COUNT);\r\n    printf(\"\\nClass Average: %.2f\\n\", average);\r\n}\n/* --- Q3.c.c --- */\n// Library Pull & Definition Establishment\n#include <stdio.h>\n#define Minimum_Bid 100000\n\n// Main Code Block\nint main() {\n    \n    // Variable Declaration\n    int n;\n    int i;\n    double bids[100], highest_bid = 0;\n    \n    // Bid Calculation & Validaton using do/while statement\n    printf(\"Please enter the number of bids [Minimum amount of 2]:\\n\");\n    do {\n        scanf(\"%d\", &n);\n        if (n < 2) {\n            printf(\"Please try again, the minimum number of bids is two.\\n\");\n        }\n    } while (n < 2);\n    \n    // Bid Value Calculation & Validation using for loop & do/while statement\n    // For the n [Number of bids], run the following code.\n    for (i=0; i < n; i++) {\n        do {\n            printf(\"Enter bid #%d [The minimum bid is $100,000]: $\", i+1);\n            scanf(\"%lf\", &bids[i]);\n            \n            if (bids[i] < Minimum_Bid) {\n                printf(\"Please try again, reminder that the minimum bid must be atleast $100,000.\\n\");\n            }                            // Validation Check\n            \n        } while (bids[i] < Minimum_Bid); //  While the calculated bid is less than the minimum bid, run the do/while statement.\n    }\n    \n    // Allocation of highest bid using for loop\n    for (i = 0; i < n; i++) {\n        if (bids[i] > highest_bid) {\n            highest_bid = bids[i];\n        }\n    }\n    \n    // Result Display & End\n    printf(\"\\nThe highest recorded bid is $%.2f\\n\", highest_bid);\n}\n\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3: there are numerous syntax and logical errors that prevent it from functioning correctly."
  },
  {
    "student_id": "20713310",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{   \r\n    int *array;\r\n\r\n    int n,i,index1,index2;\r\n    printf(\"Enter the size of array:\");\r\n    scanf(\"%d\",&n);\r\n    int sum=0;\r\n    printf(\"Enter the array elements:\\n\");\r\n\r\n    array= (int*)malloc(n* sizeof(int));\r\n\r\n    if(n<5){\r\n        printf(\"Memory not allocated\");\r\n    }\r\n\r\n    else{\r\n        for (i = 0; i < n; i++)\r\n        {\r\n            printf(\"Element %d:\",i);\r\n            scanf(\"%d\",array+i);\r\n        }\r\n\r\n        while(1)\r\n        {\r\n            printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d):\",n);\r\n            scanf(\"%d\",&index1);\r\n            scanf(\"%d\",&index2);\r\n\r\n            if(index2 >=n)\r\n            {\r\n                printf(\"index2 >= %d\\n,Try again\\n\",n);\r\n            }\r\n\r\n            else{\r\n                for (i = index1; i <= index2; i++)\r\n                {\r\n                    sum=sum+*(array+i);\r\n                }\r\n\r\n                printf(\"Sum of values at the indices %d and %d is: %d\",index1,index2,sum);\r\n                break;\r\n                }\r\n        }\r\n    }\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n#define NameLength 50\r\n#define S_Count 3\r\n\r\n//define data type of structure student\r\ntypedef struct {\r\n    char name[NameLength];\r\n    float mark;\r\n} Student;\r\n\r\n//Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NameLength], const float marks[], int count);\r\n\r\nint main() {\r\n    Student s[S_Count];\r\n    float marks[S_Count];\r\n    char names[S_Count][NameLength];\r\n\r\n    //Loop for entering data of students and marks till s_count(3)\r\n    for (int i = 0; i < S_Count; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", s[i].name);  //scanf with white spaces\r\n        strcpy(names[i], s[i].name); //copy the value of name from student structure array to names array\r\n        printf(\"Enter the mark of %s: \", s[i].name);\r\n        scanf(\"%f\", &s[i].mark);\r\n        marks[i] = s[i].mark; // Copy mark from student structure array to marks array\r\n    }\r\n\r\n    // Calling function for calculation of average marks\r\n    float MarkAvg = calculateAverage(marks, S_Count);\r\n\r\n    // Display the Data and Average Marks\r\n    displayStudentData(names, marks, S_Count);\r\n    printf(\"The average mark is: %.2f\\n\", MarkAvg);\r\n\r\n    return 0;\r\n}\r\n\r\n//Function1 (Calculate Average Marks)\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum = sum+marks[i];\r\n    }\r\n    return sum/count;\r\n}\r\n\r\n//Function2 (Display Data)\r\nvoid displayStudentData(const char names[][NameLength], const float marks[], int count) {\r\n    printf(\"\\tStudent Data:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Name: %s, Mark: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\nint highbid(const int a[],int n);\r\nint main()\r\n{\r\n    int bid;\r\n    printf(\"Enter the number of bids:\");\r\n    scanf(\"%d\",&bid);\r\n\r\n    if(bid<2)\r\n    {\r\n        while(bid<2)\r\n        {\r\n            printf(\"Try again:\");\r\n            scanf(\"%d\",&bid);\r\n        }\r\n    }\r\n\r\n    int i,auction[bid];\r\n    printf(\"Enter the bids (Must be atleast $100000):\\n\");\r\n    for (i = 0; i < bid; i++)\r\n    {\r\n        printf(\"\\tBid %d:\",i+1);\r\n        scanf(\"%d\",&auction[i]);\r\n\r\n        if (auction[i]<100000)\r\n        {\r\n            while (auction[i]<100000)\r\n            {\r\n                printf(\"\\tPlease try again:\");\r\n                scanf(\"%d\",&auction[i]);\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    int high_bid=0,big;\r\n    big=auction[0];\r\n\r\n    for(i=0;i<=bid;i++)\r\n    {\r\n        if(big<auction[i])\r\n        {\r\n            big=auction[i];\r\n        }\r\n\r\n        else{\r\n            big=big;\r\n        }\r\n    }\r\n    high_bid=big;\r\n    \r\n    printf(\"Highest bid: %d\",high_bid);\r\n\r\n    return 0;    \r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks based on user-defined rows and columns. The nested loops function as intended, producing the expected output. q2:The program calculates the sum, average, product, smallest, and largest of three integers correctly. However, the logic for finding the smallest and largest integers can be simplified, and there are unnecessary checks that could be streamlined. q3:The program computes the total cost and discounted cost for various grocery items based on user input. It correctly uses a switch statement to handle different product codes. However, the logic can be streamlined, particularly in how discounts are applied."
  },
  {
    "student_id": "20596870",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(){\r\n    int N, index1, index2, sum;\r\n\r\n    //size of array(at least 5)\r\n    printf(\"Enter the size of the array (N >=5): \");\r\n    scanf(\"%d\", &N);\r\n    while(N<5){\r\n        printf(\"Size must be at least 5. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n    \r\n    //Dynamically allocate memory of the array of size N\r\n    int *array = (int *)malloc(N*sizeof(int));\r\n    if (array == NULL){\r\n        printf(\"Memory allocation failed. Exiting program.\\n\");\r\n        return 1; //Exit if allocation failed\r\n    }\r\n    \r\n    //Input N integers into the array\r\n    printf(\"Enter %d integers for the array:\\n\", N);\r\n    for (int i =0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (array +i));\r\n    }\r\n    \r\n    //Input 2 valid indices\r\n    printf(\"Enter two valid indices (0 <= index1, index2< %d): \", N);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n    \r\n    //Check the indices\r\n    while (index1 <0 || index1 >=N || index2 <0 || index2 >=N){\r\n        printf (\"Error: Indices must be within the range of the array elements. Please try again.\\n\", N-1);\r\n        printf(\"Enter two valid indices (0 <= index1, index2< %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n    }\r\n    sum=*(array + index1) + *(array + index2);\r\n    printf(\"The sum of the values at the indices %d and %d is :%d\\n\", index1, index2, sum);\r\n\r\n    //Free the allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\r\n\n/* --- Q2.c --- */\n#include<stdio.h>\r\n#define numstudents 3\r\n#define NAME_LENGTH 50\r\n\r\n// function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const\r\nfloat marks[]); // NAME_LENGTH 50\r\n\r\nint main(){\r\n    char names[numstudents][NAME_LENGTH]; //Array for names\r\n    float marks[numstudents];             // Array for marks\r\n    int i;\r\n\r\n    //Input loop to get names and marks\r\n    for (i=0; i<numstudents; i++){\r\n        printf(\"Enter the name of student %d: \",i+1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of student %d: \", i+1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    //Calculate average\r\n    float average= calculateAverage(marks, numstudents);\r\n    displayStudentData(names, marks);\r\n    printf(\"Average Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n//Function to calculate average of marks\r\nfloat calculateAverage(const float marks[], int count){\r\n    float sum = 0.0;\r\n    for (int i =0; i< count; i++){\r\n        sum+= marks[i];\r\n    }\r\n    return sum/count;\r\n}\r\n\r\n//Function to display names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const\r\nfloat marks[]){\r\n    printf(\"\\nStudent Names and Mark: \\n\");\r\n    for (int i=0; i< numstudents; i++){\r\n        printf(\"%s: %.2f\\n\", names[i],marks[i]);\r\n    }\r\n}\n/* --- Q3.c --- */\n#include<stdio.h>\r\n#define minbid 100000 //min bid \r\n\r\nint main(){\r\n    int numbids, i;\r\n    float maxbid;\r\n\r\n    maxbid=0.0;\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &numbids);\r\n\r\n    //Check bid value \r\n    while (numbids<2){\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &numbids);\r\n    }\r\n    \r\n    //Dynamically create an array to store bid values\r\n    float bids[numbids];\r\n    \r\n    for (i=0; i< numbids; i++){\r\n        printf(\"Enter the bids (must be at least $100000): \", i+1, (float)minbid);\r\n        scanf(\"%f\", &bids[i]);\r\n\r\n        //Check bid value is over 100000\r\n        if(bids[i]< minbid){\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \", (float)minbid);\r\n            i--;\r\n        }\r\n    }\r\n    for (i=0; i< numbids; i++){\r\n        if (bids[i]> maxbid){\r\n            maxbid=bids[i];\r\n        }\r\n    }\r\n    printf(\"The highest bid is: $%.2f\\n\", maxbid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program correctly calculates the total cost and final cost after applying a discount for different grocery items.The variable weight should be a float when reading the number of items (for dairy and canned goods)The case 0 currently just breaks out of the switch statement but does not exit the program."
  },
  {
    "student_id": "20701396",
    "code": "\n/* --- Q1.c --- */\n/******************************************************************************\n\nWelcome to GDB Online.\n  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, \n  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS\n  Code, Compile, Run and Debug online from anywhere in world.\n\n*******************************************************************************/\n#include <stdio.h>\n\nint main(){\n    int size;\n    int array[size];\n    printf(\"enter size of array (N>=5:\\n\"); //ask for size of array\n    scanf(\"%d\",&size);\n    if (size>=5){ //conditional statement to continue with the code\n    printf(\"enter the array elements: \\n\");\n    for (int i=0; i <= size; ++i){\n    printf(\"Element %d:\\n\",i);\n    scanf(\"%d\",&array[i]); //put the elements into the array\n    }\n    int index1;\n    int index2;\n    int size2 = size; //because there is an error when I run (size becomes 3)\n    printf(\"enter the value of index1: \");\n    scanf(\"%d\",&index1);\n    printf(\"enter the value of index2: \");\n    scanf(\"%d\",&index2); //ask the user for input and read the values and store them in index1 and index2\n    while (index1>=size2||index2>=size2){\n    printf(\"please enter the value of index1 less than %d: \",size2);\n    scanf(\"%d\",&index1);\n    printf(\"please enter the value of index2 less than %d: \",size2);\n    scanf(\"%d\",&index2);  \n    }\n    \n    \n    int *index1ptr = &array[index1];\n    int *index2ptr = &array[index2]; //initialise both pointers to point to array of indice index1 and index2 respectively\n    int sum = 0; //intialise sum\n    sum = *index1ptr + *index2ptr; //make the value of sum the sum of values located in array[index1] and [index2]\n    \n    printf(\"the sum of the values at indices %d and %d is: %d\",index1,index2,sum);\n    }else{ //dont run the code if the number is less than 5\n        printf(\"You should enter a number greater than or equal to 5\");}\n    \n    \n        \n}\n\n\n/* --- Q2.c --- */\n/******************************************************************************\n\nWelcome to GDB Online.\n  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, \n  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS\n  Code, Compile, Run and Debug online from anywhere in world.\n\n*******************************************************************************/\n#include <stdio.h>\n\nint main(){\n    \nchar names[3][30] = {\"\", \"\", \"\"}; //initialising the array (with length too)\nfloat grades[3]; //intialise the grades array\nfor (int i= 0;i <=2 ; ++i){\n        printf(\"\\nEnter student %d name: \",i+1);\n        scanf(\"%s\", names[i]); //puts the names into the array\n        printf(\"\\nEnter student %d grade: \",i+1);\n        scanf(\"%f\",&grades[i]);//enters grade into the array\n    \n}\n    \nprintf(\"\\nStudent names and Marks:\\n\"); \n\nfor (int i= 0;i <=2 ; ++i){\nprintf(\"%s:%.2f\\n\",names[i],grades[i]);// print the names and grades\n}\nfloat average = (grades[0] + grades[1] + grades[2])/3; //calculate average\nprintf(\"Average is %.2f\", average);//print average\n    \n}\n\n\n/* --- Q3.c --- */\n/******************************************************************************\n\nWelcome to GDB Online.\n  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, \n  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS\n  Code, Compile, Run and Debug online from anywhere in world.\n\n*******************************************************************************/\n#include <stdio.h>\n\n\nint main(){\n    int size;\n    int array[size];\n    printf(\"enter size of array (N>=2):\\n\"); //ask for size of array\n    scanf(\"%d\",&size); //put the value in variable size\nif (size>=2){\n    printf(\"\\nEnter the bids (must be at least 100000)\\n\");\n    for (int i=1; i <= size; ++i){\n    printf(\"Enter Bid %d:\\n\",i);\n    scanf(\"%d\",&array[i]); //put the elements into the array\n    while (array[i]<100000){\n    printf(\"Enter Bid at least 100000 %d:\\n\",i+1);\n    scanf(\"%d\",&array[i]);\n    }\n    }\nint highest; //initialise highest\nint size2 = size;\nint i=0;\nfor (i=0; i<=size2; ++i){ \n    if (array[i]>= highest){\n    highest=array[i];} //determ the value of the highest bid with a loop\n }    \nprintf(\"Highest bid is %d\",highest); // print highest bid\n}else{\n        printf(\"Error. Highest bid cannot be determined\");//Invalidate the input if its less than 2\n    }\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and prints a grid of asterisks. The nested loops function as intended, producing the expected output. q2:The program calculates the sum, average, smallest, and largest integers correctly based on user input. However, there are logical flaws in the smallest number calculation, and the average calculation could lead to integer division issues. q3: The program generally works to calculate the total cost before and after applying a discount for various product types. However, there are issues with the discount calculation and potential for incorrect outputs due to the order of operations.The formula for calculating the total after discount is incorrect. It should be total * (1 - (discount / 100)) instead of (total * num) * 1 - (discount / 100) to ensure the discount is applied correctly."
  },
  {
    "student_id": "20577892",
    "code": "\n/* --- labasses2_Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int *ptr1;\r\n    int *ptr2;\r\n    char arr[] = {};\r\n    int size = 0;\r\n    int sum = 0;\r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &size);\r\n\r\n\r\n    ptr1 = (int*)malloc(size * sizeof(int));\r\n    ptr2 = (int*)malloc(size * sizeof(int));\r\n\r\n    printf(\"Enter the array elements:\\n\");\r\n\r\n    ptr1 = arr[*ptr1];\r\n    ptr2 = arr[*ptr2];\r\n    for (size_t i = 0; i < size; i++)\r\n    {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &arr);\r\n    }\r\n    \r\n    printf(\"Enter the indices of the two elements (0 <= index1, index < %d):\", size);\r\n    scanf(\"%d %d\", &ptr1, &ptr2);\r\n\r\n    if (ptr1 > arr || ptr2 > arr) {\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again\");\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index < %d):\", size);\r\n        scanf(\"%d %d\", &ptr1, &ptr2);\r\n    }\r\n\r\n    sum = arr[*ptr1] + arr[*ptr2];\r\n    printf(\"The sum of the values at the indices %d and %d is: %d\", *ptr1, *ptr2, sum);\r\n\r\n    return 0;\r\n}\n/* --- labasses2_Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\nvoid displayStudentData(const char names[NAME_LENGTH], const\r\nfloat marks[]) {\r\n\r\n    printf(\"Student Names and Marks:\\n\");\r\n    for (int j =  0; j<3; j++) {\r\n        printf(\"%c: %.2f\\n\", names[j], marks[j]);\r\n    }\r\n\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    \r\n    // base case\r\n    if (count == 0) {\r\n        return 0;\r\n    }\r\n    else {\r\n        // recursively calling the function\r\n        marks[0] + calculateAverage(marks + 1, count - 1);\r\n    }\r\n\r\n    calculateAverage(marks, count) / 3;\r\n\r\n}\r\n\r\nint main() {\r\n\r\n    char names[NAME_LENGTH]; \r\n    float marks[] = {};\r\n    float average = 0;\r\n\r\n    for (int i =  1; i<4; i++) {\r\n        printf(\"Enter the name of student %d: \", i);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of the student %d: \", i);\r\n        scanf(\"%.2f\", &marks);\r\n        \r\n    }\r\n\r\n    average = calculateAverage(marks, 3);\r\n    displayStudentData(names, marks);\r\n\r\n    printf(\"Average Mark: %.2f\", average);\r\n    return 0;\r\n}\n/* --- labasses_Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n\r\n    int num_bids = 0;\r\n    int arr[100];\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &num_bids);\r\n    for (size_t i = 1; i < num_bids + 1; i++)\r\n    {\r\n        printf(\"Bid %d: \", i);\r\n        scanf(\"%d\", &arr);\r\n\r\n        if (arr[i] <= 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again:\");\r\n            scanf(\"%d\", &arr);\r\n        }\r\n    }\r\n\r\n        // storing the largest number to arr[0]\r\n    for (int j = 1; j < num_bids; ++j) {\r\n        if (arr[0] < arr[j]) {\r\n        arr[0] = arr[j];\r\n        }\r\n    }\r\n\r\n     printf(\"The highest bid is: %d\", arr[0]);\r\n\r\n    return 0;\r\n}\n/* --- 20577892_AhmedAminMohamedOsman/labasses2_Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int *ptr1;\r\n    int *ptr2;\r\n    char arr[] = {};\r\n    int size = 0;\r\n    int sum = 0;\r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &size);\r\n\r\n\r\n    ptr1 = (int*)malloc(size * sizeof(int));\r\n    ptr2 = (int*)malloc(size * sizeof(int));\r\n\r\n    printf(\"Enter the array elements:\\n\");\r\n\r\n    ptr1 = arr[*ptr1];\r\n    ptr2 = arr[*ptr2];\r\n    for (size_t i = 0; i < size; i++)\r\n    {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &arr);\r\n    }\r\n    \r\n    printf(\"Enter the indices of the two elements (0 <= index1, index < %d):\", size);\r\n    scanf(\"%d %d\", &ptr1, &ptr2);\r\n\r\n    if (ptr1 > arr || ptr2 > arr) {\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again\");\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index < %d):\", size);\r\n        scanf(\"%d %d\", &ptr1, &ptr2);\r\n    }\r\n\r\n    sum = arr[*ptr1] + arr[*ptr2];\r\n    printf(\"The sum of the values at the indices %d and %d is: %d\", *ptr1, *ptr2, sum);\r\n\r\n    return 0;\r\n}\n/* --- 20577892_AhmedAminMohamedOsman/labasses2_Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\nvoid displayStudentData(const char names[NAME_LENGTH], const\r\nfloat marks[]) {\r\n\r\n    printf(\"Student Names and Marks:\\n\");\r\n    for (int j =  0; j<3; j++) {\r\n        printf(\"%c: %.2f\\n\", names[j], marks[j]);\r\n    }\r\n\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    \r\n    // base case\r\n    if (count == 0) {\r\n        return 0;\r\n    }\r\n    else {\r\n        // recursively calling the function\r\n        marks[0] + calculateAverage(marks + 1, count - 1);\r\n    }\r\n\r\n    calculateAverage(marks, count) / 3;\r\n\r\n}\r\n\r\nint main() {\r\n\r\n    char names[NAME_LENGTH]; \r\n    float marks[] = {};\r\n    float average = 0;\r\n\r\n    for (int i =  1; i<4; i++) {\r\n        printf(\"Enter the name of student %d: \", i);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of the student %d: \", i);\r\n        scanf(\"%.2f\", &marks);\r\n        \r\n    }\r\n\r\n    average = calculateAverage(marks, 3);\r\n    displayStudentData(names, marks);\r\n\r\n    printf(\"Average Mark: %.2f\", average);\r\n    return 0;\r\n}\n/* --- 20577892_AhmedAminMohamedOsman/labasses_Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n\r\n    int num_bids = 0;\r\n    int arr[100];\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &num_bids);\r\n    for (size_t i = 1; i < num_bids + 1; i++)\r\n    {\r\n        printf(\"Bid %d: \", i);\r\n        scanf(\"%d\", &arr);\r\n\r\n        if (arr[i] <= 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again:\");\r\n            scanf(\"%d\", &arr);\r\n        }\r\n    }\r\n\r\n        // storing the largest number to arr[0]\r\n    for (int j = 1; j < num_bids; ++j) {\r\n        if (arr[0] < arr[j]) {\r\n        arr[0] = arr[j];\r\n        }\r\n    }\r\n\r\n     printf(\"The highest bid is: %d\", arr[0]);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program has several issues, particularly with variable naming and loop control. The outer loop uses j but references i in the inner loop, leading to a compilation error. Additionally, width is not defined, which will cause further errors. q2:The program effectively implements the required functionality, but consider modifying the average calculation to ensure it reflects a floating-point result. q3:The program calculates the total cost based on user input for different product types and applies a discount. However, the discount application logic is incorrect; it should calculate the discount based on the original price rather than subtracting the discount percentage directly.  incomplete output (case 3 not taking quantity)"
  },
  {
    "student_id": "20611251",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int *arr;             \r\n    int N = 0;                \r\n    int index1, index2;    \r\n    while(N < 5){\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    arr = (int*)malloc(N * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n    }\r\n\r\n    printf(\"Enter the elements of the array:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    while (1){\r\n        printf(\"Enter the indices of the first two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if (index1 >= 0 && index2 <= N){\r\n            int sum = *(arr + index1) + *(arr + index2);\r\n            printf(\"The sum of elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n            break;\r\n        }\r\n        else{\r\n            printf(\"Error: Indices must be within range of the array elements, please try again.\\n\");\r\n        }\r\n    }\r\n\r\n    free(arr);\r\n\r\n    return 0;\r\n\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NUM_STUDENTS 3  \r\n#define NAME_LENGTH 50    \r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\n//Calculate average mark\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];  \r\n    }\r\n    return sum / count;  \r\n}\r\n\r\n//Display student data\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH];   \r\n    float marks[NUM_STUDENTS];                \r\n\r\n    // Input\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);  \r\n        \r\n        printf(\"Enter the marks of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);  \r\n    }\r\n\r\n    float average = calculateAverage(marks, NUM_STUDENTS);\r\n\r\n    // Display student data\r\n    displayStudentData(names, marks);\r\n    printf(\"\\nAverage mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MIN_BID 100000 \r\n\r\nint main() {\r\n    int N;  \r\n    float highestBid = 0;\r\n    float bids[N];\r\n\r\n    printf(\"Enter the number of bids (N >= 2): \");\r\n    scanf(\"%d\", &N);\r\n    while(N < 2){\r\n        if (N < 2) {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again:\");\r\n            scanf(\"%d\", &N);\r\n        }\r\n        else{\r\n            break;\r\n        }\r\n    }\r\n\r\n    printf(\"Enter the bids (must be at least $100,000):\\n\");\r\n    for(int i = 0; i < N; i++) {\r\n        while (bids[i] < MIN_BID) {\r\n            printf(\"Bid %d:\", i + 1);\r\n            scanf(\"%f\", &bids[i]);\r\n            if (bids[i] < MIN_BID) {\r\n                printf(\"Error: Bid must be at least $100,000. Please try again:\");\r\n                scanf(\"%f\", &bids[i]);\r\n            }\r\n        } \r\n    }\r\n\r\n    for (int i = 0; i < N; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks based on user-specified rows and columns. q2: The code effectively performs the required calculations, but it would benefit from using a float for the average q3: The program correctly calculates the total cost and applies a discount based on the product type. It handles the exit condition properly as well."
  },
  {
    "student_id": "20673433",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n   \r\n    do {\r\n        printf(\"Enter the size of the array (N ≥ 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Invalid size! Please enter a number greater than or equal to 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    \r\n    int *array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n\r\n    printf(\"Enter %d elements for the array:\\n\", N);\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i + 1);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    int index1, index2;\r\n\r\n    do {\r\n        printf(\"Enter the first index (0 to %d): \", N - 1);\r\n        scanf(\"%d\", &index1);\r\n        if (index1 < 0 || index1 >= N) {\r\n            printf(\"Invalid index! Please enter a valid index.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N);\r\n\r\n    do {\r\n        printf(\"Enter the second index (0 to %d): \", N - 1);\r\n        scanf(\"%d\", &index2);\r\n        if (index2 < 0 || index2 >= N) {\r\n            printf(\"Invalid index! Please enter a valid index.\\n\");\r\n        }\r\n    } while (index2 < 0 || index2 >= N);\r\n\r\n   \r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    \r\n    printf(\"The sum of elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define STUDENT_COUNT 3\r\n#define NAME_LENGTH 50\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n    int i;\r\n\r\n\r\n    for (i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); // Read student name\r\n\r\n        printf(\"Enter marks of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]); \r\n    }\r\n\r\n   \r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    \r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"Average mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Student %d: %s, Marks: %.2f\\n\", i + 1, names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main()\n{\n    int num;\n    int bids[100];\n  printf(\"Enter the number of bid:\\n\");\n  scanf(\"%d\",&num);\n  if(num<2){\n      printf(\"Please Try Again\");\n  }else{\n     for(int i=0; i<num;i++){\n         printf(\"Enter Bids:\\n\");\n         scanf(\"%d\",&bids[100]);\n         if(bids[100]<100000){\n             printf(\"Please enter at least 100000\");\n         }else{\n             for (int j = 1; j <bids; ++i) {\n             if (bids[0] < bids[j]) {\n              bids[0] = bids[i];\n    }\n         }\n     }\n          \n  }\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program calculates the sum, average, product, smallest, and largest of three integers entered by the user. The calculation of the average uses integer division, which can lead to a loss of precision.  q3:The total price calculations (total, total2, total3, and sums) are performed before the necessary input is taken. This will lead to incorrect values since the weight, price, and item quantities are not yet known when the calculations are done. Syntax error, format specifier not following double."
  },
  {
    "student_id": "20724197",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int input[101];    \r\n    int sizeN;\r\n    int index1;\r\n    int index2;\r\n    int *p = input;\r\n    \r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &sizeN);\r\n\r\n    while(sizeN<5){\r\n        printf(\"Error input!\\n\");\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &sizeN);\r\n\r\n    }\r\n\r\n    printf(\"Enter the array elements:\\n \");\r\n// Read the input string from the user\r\n    for(int i = 0; i < sizeN; i++) {\r\n    \r\n    printf(\"Element %d: \", i);\r\n    scanf(\"%d\", (p+i));\r\n     \r\n  }\r\n\r\n    printf(\"Enter the indices of the two elements(0 <= index1, index2 < %d): \", sizeN);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n    \r\n\r\n\r\n// Check if the index is in the valid range\r\n    while (index1 < 0 || index2 >= sizeN) {\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements(0 <= index1, index2 < %d): \", sizeN);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n           \r\n        }\r\n\r\n    \r\n    int sum = *(p + index1) + *(p + index2);\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    \r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\nfloat calculateAverage(float sumMarks,int count);\r\nvoid displayStudentData(char name[][50], float marks[], int count);\r\n\r\nint main(){\r\n    char name[100][50];\r\n    float marks[100];\r\n    float sum=0;\r\n    int counter=1;\r\n\r\n    \r\n // taking input and storing it in an array\r\n  for(int i = 0; i < 3; i++) {\r\n     printf(\"Enter the name of student %d: \", counter);\r\n     scanf(\" %[^\\n]\", name[i]);\r\n     printf(\"Enter the mark of student %d: \", counter);\r\n     scanf(\"%f\", &marks[i]);\r\n     counter++;\r\n     sum+=marks[i];\r\n  }\r\n    displayStudentData(name, marks,3);\r\n    \r\n   float average=calculateAverage(sum, 3);\r\n\r\n    printf(\"\\n\");\r\n\r\n  printf(\"Average Mark: %.2f\", average);\r\n\r\n  return 0;\r\n}\r\n\r\nvoid displayStudentData(char name[][50], float marks[],int count){\r\n    printf(\"Student Names and Marks:\\n\");\r\n    for(int i = 0; i < count; i++){\r\n    printf(\"%s: %.2f\\n\", name[i], marks[i]);\r\n    }\r\n}\r\n\r\nfloat calculateAverage(float sumMarks, int count){\r\n    return (float)sumMarks/count;\r\n}\r\n\r\n\r\n\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int numbers[20];     // Array to hold the numbers being read\r\n    int unique[20];      // Array to store unique numbers\r\n    int count = 1;       // Counter for the number of unique numbers\r\n    int isDuplicate;     // Flag to check if a number is a duplicate\r\n    int bidsN;\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &bidsN);\r\n\r\n     while(bidsN<2){\r\n        printf(\"Error: Number of bids must be at least 2. Please try again:\\n\");\r\n        scanf(\"%d\", &bidsN);\r\n\r\n    }\r\n\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n\r\n    for (int i = 0; i < bidsN; i++) {  //user can input 20 times with valid numbers\r\n        printf(\"Bid %d :\", count);\r\n        scanf(\"%d\", &numbers[i]);\r\n        count++;\r\n\r\n        // Check if the number is in the valid range\r\n        if (numbers[i] < 100000) {\r\n            printf(\"Bid must be at least $100000. Please try again: \");\r\n            i--; // Decrement i to re-enter the number\r\n            count--;\r\n        }\r\n        \r\n\r\n        }\r\n\r\n       return 0; \r\n\r\n    }\r\n\r\n    \r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly computes the sum, average, product, smallest, and largest of three integers inputted by the user. The fundamental logic is valid, and it produces the expected results. q3:Q3: incorrect calculation"
  },
  {
    "student_id": "20690297",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(void)\r\n{\r\n    int n;\r\n    int index1;\r\n    int index2;\r\n    int *ptr1;\r\n    int *ptr2;\r\n    int result;\r\n\r\n    n = 0;\r\n    while (n < 5)\r\n    {\r\n        printf(\"Enter the number of elements\\n\");\r\n        scanf(\"%d\", &n);\r\n    }\r\n    int *arr = (int*) malloc(sizeof(char)*(n + 1));\r\n\r\n    printf(\"Enter array elements: \\n\");\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n    getchar();\r\n    arr[n] = '\\0';\r\n\r\n\r\n    index1 = -1;\r\n    index2 = -1;\r\n    while ((index1 < 0 || index1 >= n) || (index2 < 0 || index2 >= n))\r\n    {\r\n        printf(\"Enter 2 indices of array elements: \\n\");\r\n        scanf(\"%d\", &index1);\r\n        scanf(\"%d\", &index2);\r\n    }\r\n\r\n    ptr1 = arr;\r\n    while (ptr1 != &arr[index1])\r\n    {\r\n        ptr1++;\r\n    }\r\n\r\n    ptr2 = arr;\r\n    while (ptr2 != &arr[index2])\r\n    {\r\n        ptr2++;\r\n    }\r\n\r\n    result = *ptr1 + *ptr2;\r\n    printf(\"The sum of the values is %d\", result);\r\n\r\n    \r\n\r\n\r\n\r\n\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#define STUD_COUNT 3\r\n#define NAME_LENGTH 50\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main(void)\r\n{\r\n    char names[3][NAME_LENGTH];\r\n    float marks[3];\r\n    float average;\r\n    printf(\"Enter student names and marks\\n\");\r\n\r\n    for (int i = 0; i < 3; i++)\r\n    {\r\n        printf(\"Student %d name: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n\r\n        printf(\"Student %d marks: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    average = calculateAverage(marks, 3);\r\n    displayStudentData(names, marks, 3);\r\n    printf(\"average: %.2f\", average);\r\n\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count)\r\n{\r\n    float total;\r\n    float avg;\r\n\r\n    total = 0.0;\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        total += marks[i];\r\n    }\r\n    avg = total / count;\r\n    return avg;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count)\r\n{\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        printf(\"%s: \", names[i]);\r\n        printf(\"%.2f\", marks[i]);\r\n        printf(\"\\n\");\r\n    }\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint maxer(int arr[], int count);\r\n\r\nint main(void)\r\n{\r\n    int numbids;\r\n    int bid;\r\n    int maxbid;\r\n\r\n    numbids = 0;\r\n    printf(\"Enter the number of bids\\n\");\r\n    while (numbids <= 2)\r\n    {\r\n        scanf(\"%d\", &numbids);\r\n    }\r\n\r\n    int bids[numbids];\r\n    bid = 0;\r\n    maxbid = 0;\r\n\r\n    int i = 0;\r\n    while (i < numbids)\r\n    {\r\n        printf(\"Enter your bid: \\n\");\r\n        scanf(\"%d\", &bid);\r\n\r\n        if (bid < 100000)\r\n        {\r\n            printf(\"Bid cannot be less than $100000\\n\");\r\n        }\r\n        else\r\n        {\r\n            bids[i] = bid;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    maxbid = maxer(bids, numbids);\r\n\r\n    printf(\"The highest bid is: $%d\", maxbid);\r\n}\r\n\r\nint maxer(int arr[], int count)\r\n{\r\n    int max;\r\n\r\n    max = 0;\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        if (arr[i] > max)\r\n        {\r\n            max = arr[i];\r\n        }\r\n    }\r\n    return max;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly calculates the sum, average, product, smallest, and largest of three integers. The calculations and comparisons are implemented accurately.  However, the logic for determining the smallest and largest numbers could be simplified, making it easier to follow. q3:The program correctly computes the total and final costs for various grocery items based on user input. It effectively uses a switch statement to handle different product codes. However, there are some logical issues, particularly in the handling of the total cost and the final cost calculations."
  },
  {
    "student_id": "20721435",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n// prompt user to enter the size of the array where the size must be greater than or equal to 5\r\nint main() {\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    int N;\r\n    int *ptr;\r\n    scanf(\"%d\", &N);\r\n    while (N < 5) {\r\n        printf(\"Error: Size of the array must be >= 5. Please try again: \"); // Error message displayed when the size of the array is less than 5 and prompt user to enter again\r\n        scanf(\"%d\", &N);\r\n    }\r\n    int arr[N];\r\n    // Memory allocates dynamically using malloc()\r\n    ptr = (int *)malloc(N * sizeof(int));\r\n\r\n    // Checking for memory allocation\r\n    if (ptr == NULL) {\r\n        printf(\"Memory not allocated.\\n\");\r\n    } else {\r\n        // prompt user to enter the array elements where the number of elements must be equal to the size-1 of the array\r\n        printf(\"Enter the array elements: \\n\");\r\n        for (int i = 0; i < N; i++) {\r\n            printf(\"Element %d: \", i);\r\n            scanf(\"%d\", &arr[i]);\r\n        }\r\n\r\n        // prompt user to enter the indices of two elements where the indices must be within the range of the array elements\r\n        do {\r\n            printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n            int index1, index2;\r\n            scanf(\"%d %d\", &index1, &index2);\r\n\r\n            if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n                // calculate the sum of the values at the indices and display the sum\r\n                int sum = *(arr + index1) + *(arr + index2);\r\n                printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n                break;\r\n            } else {\r\n                printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\"); // Error message displayed when the indices are not in range\r\n            }\r\n        } while (1);\r\n    }\r\n\r\n    free(ptr);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define MAX 50\r\n#define NAME_LENGTH 50\r\n\r\n// function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]); // NAME_LENGTH 50 \r\n\r\nint main() {\r\n    char names[MAX][NAME_LENGTH];\r\n    float marks[MAX];\r\n    // prompt user to enter student names and marks\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"Enter the name of student %d: \", i+1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter student marks: \");\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n    displayStudentData(names, marks); // call the function displayStudentData\r\n\r\n    return 0;\r\n}\r\n\r\n// function to display student names, marks and the average mark\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent names and Marks:\\n\");\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    printf(\"\\nAverage Mark: %.2f\\n\", calculateAverage(marks, 3)); // display the average mark by calling the function calculateAverage\r\n}\r\n\r\n// function to calculate the average mark\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float avg = 0;\r\n    avg = (marks[0] + marks[1] + marks[2]) / count;\r\n    return avg;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#define MAX 100\r\n\r\nint main() {\r\n    // prompt user to enter the number of bids where the number of bids must be at least 2\r\n    int numBids;\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &numBids);\r\n    while (numBids < 2) {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \"); // Error message displayed when the number of bids is less than 2 and prompt user to enter again\r\n        scanf(\"%d\", &numBids);\r\n    }\r\n\r\n    // prompt user to enter the bids where the bid must be at least $100000\r\n    int bids[MAX];\r\n    printf(\"Enter the bids (must be at least $100000) : \\n\");\r\n    for (int i = 0; i < numBids; i++) {\r\n        printf(\"Bid %d: \", i+1);\r\n        scanf(\"%d\", &bids[i]);\r\n        while (bids[i] < 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \"); // Error message displayed when the bid is less than $100000 and prompt user to enter again\r\n            scanf(\"%d\", &bids[i]);\r\n        }\r\n    }\r\n\r\n    // calculate the highest bid\r\n    int highestBid = bids[0];\r\n    for (int i = 0; i < numBids; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // display the highest bid\r\n    printf(\"The highest bid is: $%d\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20718864",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N, array[100], index1, index2, sum; //maximum size of 100.\r\n\r\n\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Error: N must be at least 5. Please try again.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (array + i)); \r\n    }\r\n\r\n\r\n    do {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    sum = *(array + index1) + *(array + index2); \r\n\r\n\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define STUDENT_AMOUNT 3\r\n#define NAME_LENGTH 50\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[STUDENT_AMOUNT][NAME_LENGTH]; \r\n    float marks[STUDENT_AMOUNT];            \r\n    float average;\r\n\r\n// Input the name and grade\r\n    for (int i = 0; i < STUDENT_AMOUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); \r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n//determine average\r\n    average = calculateAverage(marks, STUDENT_AMOUNT);\r\n\r\n\r\n    displayStudentData(names, marks, STUDENT_AMOUNT);\r\n    printf(\"Average Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Name and Marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n\r\n    int N;\r\n    float bids[50]; // assuming maximum of 50 people is going to attend\r\n\r\n    printf(\"Enter number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // ensure that the bid is more than 2\r\n    if(N<2) {\r\n        printf(\"Not enough bids to determine the highest bid.\\n\");\r\n        return 0;\r\n    }\r\n    \r\n    // Input the bid value\r\n    for (int j = 0; j < N; j++){\r\n        do {\r\n            printf(\"Enter the value of bid %d: \", j + 1);\r\n            scanf(\"%f\", &bids[j]);\r\n            if (bids[j] < 100000){\r\n                printf(\"Bid must be at least $100000. Please try again: \\n\");\r\n            }\r\n        } while (bids[j] < 100000);\r\n    }\r\n\r\n    // determine the highest bid\r\n    float highestBid = bids[0]; \r\n    for (int j = 1; j < N; j++) {\r\n        if (bids[j] > highestBid){\r\n            highestBid = bids[j];\r\n        }\r\n    }\r\n\r\n\r\n    printf(\"The highest bid is: $%2.f\", highestBid);\r\n\r\n    return 0;\r\n}\r\n\r\n    ",
    "feedback": "q1:Rows and columns should be from user.The code effectively accomplishes the task of printing a grid of asterisks. If the sum function is not needed, consider removing it to streamline the code. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. However, the average is calculated as an integer, which may lead to loss of precision. q3:The code does not correctly implement the required functionality. Focus on properly handling user input and performing calculations for costs and discounts. Consider reviewing how to properly use scanf and control structures for a better implementation."
  },
  {
    "student_id": "20505065",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N, *array, index1, index2, sum;\r\n    \r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Error: The size of the array must be at least 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n    \r\n    array = (int *)malloc(N * sizeof(int));\r\n    if  (array == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n    \r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"&d\", (array + i));\r\n    }\r\n    \r\n    while (1) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", %index1, %index2);\r\n        \r\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n            break;\r\n        } else {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    }\r\n    \r\n    sum = *(array + index1) + *(array + index2);\r\n    \r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n    \r\n    free(array);\r\n    \r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNCIL][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n    float average;\r\n    \r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n    \r\n    average = calculateAverage(marks, STUDENT_COUNCIL);\r\n    \r\n    displayStudentData(names, marks);\r\n    printf(\"Average Mark: %.2f\\n\", average);\r\n    \r\n    return 0;\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf('%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: 1 syntax error but overall ok. Q3: incorrect discounted price"
  },
  {
    "student_id": "20593212",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n// Function to get valid indices from the user\r\nvoid getValidIndices(int *index1, int *index2, int n) {\r\n    // Loop to ensure the first index is valid\r\n    do {\r\n        printf(\"Enter the first index (0 <= index1 < %d): \", n);\r\n        scanf(\"%d\", index1);\r\n        if (*index1 < 0 || *index1 >= n) {\r\n            printf(\"Invalid index1! Please enter a valid index.\\n\");\r\n        }\r\n    } while (*index1 < 0 || *index1 >= n);\r\n\r\n    // Loop to ensure the second index is valid\r\n    do {\r\n        printf(\"Enter the second index (0 <= index2 < %d): \", n);\r\n        scanf(\"%d\", index2);\r\n        if (*index2 < 0 || *index2 >= n) {\r\n            printf(\"Invalid index2! Please enter a valid index.\\n\");\r\n        }\r\n    } while (*index2 < 0 || *index2 >= n);\r\n}\r\n\r\nint main() {\r\n    int N;\r\n\r\n    // Step 1: Prompt user for array size and validate N >= 5\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Invalid size! The size must be at least 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // Step 2: Dynamically allocate memory for the array\r\n    int *arr = (int *)malloc(N * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;  // Exit if memory allocation fails\r\n    }\r\n\r\n    // Step 3: Prompt user to enter array elements\r\n    printf(\"Enter the elements of the array:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    int index1, index2;\r\n\r\n    // Step 4: Prompt user to enter the two indices\r\n    getValidIndices(&index1, &index2, N);\r\n\r\n    // Step 5: Use pointers to calculate the sum of the two target elements\r\n    int sum = *(arr + index1) + *(arr + index2); // Pointer-based access\r\n\r\n    // Step 6: Print the sum of the two elements\r\n    printf(\"The sum of the elements at index %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free the dynamically allocated memory\r\n    free(arr);\r\n\r\n    return 0;\r\n}\r\n\n/* --- q2.c --- */\n#include <stdio.h>\r\n\r\n#define NUM_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\n// Function Prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() {\r\n    // Arrays to store student names and marks\r\n    char names[NUM_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_STUDENTS];\r\n    \r\n    // Loop to input student data\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);  // Read name with spaces\r\n\r\n        printf(\"Enter marks for %s: \", names[i]);\r\n        scanf(\"%f\", &marks[i]);  // Read marks\r\n    }\r\n\r\n    // Calculate the average mark\r\n    float average = calculateAverage(marks, NUM_STUDENTS);\r\n\r\n    // Display student data and average mark\r\n    displayStudentData(names, marks);\r\n    printf(\"Average mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to calculate the average mark\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    \r\n    // Calculate sum of marks\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n\r\n    // Return the average\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names, marks, and average\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Student %d: %s, Marks: %.2f\\n\", i + 1, names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- q3.c --- */\n#include <stdio.h>\r\n\r\n#define MIN_BID 100000  // Minimum bid value\r\n\r\nint main() {\r\n    int N;\r\n\r\n    // Input the number of bids\r\n    do {\r\n        printf(\"Enter the number of bids (N ≥ 2): \");\r\n        scanf(\"%d\", &N);\r\n\r\n        if (N < 2) {\r\n            printf(\"Invalid input. The number of bids must be at least 2.\\n\");\r\n        }\r\n    } while (N < 2);\r\n\r\n    // Array to store the bids\r\n    float bids[N];\r\n\r\n    // Input the bids with validation\r\n    for (int i = 0; i < N; i++) {\r\n        do {\r\n            printf(\"Enter bid %d (must be at least $%d): \", i + 1, MIN_BID);\r\n            scanf(\"%f\", &bids[i]);\r\n\r\n            if (bids[i] < MIN_BID) {\r\n                printf(\"Bid must be at least $%d. Please try again.\\n\", MIN_BID);\r\n            }\r\n        } while (bids[i] < MIN_BID);\r\n    }\r\n\r\n    // Find the highest bid\r\n    float highestBid = bids[0];\r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Output the highest bid\r\n    printf(\"\\nThe highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "No submission"
  },
  {
    "student_id": "20715036",
    "code": "\n/* --- Q1.c --- */\n#include<stdio.h>\r\n#include<stdlib.h>\r\n\r\nint main(){\r\n    size_t N;\r\n    printf(\"Enter the size of the array (N>=5)\");\r\n    scanf(\"%d\",&N);\r\n    if(N<5){\r\n        printf(\"Invalid input\");\r\n        exit(0);\r\n    }\r\n   \r\n    int array[N];\r\n    printf(\"Enter the array element\\n\");\r\n    for(size_t i=0; i<N; i++){\r\n        printf(\"Element %zu :\",i);\r\n        scanf(\"%d\",&array[i]);\r\n    }\r\n    int indice1,indice2;\r\n    printf(\"Enter the indices of the two element\"\r\n           \" (0<=index1,index2<%zu)\",N);\r\n    scanf(\"%d %d\", &indice1,&indice2);\r\n    while((N<indice1<0) || (N<indice2<0)){\r\n        printf(\"Error: Indice must be within the range. Please try again\");\r\n        printf(\"Enter the indices of the two element\"\r\n               \" (0<=index1,index2<%d)\",N);\r\n        scanf(\"%d %d\", &indice1,&indice2);\r\n    }\r\n    \r\n    int *Ptr1=&array[indice1];\r\n    int *Ptr2=&array[indice2];\r\n    int sum=*Ptr1+*Ptr2;\r\n    printf(\"The sum of the values at indice %d and %d is %d:\",indice1,indice2,sum);\r\n\r\n}\n/* --- Q2.c --- */\n#include<stdio.h>\r\n#define a 3\r\n#define name_length 50\r\n\r\nvoid display(const char name[][name_length], const float mark[]);\r\nvoid average(const float mark[], int count);\r\n\r\n\r\nint main(){\r\n    char name[a][name_length];\r\n    float mark[a];\r\n    for(size_t i=0;i<a;i++){\r\n        printf(\"Enter the name of student %zu:\",i+1);\r\n        scanf(\"  %c \", &name[i][name_length]);\r\n        printf(\"Enter the mark of student %zu:\", i+1);\r\n        scanf(\"%f\", &mark[i]);\r\n    }\r\n\r\n  \r\n}\n/* --- Q3.c --- */\n#include<stdio.h>\r\n\r\nint main(){\r\n    int numbid;\r\n    printf(\"Enter the number of bids:\");\r\n    scanf(\"%d\",&numbid);\r\n    while(numbid<2){\r\n        printf(\"Error: Number of bids must be at least 2 Pleas try again\");\r\n        scanf(\"%d\",&numbid);\r\n    }\r\n\r\n    printf(\"Enter the bid (must be at least $100000)\\n\");\r\n    long long int array[numbid];\r\n    for(size_t i=0;i<numbid;i++){\r\n        printf(\"Bid %d:\",i+1);\r\n        scanf(\"%lld\",&array[i]);\r\n        while(array[i]<100000){\r\n            printf(\"Bid must be at least $100000. Please try again\");\r\n            scanf(\"%lld\",&array[i]);\r\n        }\r\n    }\r\n    \r\n    long long int highest=array[0];\r\n    for(size_t j=1;j<numbid;j++){\r\n         if(highest<array[j]){\r\n            highest=array[j];\r\n         }\r\n    }\r\n    printf(\"The highest is:%lld\", highest);\r\n    \r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:Syntax error. The scanf for the discount percentage is missing the address operator (&). Otherwise, fine."
  },
  {
    "student_id": "20599677",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main(){\r\n    int N, i, index1, index2;\r\n\r\n    //enter size of array\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    //declaring array\r\n    int arr[N];\r\n    int *ptr1;\r\n\r\n    //enter array elements\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (i = 0; i < N; i++){\r\n        ptr1 = &arr[i];\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", ptr1);\r\n    }\r\n\r\n    while(1){\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < 6): \");\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        if(0 <= index1 && index1 < N && index2 >= 0 && index2 < N){\r\n            break;\r\n        } else{\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\");\r\n        }\r\n\r\n    }\r\n\r\n    //calculate sum of specified indices\r\n    ptr1 = &arr[index1];\r\n    int *ptr2 = &arr[index2];\r\n    int sum = *ptr1 + *ptr2;\r\n    printf(\"The sum of values at indices 4 and 5 is: \", sum);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define MAX_STUDENTS 3\r\n#define MAX_NAME 50\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][MAX_NAME], const float marks[], int count);\r\n\r\n// Function to calculate average mark\r\nfloat calculateAverage(const float marks[], int count){\r\n    float sum = 0.0;\r\n    for(int i = 0; i < count; i++){\r\n        sum += marks[i];\r\n    }\r\n    return sum/count;\r\n}\r\n\r\n// Function to display student names, marks, and average mark\r\nvoid displayStudentData(const char names[][MAX_NAME], const float marks[], int count){\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for(int i = 0; i < count; i++){\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main(){\r\n    char names[MAX_STUDENTS][MAX_NAME];\r\n    float marks[MAX_STUDENTS];\r\n\r\n    for(int i = 0; i < MAX_STUDENTS; i++){\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); // Use \" %[^\\n]\" to handle spaces in names\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    float calc_average = calculateAverage(marks, MAX_STUDENTS);\r\n\r\n    displayStudentData(names, marks, MAX_STUDENTS);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", calc_average);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main(){\r\n    int N;\r\n    int bids[N];\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    if(N<2){\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n    \r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    \r\n    for(int i = 0; i < N; i++){\r\n\r\n        while(1){  \r\n            printf(\"Bid %d: \", i+1);\r\n            scanf(\"%d\", &bids[i]);\r\n\r\n            if(bids[i] >= 100000){\r\n                break;\r\n            }\r\n\r\n            else{\r\n                printf(\"Error: Bid must be at least $100000. Please try again.\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    int highest_bid = bids[0];\r\n    for(int i = 1; i < N; i++){\r\n        if(bids[i] > highest_bid){\r\n            highest_bid = bids[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: %d\", highest_bid);\r\n\r\n\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20611327",
    "code": "\n/* --- Q1/main.c --- */\n/******************************************************************************\n\nWelcome to GDB Online.\n  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, \n  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS\n  Code, Compile, Run and Debug online from anywhere in world.\n\n*******************************************************************************/\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N, *array, index1, index2, sum;\n\n    // Prompt user to enter the size of the array and check the validation\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"Error: N must be at least 5. Please try again.\\n\");\n        }\n    } while (N < 5);\n\n    // Try to allocate the memory for the array\n    array = (int *)malloc(N * sizeof(int));\n    if (array == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n\n    //  Enter the input elements into the array\n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (array + i));\n    }\n\n    //  Prompt user to enter the value of indices and check the validation\n    while (1) {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\n            break; // Validation of the indices\n        } else {\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    }\n\n    // Calculate the sum (using pointers)\n    sum = *(array + index1) + *(array + index2);\n\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    return 0;\n}\n\n/* --- Q2/main.c --- */\n/******************************************************************************\n\nWelcome to GDB Online.\nGDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,\nC#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.\nCode, Compile, Run and Debug online from anywhere in world.\n\n*******************************************************************************/\n#include <stdio.h>\n#define NAME_LENGTH 50 // Maximum length for a student name\n#define STUDENT_COUNT 3 // The number of students\n\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\n\nint main() {\n    char names[STUDENT_COUNT][NAME_LENGTH]; \n    float marks[STUDENT_COUNT];           \n    int i;\n\n    // Prompt the user to enter names and marks\n    for (i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]); // Input name\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]); // Input marks\n    }\n\n    // Calculate the average mark\n    float average = calculateAverage(marks, STUDENT_COUNT);\n\n    // Display the student data and average mark\n    displayStudentData(names, marks, STUDENT_COUNT);\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n// Function to calculate the average mark of the students\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n// Function to display all the student names, marks, and the average\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\n/* --- Q3/main.c --- */\n/******************************************************************************\n\nWelcome to GDB Online.\nGDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,\nC#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.\nCode, Compile, Run and Debug online from anywhere in world.\n\n*******************************************************************************/\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N;               // Number of bids\n    float *bids;        \n    int i;\n    float highest_bid = 0; \n\n    // Prompt user to enter the number of bids and check the validation\n    do {\n        printf(\"Enter the number of bids: \");\n        scanf(\"%d\", &N);\n        if (N < 2) {\n            printf(\"Error: Number of bids must be at least 2. Please try again: \");\n            scanf(\"%d\", &N);\n        }\n    } while (N < 2);\n\n    // Allocate the memory to store the bids\n    bids = (float *)malloc(N * sizeof(float));\n    if (bids == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n\n    // Input each bid and check the validation\n    printf(\"Enter the bids (must be at least $100000):\\n\");\n    for (i = 0; i < N; i++) {\n            printf(\"Bid %d: \", i + 1);\n            scanf(\"%f\", &bids[i]);\n            while (bids[i] < 100000) {\n                printf(\"Error: Bid must be at least $100000. Please try again: \");\n                scanf(\"%f\", &bids[i]);\n            }\n    }\n\n    // Determine the highest bid\n    highest_bid = bids[0];\n    for (i = 1; i < N; i++) {\n        if (bids[i] > highest_bid) {\n            highest_bid = bids[i];\n        }\n    }\n\n    // Display the highest bid\n    printf(\"The highest bid is: $%.0f\\n\", highest_bid);\n\n    return 0;\n}\n\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20614437",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program correctly accepts user input for product types, calculates costs based on weight and price, and applies discounts.Calling main() recursively in the default case is not a good practice. Instead, consider using a loop to repeat the input prompt until a valid selection is made. The variables weight, price, and discountpercent can be declared as float if you want to handle scenarios where prices or weights may include decimal values"
  },
  {
    "student_id": "20706147",
    "code": "\n/* --- q1/main.c --- */\n/******************************************************************************\n\nWelcome to GDB Online.\nGDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,\nC#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.\nCode, Compile, Run and Debug online from anywhere in world.\n\n*******************************************************************************/\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N, *arr, index1, index2;\n    // Prompt the size of the array (N >= 5)\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n    } while (N < 5);\n    // Dynamicallt allocate memory for the array\n    arr = (int*)malloc(N * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory allocation failed.\\n\");\n        return 1;  // Exit the program if memory allocation fails\n    }\n    // Prompt each element of the array\n    printf(\"Enter the elements of the array:\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", &arr[i]);\n    }\n    // Prompt the two indices and validate\n    do {\n        printf(\"Enter the two indices (0 <= index1, index2 < N): \");\n        scanf(\"%d %d\", &index1, &index2);\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\n            printf(\"Invalid indices. Please try again.\\n\");\n        }\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\n\n    //Calculate the sum of the two elements\n    int *ptr1 = arr + index1; \n    int *ptr2 = arr + index2;\n    int sum = *ptr1 + *ptr2; \n    // Print the sum of the two elements\n    printf(\"The sum of the elements at indices %d and %d is: %d\\n\", index1, index2, sum);\n    free(arr);\n    return 0;\n}\n\n/* --- q2/main.c --- */\n/******************************************************************************\n\nWelcome to GDB Online.\n  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, \n  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS\n  Code, Compile, Run and Debug online from anywhere in world.\n\n*******************************************************************************/\n#include <stdio.h>\n\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][50], const float marks[]);\n\nint main() {\n    int NUM_STUDENTS = 3;  // Number of students (could also be user input)\n    int NAME_LENGTH = 50;   // Maximum length of each student's name\n\n    // Arrays to store student names and marks\n    char names[NUM_STUDENTS][NAME_LENGTH];\n    float marks[NUM_STUDENTS];\n    \n    // Prompt the user to enter student names and marks\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"Enter name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);  // Read full name, including spaces\n        \n        printf(\"Enter marks for student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);  // Read the marks as a floating-point number\n    }\n\n    // Calculate the average marks\n    float average = calculateAverage(marks, NUM_STUDENTS);\n    \n    // Display the student data and average marks\n    displayStudentData(names, marks);\n    printf(\"Average mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n// Function to calculate the average of marks\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;  // Return the average\n}\n\n// Function to display student names, marks, and average\nvoid displayStudentData(const char names[][50], const float marks[]) {\n    printf(\"\\nStudent Data:\\n\");\n    for (int i = 0; i < 3; i++) {  // The number of students is hardcoded as 3\n        printf(\"Student %d: %s, Marks: %.2f\\n\", i + 1, names[i], marks[i]);\n    }\n}\n\n/* --- q3/main.c --- */\n/******************************************************************************\n\nWelcome to GDB Online.\n  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, \n  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS\n  Code, Compile, Run and Debug online from anywhere in world.\n\n*******************************************************************************/\n#include <stdio.h>\n\nint main() {\n    int N;\n    float MIN_BID = 100000;  \n    \n    // Get the number of bids from \n    printf(\"Enter the number of bids (N): \");\n    scanf(\"%d\", &N);\n    \n    // Validate N is at least 2\n    if (N < 2) {\n        printf(\"Error: There must be at least 2 bids to determine the highest bid.\\n\");\n        return 1;  // Exit the program if not valid\n    }\n\n    // Declare an array to store the bids\n    float bids[N];\n\n    // Get the bids from the user with validation\n    for (int i = 0; i < N; i++) {\n        do {\n            printf(\"Enter bid %d (at least $%.0f): \", i + 1, MIN_BID);\n            scanf(\"%f\", &bids[i]);\n            \n            // Validate the bid\n            if (bids[i] < MIN_BID) {\n                printf(\"Bid must be at least $%.0f. Please enter a valid bid.\\n\", MIN_BID);\n            }\n        } while (bids[i] < MIN_BID);  // Repeat until a valid bid is entered\n    }\n    \n    //Determine the highest bid\n    float highestBid = bids[0];  \n    for (int i = 1; i < N; i++) {\n        if (bids[i] > highestBid) {\n            highestBid = bids[i];  \n        }\n    }\n    //Output the highest bid\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\n    return 0;\n}\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: incomplete output (no product) q3: The program is intended to calculate the total cost and final cost after applying a discount based on the product type. However, there are several critical issues that prevent it from functioning correctly.You're using %d to read values for variables that will be used for calculations involving prices (which may require floating-point calculations). You should use %f The discount calculation in the print statement is incorrect. You should divide discount by 100.0 to convert it into a percentageThe variable product_code is an integer, but you are using string literals in the switch statement."
  },
  {
    "student_id": "20700473",
    "code": "\n/* --- Q1.c --- */\n#include<stdio.h>\n#include<stdlib.h>\n\n//function which can check if the indices are valid\nint ifvalidindex (int index, int size) {\n    if (index >= 0 && index < size) {\n        return 1;\n    }\n    return 0;\n}\nint main(){\n    int N;\n    printf(\"Enter the size of the array (N >= 5): \");\n    scanf(\"%d\", &N);\n    while(N < 5) {\n        printf(\"The size is invalid. Please enter a size greater or equal to 5: \");\n        scanf(\"%d\", &N);\n    }\n    int *array = (int *)malloc(N *sizeof(int)); //allocate meomroy for array\n    if (array == NULL) {\n        printf(\"Memmory allocation is failed\\n\");\n        return 1;\n    }\n    printf(\"Enter the array elements: \\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (array + i));   //access the number i element in array\n    }\n    int index1, index2;\n    printf(\"Enter the indices of the two elements: \");\n    scanf(\"%d %d\", &index1, &index2);\n    \n    while (!ifvalidindex(index1, N) || !ifvalidindex(index2, N)){\n        printf(\"Indice must be within the range of the array elements. Please try again.\\n\");\n        printf(\"Enter the indices of the two elements again: \");\n        scanf(\"%d %d\", &index1, &index2);\n    }\n    int sum = *(array + index1) + *(array + index2);\n    printf(\"The sum of the values at indices %d and %d is %d \\n\", index1, index2, sum); //find the sum of values of index 1 and 2\n    \n    free(array); //free allocated memory\n    return 0;\n}\n\n/* --- Q2.c --- */\n#include<stdio.h>\n#define NAME_LENGTH 50\n#define NUMBER_STUDENT 3\n\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count, float average);\n\nint main (void){\n    char names[NUMBER_STUDENT][NAME_LENGTH];\n        float marks[NUMBER_STUDENT];\n        int count = NUMBER_STUDENT;\n        for (int i = 0; i < count; i++) {\n            printf(\"Enter name of student %d: \", i + 1);\n            scanf(\" %[^\\n]\", names[i]); // Read the student's name\n            printf(\"Enter mark of student %d: \", i + 1);\n            scanf(\"%f\", &marks[i]); // Read the student's mark\n        }\n\n        // Step 2: Calculate the average mark\n        float average = calculateAverage(marks, count);\n        displayStudentData(names, marks, count, average);\n        return 0;\n}\n\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    int averageresult = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks [], int count, float average) {\n    printf(\"\\nStudent Name and Marks: \\n\");\n    for (int i = 1; i <= count; i++) {\n        printf(\"%s: %.2f\\n\", names[i-1], marks[i-1]);\n    }\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\n}\n\n/* --- Q3.c --- */\n#include<stdio.h>\n#include<stdlib.h>\n\nfloat findhighestbid (const float bids[], int count);\nint main() {\n    int N;\n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &N);\n    if (N < 2) {\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\n        scanf(\"%d\", &N);\n    }\n    float *bids = (float* )malloc(N * sizeof(float));\n    if (bids == NULL) {\n        printf(\"Error: Memroy allocated failed.\\n\");\n        return 1;\n    }\n    printf(\"Enter the bids (must be at least $100000): \\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Enter bid %d: $\", i + 1);\n        scanf(\"%f\", &bids[i]);\n        while (bids[i] < 100000) {\n            printf(\"Error: bids must be at least $100000. Please try again: \");\n            scanf(\"%f\", &bids[i]);\n        }\n    }\n    float highestbid = findhighestbid (bids, N);\n    printf(\"The highest bid is $%.f\\n\", highestbid);\n    free(bids);\n    return 0;\n}\n\nfloat findhighestbid (const float bids[], int count) {\n    float highest = bids[0];\n    for (int i = 1; i < count; i++) {\n        if (bids[i] > highest) {\n            highest = bids[i];\n        }\n    }\n    return highest;\n}\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20595637",
    "code": "\n/* --- Q1.C --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n    // Ask the user for array size and verify\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"The size is not valid! Please enter a value greater than or equal to 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // Create a resizable array\r\n    int* arr = (int*)malloc(N * sizeof(int));\r\n\r\n    // checking if memory is allocated successfully\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation not successful!\\n\");\r\n        return -1;\r\n    }\r\n\r\n    // Ask user to enter each element of the array\r\n    printf(\"Enter %d elements:\\n\", N);\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i + 1);\r\n        scanf(\"%d\", arr + i);\r\n    }\r\n\r\n    int index1, index2;\r\n\r\n    // Ask the user for position of array and verify\r\n    do {\r\n        printf(\"Enter the position of the two elements (0 to %d):\\n\", N - 1);\r\n        printf(\"Index 1: \");\r\n        scanf(\"%d\", &index1);\r\n        printf(\"Index 2: \");\r\n        scanf(\"%d\", &index2);\r\n\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Invalid index(es)! Please enter values within the range.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    // Calculate the sum using a pointer\r\n    int sum = *(arr + index1) + *(arr + index2);\r\n\r\n    // Print the output\r\n    printf(\"Element at Index %d: %d\\n\", index1, *(arr + index1));\r\n    printf(\"Element at Index %d: %d\\n\", index2, *(arr + index2));\r\n    printf(\"The sum of the two elements is: %d\\n\", sum);\r\n\r\n    // memory allocated during run time\r\n    free(arr);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.C --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 80\r\n#define STUDENT_COUNT 3\r\n\r\n// Function to calculate the average mark of the students\r\nfloat calculateAverage(const float marks[], int count);\r\n\r\n// Function to display the student data\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], float average);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n\r\n    // Ask the user to enter student names and marks\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of Student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of Student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // Calculating the average mark\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    // Display student data\r\n    displayStudentData(names, marks, average);\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to calculate the average mark\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0f;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display the data of the students\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], float average) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Student %d: %s - Mark: %.2f\\n\", i + 1, names[i], marks[i]);\r\n    }\r\n    printf(\"Average Mark: %.2f\\n\", average);\r\n}\n/* --- Q3.C --- */\n#include <stdio.h>\r\n\r\n// defining the minimum amt of bid\r\n#define MIN_BID 100000\r\n\r\nint main() {\r\n    // variable to store the number of bids\r\n    int numberOfBids;\r\n\r\n    // Ask the user to enter the number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &numberOfBids);\r\n\r\n    // Check the number of bids to ensure it's at least 2\r\n    while (numberOfBids < 2) {\r\n        // Display an error message to tell the user to try again\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &numberOfBids);\r\n    }\r\n\r\n    // Declaring an array\r\n    int bids[numberOfBids];\r\n\r\n    for (int i = 0; i < numberOfBids; i++) {\r\n        int bid;\r\n        \r\n        do {\r\n            // Display and ask user to enter the bid amt\r\n            printf(\"Enter bid %d (must be at least $%d): \", i + 1, MIN_BID);\r\n            scanf(\"%d\", &bid);\r\n            // Check if the bid amount is less than the minimum bid\r\n            if (bid < MIN_BID) {\r\n                // Display an error message and ask the user to try again\r\n                printf(\"Error: Bid must be at least $%d. Please try again: \", MIN_BID);\r\n            }\r\n        } while (bid < MIN_BID);\r\n        // Store the valid bid amount in the array\r\n        bids[i] = bid;\r\n    }\r\n\r\n    // Initialize the highest bid to the first bid in the array\r\n    int highestBid = bids[0];\r\n    // Loop through the remaining bids to find the highest one\r\n    for (int i = 1; i < numberOfBids; i++) {\r\n        // Check if the current bid is higher than the highest bid found so far\r\n        if (bids[i] > highestBid) {\r\n            // Update the highest bid\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Display the highest bid\r\n    printf(\"\\nThe highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly prompts the user for a number of integers, calculates the sum, average, product, smallest, and largest values. It also enforces a minimum requirement of three integers, which is great for input validation. q3: there are several issues with the implementation, particularly with input handling and structure that need addressing for proper functionality. The structure is mostly logical, but there are redundancy and syntax errors that hinder its effectiveness.The code does not currently handle discounts, even though the discount variable is declared. You may want to incorporate functionality to apply a discount based on user input."
  },
  {
    "student_id": "20714140",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    int num;\r\n    int* ptr;\r\n    \r\n    printf(\"Enter the size of the array (N>=5): \");\r\n    scanf(\"%d\",&num);\r\n    while (num<5){\r\n        printf(\"Please enter a value bigger or equal to 5 for the size of the array: \");\r\n        scanf(\"%d\",&num);\r\n    }\r\n    \r\n    int num_array[num];\r\n    ptr = (int*)malloc(num * sizeof(int)); //memory allocation\r\n    \r\n    if (ptr == NULL){\r\n        printf(\"Memory not allocated.\\n\");\r\n    }\r\n    \r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0;i<num;++i){\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\",&ptr[i]);\r\n    }\r\n    \r\n    int index1,index2;\r\n    \r\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \",num);\r\n    scanf(\"%d\",&index1);\r\n    scanf(\"%d\",&index2);\r\n    while (index1 < 0 || index2 >= num) { //or gate to check both conditions\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \",num);\r\n        scanf(\"%d\",&index1);\r\n        scanf(\"%d\",&index2);\r\n    }\r\n    \r\n    int sum = ptr[index1] + ptr[index2]; //sum of the two indexes\r\n    printf(\"The sum of the values at indices %d and %d is %d\", index1,index2,sum);\r\n    \r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h> \r\n#define NAME_LENGTH 50\r\n#define STUDENT_NUM 3\r\n\r\nfloat calculateAverage(const float marks[], int count){\r\n    int total = 0;\r\n    float average;\r\n    for(int i = 0; i<count;i++){\r\n        total += marks[i];\r\n    }\r\n    average = (float) total / count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]){\r\n    printf(\"Student Names and Marks: \\n\");\r\n    for (int j = 1; j<=3;j++){\r\n        printf(\"%c: %.2f\\n\",names[j],marks[j]);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    float marks[STUDENT_NUM];\r\n    char names[STUDENT_NUM][NAME_LENGTH];\r\n    int lineCount = 0;\r\n    \r\n    for (int i = 1;i<=STUDENT_NUM;i++){\r\n        printf(\"Enter the name of student %d: \",i);\r\n        while (lineCount < NAME_LENGTH) { \r\n            fgets(names[lineCount], NAME_LENGTH, stdin); \r\n            // Remove newline character if present \r\n            names[lineCount][strcspn(names[lineCount], \"\\n\")] = '\\0'; \r\n            lineCount++;\r\n            break;\r\n        }\r\n        \r\n        printf(\"Enter the mark of student %d: \",i);\r\n        scanf(\"%f\",&marks[i]);\r\n    }\r\n    \r\n    displayStudentData(names,marks);\r\n    float ave = calculateAverage(marks,STUDENT_NUM);\r\n    printf(\"\\nAverage Mark: %.2f\",ave);\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#define MINIMUM 100000\r\n\r\nint main()\r\n{\r\n    int bidnum;\r\n    \r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\",&bidnum);\r\n    while (bidnum < 2){\r\n        printf(\"Error: number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\",&bidnum);\r\n    }\r\n\r\n    int bids[bidnum];\r\n    int bid;\r\n    int highest;\r\n    printf(\"Enter the bids (must be at least $%d)\\n\", MINIMUM);\r\n    for (int i = 1;i<=bidnum;i++){\r\n        printf(\"Bid %d: \", i);\r\n        scanf(\"%d\",&bid);\r\n        while (bid < MINIMUM){\r\n            printf(\"Error: Bid mut be at least $%d. Please try again: \", MINIMUM);\r\n            scanf(\"%d\",&bid);\r\n        }\r\n        if (i == 1){\r\n            highest = bid;\r\n        } else if (bid > highest){\r\n            highest = bid;\r\n        }// if not the first loop, check if the bid entered is higher than the highest bid recorded\r\n    }\r\n    printf(\"The highest bid is: $%d\",highest);\r\n    \r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program effectively calculates the sum, average, product, smallest, and largest of three integers provided by the user. The logic for handling inputs and calculations is sound. q3: case 3 & 4 asking for weight instead of quantity"
  },
  {
    "student_id": "20723870",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h> \r\n\r\nvoid main() {\r\n    int n = 0;\r\n    int i, j, index1, index2, value1, value2, size ; //variable declaration and initialisation\r\n    int* integer=NULL;\r\n    //int* k = &integer[0];\r\n    printf(\"Enter size of arrays(N>=5): \\n\"); \r\n    while (1) { //checking user's array size\r\n        scanf(\" %d\", &n);\r\n        if (n<5) {\r\n            printf(\"Please enter bigger than 5\\n\");\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n                }  \r\n \r\n    integer = (int*)malloc(sizeof(int) * n); //using malloc for dynamic array \r\n\r\n    for (i=0; i<n; i++){\r\n        printf(\"Enter element %d: \\n\", i); //taking user input for array elements\r\n        scanf(\" %d\", &integer[i]);\r\n\r\n\r\n}\r\n    printf(\"Enter the first index:\\n\"); //input validation for both indexes\r\n    while(1) {\r\n        scanf(\" %d\", index1);\r\n        if (index1 < 0){\r\n            printf(\"Must be atleast 0, Enter the first index:\\n\");     \r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    printf(\"Enter the second index:\\n\");\r\n    while(1) {\r\n        scanf(\" %d\", index2);\r\n        if (index2 > n ){\r\n            printf(\"Do not exceed array size, Enter the second index:\\n\");\r\n\r\n        }\r\n        else {\r\n            break;\r\n        }        \r\n    }\r\n\r\n    int sum = *(integer + index1) + *(integer + index2); //pointer arithmetic with pointer casting idk\r\n    printf(\"Sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum); //printing sum of the two numbers\r\n\r\n    free(integer); //malloc free\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n#define MAX_STUDENTS 3 //setting up max array size\r\n#define NAME_LENGTH 50 \r\n\r\nfloat calculateAverage(const float marks[], int count) { //formula is = student1...3 mark sum / 3 \r\n    float total = 0.0; \r\n    for (int i = 0; i < count; i++) {\r\n        total += marks[i];\r\n    }\r\n    return total / count;\r\n}\r\n\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Data\\n\");\r\n    \r\n\r\n    for (int i = 0; i < MAX_STUDENTS; i++) { //printing every student details\r\n        printf(\"Student %d: Name = %s, \\nMark = %.2f\\n\", \r\n               i + 1, names[i], marks[i]);\r\n    }\r\n    \r\n}\r\n\r\nvoid main() {\r\n    char names[MAX_STUDENTS][NAME_LENGTH]; //initialising array for student names\r\n    float marks[MAX_STUDENTS]; //initialising array for marks\r\n    \r\n    for (int i = 0; i < MAX_STUDENTS; i++) { // for loops for inputting 3 student\r\n        \r\n        printf(\"\\nEnter name for Student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        \r\n        printf(\"Enter mark for %s: \", names[i]);\r\n        scanf(\" %f\", &marks[i]);\r\n    }\r\n\r\n    displayStudentData(names, marks); // Calling the displayStudentData\r\n\r\n    float averageMark = calculateAverage(marks, MAX_STUDENTS); // Calling the averageMark function\r\n    printf(\"\\nAverage Mark: %.2f\\n\", averageMark); //printig average mark\r\n    \r\n  \r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MIN_BID 100000\r\n#define MAX_BIDS 100\r\n\r\nvoid main() {\r\n    int N, i;\r\n    double bids[MAX_BIDS];  // Array to store bids set to 100 max\r\n    double highest_bid = 0.0;\r\n    int valid_bids_count = 0; //bids that are stored in array\r\n\r\n    do {\r\n        printf(\"Enter the number of bids (must be at least 2): \");\r\n        scanf(\"%d\", &N);\r\n\r\n        if (N < 2) {\r\n            printf(\"Number of bids must be at least 2.\\n\"); //make sure more than 2\r\n        } else if (N > MAX_BIDS) {\r\n            printf(\"Maximum number of bids is %d.\\n\", MAX_BIDS); //make sure less than 100, else array full\r\n        }\r\n    } while (N < 2 || N > MAX_BIDS);\r\n\r\n  \r\n    printf(\"\\nEnter the bid amounts (minimum $100,000):\\n\");\r\n    for (i = 0; i < N; i++) {\r\n        double current_bid;\r\n        \r\n        do {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%lf\", &current_bid);\r\n\r\n            if (current_bid < MIN_BID) {\r\n                printf(\"Bid must be at least $100,000.\\n\");\r\n            } else {\r\n                bids[i] = current_bid;\r\n                valid_bids_count++;\r\n            }\r\n        } while (current_bid < MIN_BID);\r\n    }\r\n\r\n    \r\n    if (valid_bids_count >= 2) { //finding the highest bidder\r\n        highest_bid = bids[0];\r\n        for (i = 1; i < N; i++) {\r\n            if (bids[i] > highest_bid) {\r\n                highest_bid = bids[i];\r\n            }\r\n        }\r\n\r\n        printf(\"\\nAuction Results:\\n\");\r\n        printf(\"Highest Bid: $%.2lf\\n\", highest_bid); //printing highest bidder\r\n    }\r\n\r\n}                                 ",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3: syntax error, printf(\"fruits: %d\\nVeggies: %d\\nDairy products: %d\\nCanned goods: \\n\", fCount, vCount, dCount, cCount);;"
  },
  {
    "student_id": "20682988",
    "code": "\n/* --- main.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n\tint N;\n\tint *array;\n\tint index1;\n\tint index2;\n\tint sum;\n\tint i;\n\t\n\tdo {\n\t\tprintf(\"Enter the size of the array (N>=5):\");\n\t\tscanf(\"%d\",&N);\n\t\tif (N<5) {\n\t\t\tprintf(\"There is the error!\");\n\t\t}\n\t\twhile(N<5);\n\t}\n\n\tprintf(\"Enter the array elements:\\n\");\n\tfor(int i=0; i<N; i++);\n\t{\n\t\tprintf(\"Element %d:\",i);\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\tdo {\n\t\tprintf(\"Enter indices of the two elements (0 <= index1,index2<6):\",N);\n\t\tscanf(\"%d %d\",&index1,&index2);\n\t\tif(index1<0||index2>=N) {\n\t\t\tprintf(\"Error:Indices must be within the range of the array elemwnts.Please try again.\");\n\t\t}\n\t\twhile(index1<0||index2>=N);\n\t\t}\n\n\tsum=* (arr+index1)+* (arr+index2);\n\n\tprintf(\"The sum of the values at indices %d and %d is:%d\",index1,index2,sum);\n\treturn 0;\n}\n\n\n\n/* --- assQ1.c/assQ1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n\tint N;\n\tint *array;\n\tint index1;\n\tint index2;\n\tint sum;\n\tint i;\n\t\n\tdo {\n\t\tprintf(\"Enter the size of the array (N>=5):\");\n\t\tscanf(\"%d\",&N);\n\t\tif (N<5) {\n\t\t\tprintf(\"There is the error!\");\n\t\t}\n\t\twhile(N<5);\n\t}\n\n\tprintf(\"Enter the array elements:\\n\");\n\tfor(int i=0; i<N; i++);\n\t{\n\t\tprintf(\"Element %d:\",i);\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\tdo {\n\t\tprintf(\"Enter indices of the two elements (0 <= index1,index2<6):\",N);\n\t\tscanf(\"%d %d\",&index1,&index2);\n\t\tif(index1<0||index2>=N) {\n\t\t\tprintf(\"Error:Indices must be within the range of the array elemwnts.Please try again.\");\n\t\t}\n\t\twhile(index1<0||index2>=N);\n\t\t}\n\n\tsum=* (arr+index1)+* (arr+index2);\n\n\tprintf(\"The sum of the values at indices %d and %d is:%d\",index1,index2,sum);\n\treturn 0;\n}\n\n\n\n/* --- assQ3.c/assQ3.c --- */\n#include <stdio.h>\n#define min_bid 100000\nint N;\nint i;\n\nint main()\n{\n\tdo {\n\t\tprintf(\"Enter the number of bids:\");\n\t\tscanf(\"%d\",&N);\n\n\t\tif(N<2) {\n\t\t\tprintf(\"Error:Number of bids must be at least 2.Please try again.\\n\");\n\t\t}\n\t} while(N<2);\n\n\n\tint bids[N];\n\tfor(int i=0; i<N; i++) {\n\t\tdo {\n\t\t\tprintf(\"Bid %d:\",i+1);\n\t\t\tscanf(\"%d\",&bids[i]);\n\t\t\tif(bids[i]<min_bid) {\n\t\t\t\tprintf(\"Error:Bid must be at least $100000.Please try again.\\n\");\n\t\t\t}\n\t\t} while(bids[i]<min_bid);\n\t}\n\tint highestBid = bids[0];\n    for (int i = 1; i < N; i++) { // Corrected for loop syntax\n        if (highestBid < bids[i]) {\n            highestBid = bids[i];\n        }\n    }\n\tprintf(\"The highest bid is:$ %d\\n\",highestBid);\n\n    return 0;\n}",
    "feedback": "q1:The program attempts to print a grid of asterisks based on user input for rows and columns. However, the nested loops contain syntax errors and will not compile as written. The outer loop is not structured correctly, and the inner loop is misplaced. q2:The program computes the sum, average, product, largest, and smallest of three integers correctly based on user input. However, there are logical errors in the conditional checks for the largest and smallest values.Replace commas with logical operators in the conditional checks for the largest and smallest numbers. q3:The program aims to calculate the total cost based on product type and apply a discount. However, there are several errors that prevent it from functioning correctly, including incorrect variable names and formatting issues in scanf. The structure is clear, but there are multiple syntax errors that need addressing. The use of incorrect case labels and the handling of discount calculations also need correction."
  },
  {
    "student_id": "20712310",
    "code": "\n/* --- task1.c --- */\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *array;\n    int N, index1, index2;\n    int sum = 0;\n\n    \n    printf(\"Enter the size of the array (N ≥ 5): \");\n    scanf(\"%d\", &N);\n    if (N < 5) {\n        printf(\"The size of the array must be at least 5.\\n\");\n        return 1;\n    }\n\n    \n    array = (int *)malloc(N * sizeof(int));\n    if (array == NULL) {\n        printf(\"Memory allocation failed.\\n\");\n        return 1;\n    }\n\n   \n    printf(\"Enter the array elements :\\n\");\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &array[i]);\n    }\n\n    \n    do {\n        printf(\"Enter the first index (0 <= index1 < N): \");\n        scanf(\"%d\", &index1);\n        printf(\"Enter the second index (0 <= index2 < N): \");\n        scanf(\"%d\", &index2);\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\n            printf(\"Error:Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\n\n    \n\n   \n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    \n    free(array);\n\n    return 0;\n}\n/* --- task2.c --- */\n/******************************************************************************\n\nWelcome to GDB Online.\nGDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,\nC#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.\nCode, Compile, Run and Debug online from anywhere in world.\n\n*******************************************************************************/\n\n\n\n#include <stdio.h>\n\n#define NAME_LENGTH 50\n#define STUDENT_COUNT 3 //define the length and student number \n\n\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\n\nint main() {\n    char names[STUDENT_COUNT][NAME_LENGTH];\n    float marks[STUDENT_COUNT];\n    float average;\n\n    \n    printf(\"Enter the names and marks for three students:\\n\");\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Enter  the name of student  %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);\n        getchar(); \n        printf(\"Enter the mark of student  %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    \n    average = calculateAverage(marks, STUDENT_COUNT);\n\n   \n    displayStudentData(names, marks);\n    printf(\"Average mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    printf(\"Student Names and Marks:\\n\");\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n/* --- task3.c --- */\n\n#include <stdio.h>\n#define MIN_BID 100000 //each bid at least 100000\n\n    int main(void){\n    int N;\n    int bids[100]; \n    int maxBid = -1;\n    int validBids = 0;\n\n   \n    printf(\"Enter the number of bids : \");\n    scanf(\"%d\", &N);\n    if (N < 2) {\n        printf(\"At least two bids are required to determine the highest bid.Please try again\\n\");\n        return 1;\n    } //determine wether <2 or not\n    \n    printf(\"Enter the bids (each bid must be at least $ %d):\\n\", MIN_BID);\n    for (int i = 0; i < N; i++) {\n        printf(\"Bid %d: $\", i + 1);\n        scanf(\"%d\", &bids[i]);\n        if (bids[i] >= MIN_BID) {\n            validBids++;\n            if (bids[i] > maxBid) {\n                maxBid = bids[i];\n            }\n        } else {\n            printf(\"Invalid bid.  bid must be at least $%d. Please try again.\", MIN_BID);\n            i--; \n        }\n    }\n\n    \n    if (validBids < 2) {\n        printf(\"At least two valid bids are required to determine the highest bid.\\n\");\n        return 1;\n    }\n\n   \n    printf(\"The highest bid is: $%d\\n\", maxBid);\n\n    return 0;\n}\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly calculates the sum, average, product, smallest, and largest of three user-provided integers. The logic is sound and follows a clear flow. q3:The program correctly calculates the total cost for different types of grocery items, applies discounts, and provides a user-friendly interface for input."
  },
  {
    "student_id": "20618865",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *arrayPtr = NULL; // initialize pointer for dynamic memory allocation as NULL\n    int index1, index2, size = 0, sum = 0; //declare the variables\n\n    // prompt user to enter size of the array (N >= 5) at least once\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &size);\n        if (size < 5) {\n            printf(\"Invalid size. Size must be >= 5. Try again.\\n\"); \n        }\n    } while (size < 5); //if input is invalid, loop back\n\n    // allocate memory for the array\n    arrayPtr = (int *)malloc(size * sizeof(int));\n\n    //check whether memory allocation is success\n    if (arrayPtr == NULL) {\n        printf(\"Memory allocation failed. Exiting program.\\n\");\n        return 1; // exit if memory allocation fails\n    }\n\n    // prompt user to enter array elements\n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < size; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", &arrayPtr[i]);\n    }\n\n    // prompt user to enter two indices \n    do {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", size);\n        scanf(\"%d %d\", &index1, &index2);\n\n        //check whether the indices are valid and print error message\n        if (index1 < 0 || index1 >= size || index2 < 0 || index2 >= size) {\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    } while (index1 < 0 || index1 >= size || index2 < 0 || index2 >= size);\n\n    // calculate sum using pointer-based approach\n    sum = *(arrayPtr + index1) + *(arrayPtr + index2);\n\n    // display the result\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    // free dynamically allocated memory\n    free(arrayPtr);\n\n    return 0;\n}\n\n/* --- Q2.c --- */\n#include <stdio.h>\n#define NUM_OF_STUDENT 3\n#define NAME_LENGTH 50\n\nfloat calculateAverage (const float marks[], int count){\n    float sum=0.0; // initialize sum\n    //calculate sum \n    for (int i=0; i<count; i++){\n        sum += marks[i];\n    }\n    //return average\n    return sum/count;\n}\n\nvoid displayStudentData (const char names[][NAME_LENGTH], const float marks []){\n    //display 3 students' names and marks\n    printf(\"\\nStudents Names and Marks:\\n\");\n    for (int i=0; i<NUM_OF_STUDENT; i++){\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n\n    //display average mark calcuated by the first function\n    printf(\"\\nAverage Mark: %.2f\\n\", calculateAverage(marks, NUM_OF_STUDENT));\n}\n\nint main(){\n    // initialize arrays for names and marks\n    char names[NUM_OF_STUDENT][NAME_LENGTH]={0};\n    float marks[NUM_OF_STUDENT]={0};\n\n    // prompt the user to input names and marks of students\n    for (int i=0; i<NUM_OF_STUDENT; i++){\n        printf(\"Enter the name of student %d: \", i+1);\n        scanf(\"%[^\\n]\", names[i]); // scan until a newline character\n        \n        printf(\"Enter the mark of student %d: \", i+1);\n        scanf(\"%f\", &marks[i]);\n        getchar(); //remove newline character in buffer\n    }\n\n    // display each student's details and average mark\n    displayStudentData(names, marks);\n\n    return 0;\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n#define MIN_AMOUNT 100000 \n\nint main (){\n    int num_of_bids=0; //initialize number of bids to 0\n    float *arrayPtr = NULL; //initialize pointer for dynamic memory allocation as NULL\n\n    //prompt user to input number of bids\n    printf(\"Enter the number of bids: \");\n    do {\n        scanf(\"%d\", &num_of_bids);\n        //validate input and print error message\n        if (num_of_bids<2){\n            printf(\"Error: Number of bids must be at least 2. Please try again: \");\n        }\n    } while (num_of_bids<2); //validate input and if it is not valid, loop back\n\n    //allocate memory for the array\n    arrayPtr = (float *)malloc(num_of_bids * sizeof(float));\n\n    //check whether memory allocation is success\n    if(arrayPtr == NULL){\n        printf(\"Memory allocation failed.\\n\");\n        return 1; //exit if fail\n    }\n\n    //prompt user to enter the amount for each bid\n    printf(\"Enter the bids (must be at least $100000): \\n\");\n    for (int i=0; i<num_of_bids; i++){\n        printf(\"Bid %d: \", i+1);\n\n        do {\n            scanf(\"%f\", &arrayPtr[i]);\n            //validate input and print error message\n            if (arrayPtr[i]<MIN_AMOUNT){\n                printf(\"Error: Bid must be at least $100000. Please try again: \");\n            }\n        } while (arrayPtr[i]<MIN_AMOUNT); //validate input and if it is not valid, loop back\n    }\n\n    float highest = arrayPtr[0]; //initialize the highest to the first element of array\n    \n    //for loop to compare each element with the current highest\n    for (int i=1; i<num_of_bids; i++){\n        //if array element is greater than highest, assign it to highest variable\n        if (arrayPtr[i]>highest){\n            highest = arrayPtr[i];\n        }\n    }\n\n    //display the highest amount\n    printf(\"The highest bid is: $%.0f\\n\", highest);\n\n    //free allocates memory\n    free(arrayPtr); \n\n    return 0;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20592884",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N, index1, index2;\r\n\r\n    //Ask the user to enter the size of the array\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Invalid input. N must be greater than or equal to 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    //Allocate memory to the array dynamically\r\n    int *array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //Ask user to enter each element one by one\r\n    printf(\"Enter %d elements for the array:\\n\", N);\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element [%d]: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    //Ask user for the number of the indices and validate them\r\n    while (1) {\r\n        printf(\"Enter the first index (0 to %d): \", N - 1);\r\n        scanf(\"%d\", &index1);\r\n\r\n        printf(\"Enter the second index (0 to %d): \", N - 1);\r\n        scanf(\"%d\", &index2);\r\n\r\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n            break;\r\n        } else {\r\n            printf(\"Invalid indices. Please enter indices within the range 0 to %d.\\n\", N - 1);\r\n        }\r\n    }\r\n\r\n    //Calculate the sum using pointers\r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    //Show the sum\r\n    printf(\"The sum of the elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    //Free the dynamically allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define MAX_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\nfloat calculateAverage(const float marks[], int count); //declare calculateAverage\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);//Array to for storing name and marks of students\r\n\r\n//Main Function\r\nint main() {\r\n    char names[MAX_STUDENTS][NAME_LENGTH];\r\n    float marks[MAX_STUDENTS];\r\n    \r\n    //Ask the user to put in the students names and their marks\r\n    for (int i = 0; i < MAX_STUDENTS; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter marks of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    //Calculate average marks\r\n    float average = calculateAverage(marks, MAX_STUDENTS);\r\n    \r\n    //Show student's datas and average marks\r\n    displayStudentData(names, marks);\r\n    printf(\"Average Marks: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n    //Function to calculate the average marks\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n    //Function to show student's datas with proper format\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    for (int i = 0; i < MAX_STUDENTS; i++) {\r\n        printf(\"Name: %s, Marks: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MAX_BIDS 100 //Define the maximum number of bids for the program\r\n\r\nint main() {\r\n    int N, i;                  //N: means Number of bids and i: Loop counter\r\n    double bids[MAX_BIDS];     //Array to keep the values of the bids\r\n\r\n    //Ask the user for the number of bids and validate it\r\n    do {\r\n        printf(\"Enter the number of bids (N >= 2): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 2) {\r\n            printf(\"Error: There must be at least 2 bids.\\n\");\r\n        }\r\n    } while (N < 2); //Repeat previous part until user has entered the minimum amount of bids\r\n\r\n    //Gather the values of the bids from the user, to ensure it is at least $100000\r\n    for (i = 0; i < N; i++) {\r\n        do {\r\n            printf(\"Enter bid %d (must be at least $100,000): \", i + 1);\r\n            scanf(\"%lf\", &bids[i]);\r\n            if (bids[i] < 100000) {\r\n                printf(\"Error: Bid must be at least $100,000.\\n\");\r\n            }\r\n        } while (bids[i] < 100000); //Repeat until the user gives the minimum requested value of bid\r\n    }\r\n\r\n    //Determine the highest bid from the above values\r\n    double highestBid = bids[0]; //Initialize with the first bid\r\n    for (i = 1; i < N; i++) {    //Continue from the second bid\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i]; //change if a higher bid is found\r\n        }\r\n    }\r\n\r\n    //Show the highest bid to the user\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20609660",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(void)\r\n{\r\n    // Initialisation\r\n    int arraySize = 0;\r\n    int *ptr = NULL;\r\n    int firstIndex = 0;\r\n    int secondIndex = 0;\r\n\r\n    printf(\"Size of the array: \");\r\n    scanf(\" %d\", &arraySize);\r\n\r\n    // Allocate memory for the array using pointer\r\n    ptr = (int *)malloc(arraySize * sizeof(int));\r\n\r\n    // Error handling if memory allocation fail\r\n    if (ptr == NULL)\r\n    {\r\n        printf(\"Memory not allocated.\\n\");\r\n        exit(0);\r\n    }\r\n    else\r\n    {\r\n        // Get the elements of the array from user\r\n        for (int i = 0; i < arraySize; i++)\r\n        {\r\n            printf(\"Enter Number %d: \", i + 1);\r\n            scanf(\" %d\", &ptr[i]);\r\n        }\r\n    }\r\n\r\n    // Input validating from user, user must provide a value of indices that is within the range of the array\r\n    while (1)\r\n    {\r\n        // Prompt user to input 2 indices seperated by \" \"\r\n        printf(\"Enter 2 indices (positions) to sum up together [Enter 2 numbers between 0 and %d]: \", arraySize - 1);\r\n        scanf(\" %d %d\", &firstIndex, &secondIndex);\r\n\r\n        // If user's input value is within the range of the array, it will print out the sum of both the values from the indices\r\n        if (firstIndex >= 0 && firstIndex < arraySize && secondIndex >= 0 && secondIndex < arraySize)\r\n        {\r\n            void sum(int *ptr, int firstIndex, int secondIndex); // Function prototype\r\n            sum(ptr, firstIndex, secondIndex);                   // Sum the values and print out\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            // Error message and prompt user to enter again\r\n            printf(\"Invalid indices entered. Please try again.\\n\");\r\n        }\r\n    }\r\n}\r\n\r\n// A function to sum up all values based on the index input by User\r\nvoid sum(int *ptr, int firstIndex, int secondIndex)\r\n{\r\n    int sum = ptr[firstIndex] + ptr[secondIndex];\r\n    printf(\"Sum of elements at indices %d and %d is: %d\\n\", firstIndex, secondIndex, sum);\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define ARRAYSIZE 3\r\n\r\nint main(void)\r\n{\r\n    // Initialisation\r\n    char studentNameArr[ARRAYSIZE][50]; // Allocate memory for each student's name\r\n    int studentMarksArray[ARRAYSIZE] = {0};\r\n\r\n    // Function prototype\r\n    double calculateAverageMarks(int studentMarksArray[]);\r\n    void displayFunction(char studentNameArray[][50], int studentMarksArray[], double averageMarks);\r\n\r\n    // Get the student's name and marks from user and store it in the array by looping through the index\r\n    for (size_t i = 0; i < ARRAYSIZE; i++)\r\n    {\r\n\r\n        // Prompt user to enter student's name\r\n        printf(\"Enter Student %d name (Not more than 50 characters): \", i + 1);\r\n        scanf(\" %[^\\n]\", studentNameArr[i]);\r\n\r\n        // Prompt user to enter student's marks\r\n        printf(\"Enter Student %d marks: \", i + 1);\r\n        scanf(\" %d\", &studentMarksArray[i]);\r\n    }\r\n\r\n    // Calculate the average marks of the students\r\n    double averageMarks = calculateAverageMarks(studentMarksArray);\r\n\r\n    // Display the student's name, marks and average marks\r\n    displayFunction(studentNameArr, studentMarksArray, averageMarks);\r\n}\r\n\r\n// Function to display the student's name, marks and average marks\r\nvoid displayFunction(char studentNameArray[][50], int studentMarksArray[], double averageMarks)\r\n{\r\n    printf(\"Student's Name and Marks:\\n\");\r\n    for (size_t i = 0; i < ARRAYSIZE; i++)\r\n    {\r\n        printf(\"%s: %d\\n\", studentNameArray[i], studentMarksArray[i]);\r\n    }\r\n\r\n    printf(\"\\nAverage marks: %.2f\", averageMarks);\r\n}\r\n\r\n// Function to calculate the average marks of the students\r\ndouble calculateAverageMarks(int studentMarksArray[])\r\n{\r\n    // Initialisation\r\n    int sum = 0;\r\n    double averageMarks = 0;\r\n\r\n    // Loop through the array to get the value stored\r\n    for (int i = 0; i < ARRAYSIZE; i++)\r\n    {\r\n        // Store all the values in the array into sum\r\n        sum += studentMarksArray[i];\r\n    }\r\n    // Calculate the average marks\r\n    averageMarks = (double)sum / ARRAYSIZE;\r\n\r\n    return averageMarks;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(void)\r\n{\r\n    // Initialisation\r\n    int numberOfBids = 0;\r\n\r\n    // Prompt user to enter the number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\" %d\", &numberOfBids);\r\n\r\n    // Input validating from user, user must provide a value of bids that is at least 2\r\n    while (numberOfBids < 2)\r\n    {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\" %d\", &numberOfBids);\r\n    }\r\n\r\n    // Allocate memory for the array for purpose to store all the value of bidding\r\n    int *bidArrayPtr = (int *)malloc(numberOfBids * sizeof(int));\r\n\r\n    // Error handling if memory allocation fail\r\n    if (bidArrayPtr == NULL)\r\n    {\r\n        printf(\"Memory not allocated.\\n\");\r\n        exit(0);\r\n    }\r\n\r\n    // Get the bids from user and store it in the array by looping through the index\r\n    for (size_t i = 0; i < numberOfBids; i++)\r\n    {\r\n        // Initialisation\r\n        int biddingValue = 0;\r\n\r\n        // Prompt user to enter the bids\r\n        printf(\"Enter bid %d (Must be at least $100000): \", i + 1);\r\n        scanf(\" %d\", &biddingValue);\r\n\r\n        // Input validating from user, user must provide a value of bids that is at least $100000\r\n        while (biddingValue < 100000)\r\n        {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\" %d\", &biddingValue);\r\n        }\r\n\r\n        // Store the value of bidding into the array\r\n        bidArrayPtr[i] = biddingValue;\r\n    }\r\n\r\n    // Initialisation for a variable to store the highest bid\r\n    int highestBid = bidArrayPtr[0];\r\n\r\n    // Loop through the array to get the highest bid\r\n    for (int i = 1; i < numberOfBids; i++)\r\n    {\r\n        // If the value of the highest bid is less than the value of the bid in the array, it will replace the value of the highest bid\r\n        if (highestBid < bidArrayPtr[i])\r\n        {\r\n            highestBid = bidArrayPtr[i];\r\n        }\r\n    }\r\n\r\n    // Print out the highest bid\r\n    printf(\"The highest bid is $%d\", highestBid);\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20701283",
    "code": "\n/* --- 20701283 ZHAO YUKE (2).c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3 \r\n\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH]; \r\n    float marks[STUDENT_COUNT];            \r\n    float average;                         \r\n\r\n    int i;\r\n    for (i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); //Read name\r\n\r\n        printf(\"Enter the marks of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]); //Read score\r\n    }\r\n\r\n    //averaging\r\n    average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    //Print student data and equalize\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n\r\n    printf(\"\\nAverage Marks: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n//averaging\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    int i;\r\n    for ( i= 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count; \r\n}\r\n\r\n//Print student data and equalize\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    int i;\r\n    for (i = 0; i < count; i++) {\r\n        printf(\"Name: %s, Marks: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\n\n/* --- 20701283 ZHAO YUKE (3).c --- */\n#include <stdio.h>\r\n\r\n\r\nint getValidBidCount() {\r\n    int N;\r\n    do {\r\n        printf(\"Enter the number of bids (N >= 2): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 2) {\r\n            printf(\"The number of bids must be at least 2.\\n\");\r\n        }\r\n    } while (N < 2);\r\n    return N;\r\n}\r\n\r\n// Function to get valid bid values (each bid must be >= 100000)\r\nvoid getValidBids(int bids[], int N) {\r\n\tint i;\r\n    for (i = 0; i < N; i++) {\r\n        do {\r\n            printf(\"Enter bid %d: \", i + 1);\r\n            scanf(\"%d\", &bids[i]);\r\n            if (bids[i] < 100000) {\r\n                printf(\"Bid must be at least 100,000.\\n\");\r\n            }\r\n        } while (bids[i] < 100000);\r\n    }\r\n}\r\n\r\n// Function to find the highest bid\r\nint findHighestBid(int bids[], int N) {\r\n    int highest = bids[0];\r\n    int i;\r\n    for ( i = 1; i < N; i++) {\r\n        if (bids[i] > highest) {\r\n            highest = bids[i];\r\n        }\r\n    }\r\n    return highest;\r\n}\r\n\r\nint main() {\r\n    int N = getValidBidCount();  // Get the valid number of bids\r\n    int bids[N];  \r\n\r\n    getValidBids(bids, N);  // Get valid bids from the user\r\n\r\n    int highestBid = findHighestBid(bids, N);  // Find the highest bid\r\n\r\n    printf(\"The highest bid is: %d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n\r\n\n/* --- 20701283 ZHAO YUKE(1).c --- */\n#include<stdio.h>\r\n#include<stdlib.h>\r\n\r\nvoid get_valid_indices(int* index1, int*index2, int size);\r\nint get_valid_size();\r\n\r\nint main() {\r\n\tint N;\r\n\tN = get_valid_size();\r\n\t\r\n\tint* array = (int*)malloc(N * sizeof(int));\r\n\tif (array == NULL) {\r\n\t\tprintf(\"Memory allocation failed.\\n\");\r\n\t\treturn 1;\r\n\t}\r\n\tprintf(\"Enter %d elements of the array:\\n\", N);\r\n\tint i;\r\n\tfor (i = 0; i < N; i++) {\r\n\t\tprintf(\"Enter element %d: \", i + 1);\r\n\t\tscanf(\"%d\", array + i);\r\n\t}\r\n\tint index1, index2;\r\n\tget_valid_indices(&index1, &index2, N);\r\n\tint sum = *(array + index1) + *(array + index2);\r\n\tprintf(\"The sum of elements at indices %d and %d is: %d\\n\", index1,index2, sum);\r\n\tfree(array);\r\n\t\r\n\treturn 0; \r\n\t\r\n}\r\nint get_valid_size() {\r\n\tint size;\r\n\tdo {\r\n\t\tprintf(\"Enter the size of the array(N >= 5): \");\r\n\t\tscanf(\"%d\", &size);\r\n\t\tif (size < 5){\r\n\t\t\tprintf(\"Invalid size. PLease enter a size >=5.\\n\");\r\n\t\t\r\n\t\t}\r\n\t} while (size < 5);\r\n\treturn size;\r\n}\r\n\r\nvoid get_valid_indices(int* index1, int* index2, int size){\r\n\tdo{printf(\"Enter the first index (0 to %d): \", size -1);\r\n\tscanf(\"%d\", index1);\r\n\tprintf(\"Enter the second index (0 to %d): \", size - 1);\r\n\tscanf(\"%d\", index2);\r\n\t\r\n\t  if (*index1 < 0 || *index1 >=size || *index2 < 0 || *index2>= size) {\r\n\t\tprintf(\"Invalid indices. Please enter indices within range.\\n\");\r\n\t\t\r\n\t  }\r\n\t}while (*index1 < 0 || *index1 >= size || *index2 < 0 || *index2 >= size);\r\n}\r\n\r\n\r\n",
    "feedback": "q1:The program correctly prints a grid of + according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:Several syntax errors preventing the program from running correctly. The check for whether at least three integers have been entered should be placed after the loop, not inside it. This is crucial to ensure that you only check after the user has entered the numbers. q3: there are significant errors that prevent it from functioning correctly. The variable names contain spaces (e.g., price per item, tota;cost), which are invalid in C. Variables cannot have spaces. The productType variable is declared but never initialized or assigned a value. You need to prompt the user for their choice before using it in the switch statement."
  },
  {
    "student_id": "20601165",
    "code": "",
    "feedback": "q1:The program prompts the user correctly for the number of rows and columns and attempts to print a grid of asterisks. However, the inner loop starts from 1, which results in one fewer asterisk printed in each row than specified by the user. The correct loop should start from 0 to ensure the right number of asterisks is printed. q2:The average is calculated using integer division, which can lead to incorrect results if the sum is not divisible by 3. q3: incomplete attempt"
  },
  {
    "student_id": "20706981",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly calculates the sum, average, product, smallest, and largest of a series of integers entered by the user. q3:The program correctly computes the total cost and final cost after applying a discount for different grocery items based on user input.If the user enters 0 to exit, the program simply prints \"Exiting program...\" and then continues to process the switch statement."
  },
  {
    "student_id": "20598080",
    "code": "\n/* --- question1 1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(){\n    int N,index1,index2, *arr, sum;\n\n    // Step 1: Prompt user for the size of the array and validate\n    printf(\"Enter the size of the array (N>=5):  \");\n    scanf(\"%d\",&N);\n    while (N<5){\n        printf(\"Size must be at least 5. Please enter again:  \");\n        scanf(\"%d\",&N);\n    }\n\n    // Step 2: Dynamically allocate memory for the array\n    arr= (int*)malloc(N* sizeof(int));\n    if (arr==NULL){\n        printf(\"Memory allocation failed. Exiting program.\\n\");\n        return 1;\n    }\n    \n    // Step 3: Prompt user to enter elements of the array\n    printf(\"Enter %d elements for the array:\\n\",N);\n    for (int i=0; i<N; i++){\n        printf(\"Elements %d: \",i+1);\n        scanf(\"%d\", arr+i);\n    }\n\n    // Step 4:  Prompt user for two valid indices and validate them\n    while (1){\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \",N);\n        scanf(\"%d %d\", &index1, &index2);\n        if (index1>=0 && index1<N && index2>=0 && index2<N){\n            break; // Valid indices\n        } else {\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    }\n\n    // Step 5: Use pointers to calculate the sum\n    sum = *(arr+index1) + *(arr+index2);\n\n    // Step 6: Print the result\n    printf(\"The sum of element at indices %d and %d is:%d\\n\", index1, index2,sum);\n\n    // Free the allocated memory\n    free(arr);\n\n    return 0;\n}\n/* --- Question_1.c --- */\n#include <stdio.h>\n\n#define NUM_STUDENTS 3\n#define NAME_LENGTH 50\n\n// Function prototypes\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH],const float mark[], float average);\n\nint main(){\n    char names[NUM_STUDENTS][NAME_LENGTH];\n    float marks[NUM_STUDENTS];\n    float average;\n\n    // Step 1: Input student names and marks\n    for (int i=0;i <NUM_STUDENTS;i++){\n        printf(\"Enter the name of students%d: \",i+1);\n        scanf(\" %[^\\n]\",names[i]);  // Read the full name with spaces\n        printf(\"Enter the mark of student %d: \",i+1);\n        scanf(\"%f\", &marks[i]);\n\n    }\n    // Step 2: Calculate the average marks\n    average = calculateAverage(marks, NUM_STUDENTS);\n\n    // Step 3: Display studnet data and average marks \n    displayStudentData(names,marks,average);\n\n    return 0;\n}\n\n// Function to calculate the average of marks\nfloat calculateAverage(const float marks[], int count){\n    float sum=0;\n    for (int i=0; i<count; i++){\n        sum+=marks[i];\n    }\n    return sum/count;\n}\n\n// Function to display student data and average marks\nvoid displayStudentData(const char names[][NAME_LENGTH],const float marks[], float average){\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i=0; i<NUM_STUDENTS; i++){\n        printf(\"Name: %s, Marks: %.2f\\n\", names[i], marks[i]);\n    }\n    printf(\"Average Marks:%.2f\\n\",average);\n    \n}\n/* --- Question_2.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(){\n    int N;  // Number of birds\n    int * bids;\n    int highestBid;\n\n    // Step 1: Prompt the user for the number of bids and validate\n    printf(\"Enter the number of bids (N): \");\n    scanf(\"%d\",&N);\n    if (N<2){\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\n        scanf(\"%d\",&N);\n    }\n    // Step 2: Dynamically allocated memory for storingg the bids\n    bids=(float *)malloc(N * sizeof(float));\n    if (bids==NULL){\n        printf(\"Memory allocation failed.\\n\");\n        return 1;\n    }\n\n    // Step 3: Prompt the user to enter the bids with validation\n    printf(\"Enter the bids (minimum $100,000 each);\\n\");\n    for (int i=0;i<N;i++){\n        while (1){\n            printf(\"Bid %d: $\", i+1);\n            scanf(\"%f\", &bids[i]);\n            if (bids[i]>=100000){\n                break;  // Valid bid\n            }\n            printf(\"Invaid bid. Each bid must be at least $100,000. Please try again.\\n\");\n        }\n    }\n\n    // Step 4: Determine the highest bid\n    int highestBid = bids[0];\n    for(int i=1;i<N;i++){\n        if(bids[i]>highestBid){\n            highestBid=bids[i];\n        }\n    }\n\n    // Step 5: Display the highest bid\n    printf(\"\\nThe highest bid is $%.2d\\n\",highestBid);\n\n    // Free allocated memory\n    free(bids);\n\n    return 0;\n    \n    \n}\n\n\n/* --- Question_3.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(){\n    int N;\n    float * bids;\n    float highestBid;\n\n    // Step 1: Prompt the user for the number of bids and validate\n    printf(\"Enter the number of bids (N): \");\n    scanf(\"%d\",&N);\n    if (N<2){\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\n        scanf(\"%d\",&N);\n    }\n    // Step 2: Dynamically allocated memory for storingg the bids\n    bids=(float *)malloc(N * sizeof(float));\n    if (bids==NULL){\n        printf(\"Memory allocation failed.\\n\");\n        return 1;\n    }\n\n    // Step 3: Prompt the user to enter the bids with validation\n    printf(\"Enter the bids (minimum $100,000 each);\\n\");\n    for (int i=0;i<N;i++){\n        while (1){\n            printf(\"Bid %d: $\", i+1);\n            scanf(\"%f\", &bids[i]);\n            if (bids[i]>=100000){\n                break;  // Valid bid\n            }\n            printf(\"Invaid bid. Each bid must be at least $100,000. Please try again.\\n\");\n        }\n    }\n\n    // Step 4: Determine the highest bid\n    highestBid = bids[0];\n    for(int i=1;i<N;i++){\n        if(bids[i]>highestBid){\n            highestBid=bids[i];\n        }\n    }\n\n    // Step 5: Display the highest bid\n    printf(\"\\nThe highest bid is $%.2f\\n\",highestBid);\n\n    // Free allocated memory\n    free(bids);\n\n    return 0;\n    \n}\n",
    "feedback": "q1:The program prompts the user for the number of rows and columns but does not use these inputs to generate the grid dynamically. Instead, it prints a fixed set of asterisks, which does not fulfill the requirement of creating a grid based on user input. q2:The program correctly computes the sum, average, product, smallest, and largest of three integers input by the user.  q3:The line discountPercentage = discountPercentage / 100; before reading the input is incorrect. It should be calculated after the user input.The prompts for weight and price are hardcoded for fruits, regardless of the product code. These prompts should be updated to reflect the correct product based on the user's choice.The return 0; statement is incorrectly placed inside the loop. It should be placed at the end of the main function to allow multiple iterations until the user decides to exit"
  },
  {
    "student_id": "20702811",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *arr;\n    int N;\n    int index1, index2;\n    int sum;\n\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"Size cannot be less than 5. Please try again.\\n\" );\n        }\n    } while (N < 5);\n\n    arr = (int*)malloc(N*sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory not allocated.\");\n        return 1;\n    }\n    \n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", &arr[1]);\n    }\n\n    do {\n        printf(\"Enter the indices of two elements (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\n            printf(\"Indices must be within the range of the array element. Please try again.\");\n        }\n        \n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\n\n    sum = *(arr + index1) + *(arr + index2);\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n}\n\n\n\n/* --- Q2.c --- */\n#include <stdio.h>\n#define NUM_STUDENTS 3\n#define NAME_LENGTH 50\n\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"%s: %.2f\", names[i], marks[i]);\n    }\n}\n\nint main () {\n    char names [NUM_STUDENTS][NAME_LENGTH];\n    float marks [NUM_STUDENTS];\n\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\"%[^\\n]\", names[i]);\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    float average = calculateAverage(marks, NUM_STUDENTS);\n    \n    displayStudentData(names, marks);\n    printf(\"\\nAverage mark: %.2f\\n\", average);\n\n    return 0;\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main () {\n    int N;\n\n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &N);\n\n    if (N < 2) {\n        printf(\"Number of bids must be at least 2. Please try again.\\n \");\n        return 1;\n    }\n\n    printf(\"Enter the bids (must be at least $100000):\\n\");\n\n    int bid[N];\n    for (int i = 0; i < N; i++) {\n        printf(\"Bid %d: \", i + 1);\n        scanf(\"%d\", &bid[i]);\n\n        if (bid[i] < 100000) {\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\n            i--;\n        }\n    }\n\n    int highestBid = bid[0];\n    \n    for (int i = 1; i < N; i++) {\n        if (bid[i] > highestBid) {\n            highestBid = bid[i]; \n        }\n    }\n\n    printf(\"The highest bid is: $%d\\n\", highestBid);\n\n    return 0;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The logic for finding the smallest and largest numbers is incorrect. The comparisons should update the smallest and largest variables themselves, not the input variable q3: incorrect output, The variable productName is declared as a char, which can hold only a single character. To store product names like \"Fruits\" or \"Vegetables,\" it should be a string (array of characters) or a pointer to a stringThe condition to check for a valid discount percentage is incorrect. It should check if n is less than 0 or greater than 100, not bothThe calculation for finalCost should ensure that the discount is applied correctly."
  },
  {
    "student_id": "20576624",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N;\n\n    // 1) Input N, check if N>=5\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"Invalid size. Please enter a number greater than or equal to 5.\\n\");\n        }\n    } while (N < 5);\n\n    // 2) Allocate memory\n    int *arr = (int *)malloc(N * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory allocation failed.\\n\");\n        return 1;\n    }\n\n    // 3) Enter values\n    printf(\"Enter %d elements of the array:\\n\", N);\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", arr + i);  // Using pointers \n    }\n\n    int index1, index2;\n\n    // 4) Choose and validate indices\n    do {\n        printf(\"Enter the first index (0 ≤ index < %d): \", N);\n        scanf(\"%d\", &index1);\n        if (index1 < 0 || index1 >= N) {\n            printf(\"Invalid index. Please enter an index between 0 and %d.\\n\", N - 1);\n        }\n    } while (index1 < 0 || index1 >= N);\n\n    do {\n        printf(\"Enter the second index (0 ≤ index < %d): \", N);\n        scanf(\"%d\", &index2);\n        if (index2 < 0 || index2 >= N) {\n            printf(\"Invalid index. Please enter an index between 0 and %d.\\n\", N - 1);\n        }\n    } while (index2 < 0 || index2 >= N);\n\n    // 5) Use a pointer-based approach to find the sum of the values of the two array elements.\n    int sum = *(arr + index1) + *(arr + index2);\n\n    // 6) Print the output for the sum.\n    printf(\"The sum of the elements at indices %d and %d is %d.\\n\", index1, index2, sum);\n\n    // Free the allocated memory.\n    free(arr);\n\n    return 0;\n}\n\n/* --- Q2.c --- */\n#include <stdio.h>\n\n#define NAME_LENGTH 50\n#define NUM_STUDENTS 3\n\n// Function\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\n\nint main() {\n    char names[NUM_STUDENTS][NAME_LENGTH];\n    float marks[NUM_STUDENTS];\n\n    // 1) Input\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"Enter name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);  // Read a line of text including spaces\n\n        printf(\"Enter mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    // 2) Average\n    float average = calculateAverage(marks, NUM_STUDENTS);\n\n    // 3) Print accotding yo the structure \n    displayStudentData(names, marks);\n\n    printf(\"Average mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n// Average mark\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0f;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n// Display\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    printf(\"\\nStudent Data:\\n\");\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"%s : %.2f\\n\", names[i], marks[i]);\n    }\n}\n\n/* --- Q3.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N;\n\n    // 1) Prompt and check if N>=2\n    do {\n        printf(\"Enter the number of bids (minimum 2): \");\n        scanf(\"%d\", &N);\n\n        if (N < 2) {\n            printf(\"Invalid number of bids. There must be at least two bids.\\n\");\n        }\n    } while (N < 2);\n\n    // Check if there are fewer than two valid bids\n    if (N < 2) {\n        printf(\"Not enough bids to determine the highest bid.\\n\");\n        return 0;\n    }\n\n    // Allocate memory\n    int *bids = (int *)malloc(N * sizeof(int));\n    if (bids == NULL) {\n        printf(\"Memory allocation failed.\\n\");\n        return 1;\n    }\n\n    // 2) Enter 1 by 1 \n    // Check is each is at least 100,000\n    for (int i = 0; i < N; i++) {\n        int valid = 0;\n        do {\n            printf(\"Enter bid #%d (minimum $100000): \", i + 1);\n            if (scanf(\"%d\", &bids[i]) != 1) {\n                printf(\"Invalid input. Please enter a numeric value.\\n\");\n                // Clear invalid input from buffer\n                while (getchar() != '\\n');\n                continue;\n            }\n\n            if (bids[i] < 100000) {\n                printf(\"Bid must be at least $100,000. Please enter again.\\n\");\n            } else {\n                valid = 1;\n            }\n        } while (!valid);\n    }\n\n    // 3) The program will determine the highest bid from the entered values.\n    int highest_bid = bids[0];\n    for (int i = 1; i < N; i++) {\n        if (bids[i] > highest_bid) {\n            highest_bid = bids[i];\n        }\n    }\n\n    // 4) The program should output the value of the highest bid.\n    printf(\"The highest bid is $%d.\\n\", highest_bid);\n\n    // Free the allocated memory\n    free(bids);\n\n    return 0;\n}\n",
    "feedback": "q2:The program correctly prompts the user for three integers, calculates their sum, product, average, and identifies the largest and smallest numbers. The calculations and comparisons are implemented correctly. q3:The program correctly implements a menu-driven system for calculating costs of different grocery items based on user inputs. It handles various product types and correctly applies discounts, producing accurate results."
  },
  {
    "student_id": "20610102",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N=0;\r\n\r\n    // 1.Prompt user for array size and validate\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Invalid size. N must be at least 5.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // 2.allocate memory for the array\r\n    int *array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed. Exiting.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // 3.Input array elements\r\n    printf(\"Enter %d elements for the array:\\n\", N);\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (array+i)); // Using pointer arithmetic\r\n    }\r\n\r\n    int index1, index2;\r\n\r\n    // 4.Input indices and validate\r\n    do {\r\n        printf(\"Enter two indices (0 <= index1, index2 < %d):\\n\", N);\r\n        printf(\"Index1: \");\r\n        scanf(\"%d\", &index1);\r\n        printf(\"Index2: \");\r\n        scanf(\"%d\", &index2);\r\n\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Invalid indices. Please try again.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    // 5.Calculate sum using pointers\r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    // 6.Print the sum\r\n    printf(\"The sum of elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\n// Function to calculate the average of marks\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names, marks, and the average\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Student %d: %s, Marks: %.2f\\n\", i + 1, names[i], marks[i]);\r\n    }\r\n}\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];  // Array to store student names\r\n    float marks[STUDENT_COUNT];             // Array to store student marks\r\n\r\n    // 1.Input student names and marks\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);  // Read full name including spaces\r\n        printf(\"Enter the marks of %s: \", names[i]);\r\n        scanf(\"%f\", &marks[i]);  // Read marks\r\n    }\r\n\r\n    // 2.Calculate the average mark\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    // 3.Display student data and average\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"\\nThe average mark is: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n    // Step 1: Input number of bids and validate\r\n    do {\r\n        printf(\"Enter the number of bids (N >= 2): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 2) {\r\n            printf(\"Invalid input. There must be at least two bids.\\n\");\r\n        }\r\n    } while (N < 2);\r\n\r\n    float bids[N];  // Array to store bid values\r\n\r\n    // Step 2: Input bids and validate each bid\r\n    for (int i = 0; i < N; i++) {\r\n        do {\r\n            printf(\"Enter bid %d (at least $100,000): \", i + 1);\r\n            scanf(\"%f\", &bids[i]);\r\n            if (bids[i] < 100000) {\r\n                printf(\"Invalid bid. It must be at least $100,000.\\n\");\r\n            }\r\n        } while (bids[i] < 100000);\r\n    }\r\n\r\n    // Step 3: Determine the highest bid\r\n    float highestBid = bids[0];\r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Step 4: Output the highest bid\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and successfully prints a grid of asterisks according to the specified dimensions. The use of nested loops is appropriate and functions as intended. q2:The program correctly prompts the user for the number of integers, ensures that at least three integers are entered, and calculates the sum, average, product, smallest, and largest values effectively. The logic for comparisons is sound. q3: The program correctly prompts the user for product type and gathers necessary details to calculate the total and final costs after applying discounts. The logic for handling different product types is sound, and it successfully calculates the final cost based on user input."
  },
  {
    "student_id": "20605542",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20602511",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int arr[100]; //Declare a array with a maximum size of 100\r\n    int i;\t// Declare i variable\r\n    int n; // Declare n variable\r\n    int sum;\t// Declare sum variable\r\n    int index1, index2; // Declare indexs variable\r\n    int *pIndex1, *pIndex2; // Declare pointers to integers\r\n\r\n    \r\n    while (1) {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &n); \r\n        \r\n\t// Validate if input of size is in range\r\n        if (n < 5) {\r\n            printf(\"Error: Size of array must more than 5.\\n\");\r\n            continue;\r\n        } else {\r\n            printf(\"Enter the array elements:\\n\"); \r\n            for (i = 0; i < n; ++i) {\r\n                printf(\"Element %d: \", i);\r\n                scanf(\"%d\", &arr[i]); \r\n            }\r\n            break; \r\n        }\r\n    }\r\n    \r\n    while (1) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d):\", n);\r\n        scanf(\"%d %d\", &index1, &index2); \r\n            \r\n        if (index1 >= 0 && index1 < n && index2 >= 0 && index2 < n) { \r\n            pIndex1 = &arr[index1];\r\n            pIndex2 = &arr[index2];\r\n            sum = *pIndex1 + *pIndex2;\r\n            break; \r\n        } else {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    }\r\n    \r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n    \r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n#define NAME_LENGTH 50\r\n// Define the student structure\r\nstruct student {\r\n    char name[NAME_LENGTH];\r\n    float marks;\r\n};\r\n\r\n// Function to calculate the average marks\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; ++i) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student information\r\nvoid displayStudentData(struct student s[], int count) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < count; ++i) {\r\n        printf(\"%s: %.1f\\n\", s[i].name, s[i].marks);\r\n    }\r\n}\r\n\r\nint main() {\r\n    struct student s[3];\r\n    char marksInput[10]; \r\n    int i;\r\n\r\n    // Collecting student data\r\n    for (i = 0; i < 3; ++i) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        fgets(s[i].name, sizeof(s[i].name), stdin); \r\n\r\n\r\n        char *newline = strchr(s[i].name, '\\n');\r\n        if (newline) *newline = '\\0';\r\n\r\n        while (1) {\r\n            printf(\"Enter the marks of student %d: \", i + 1);\r\n            fgets(marksInput, sizeof(marksInput), stdin);\r\n\r\n            // Convert marks input to float\r\n            if (sscanf(marksInput, \"%f\", &s[i].marks) == 1 && s[i].marks >= 0) {\r\n                break; // Valid marks\r\n            } else {\r\n                printf(\"Error: Please enter a valid positive number for marks.\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Display student data\r\n    displayStudentData(s, 3);\r\n\r\n    // Calculate and display average marks\r\n    float marksArray[3];\r\n    for (i = 0; i < 3; ++i) {\r\n        marksArray[i] = s[i].marks;\r\n    }\r\n    float average = calculateAverage(marksArray, 3);\r\n    printf(\"\\nAverage Marks: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n// Function to find the highest bid\r\nfloat findHighestBid(const float bids[], int n) {\r\n    float highest = bids[0];\r\n    for (int i = 1; i < n; ++i) {\r\n        if (bids[i] > highest) {\r\n            highest = bids[i];\r\n        }\r\n    }\r\n    return highest;\r\n}\r\n\r\nint main() {\r\n    int n;\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    while (1) {\r\n        scanf(\"%d\", &n);\r\n\r\n        if (n < 2) {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    float bids[n]; // Declare the array \r\n    int i;\r\n\r\n    printf(\"Enter the bids (must be at least $100,000): \\n\");\r\n\r\n    // Input bids with validation\r\n    for (i = 0; i < n; ++i) { \r\n        while (1) {\r\n            printf(\"Bid %d: \", i + 1); \r\n            scanf(\"%f\", &bids[i]);\r\n\r\n            if (bids[i] >= 100000) {\r\n                break; \r\n            } else {\r\n                printf(\"Error: Bid must be at least $100,000. Please try again.\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    float highestBid = findHighestBid(bids, n);\r\n\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and prints a grid of asterisks based on those dimensions. The logic is straightforward and functions as intended. q2:The program correctly reads three integers from the user, calculates their sum, average, and product, and identifies the smallest and largest values. However, there are some logical issues in the conditions for finding the smallest and largest numbers. The implementation meets the basic requirements but has redundant checks for equality in the smallest and largest calculations that could be streamlined. q3:The program correctly prompts the user for product details based on the selected product code and calculates the total cost and final cost after any discounts. The calculations for total cost and final cost are repeated in multiple branches of the if statements. You can simplify the logic by calculating the total cost once and then applying the discount if applicable."
  },
  {
    "student_id": "20704636",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n\r\n#define MIN_ARRAY_SIZE 5\r\n\r\nint get_int(const char *prompt, int *dest) {\r\n\tint status;\r\n\tdo {\r\n\t\tfflush(stdin);\r\n\t\tfprintf(stdout, prompt);\r\n\t\tstatus = scanf(\" %d\", dest);\r\n\t\tif (status == EOF) {\r\n\t\t\treturn EOF;\r\n\t\t}\r\n\t} while (status != 1);\r\n\r\n\treturn 0;\r\n}\r\n\r\nint main(void) {\r\n\tint array_size, *arr, index1, index2;\r\n\r\n\tdo {\r\n\t\tif (get_int(\"Enter the size of the array (N >= 5): \", &array_size) == EOF) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t} while (array_size < MIN_ARRAY_SIZE);\r\n\r\n\tarr = malloc(array_size * sizeof(int));\r\n\tif (arr == NULL) {\r\n\t\treturn 2;\r\n\t}\r\n\r\n\tprintf(\"Enter the array elements: \\n\");\r\n\r\n\tchar prompt[100];\r\n\tfor (int i = 0; i < array_size; i++) {\r\n\t\tsprintf(prompt, \"Element %d: \", i);\r\n\t\tif (get_int(prompt, &(arr[i])) == EOF) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n\r\n\twhile (true) {\r\n\t\tprintf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", array_size);\r\n\t\tscanf(\" %d %d\", &index1, &index2);\r\n\t\tif (index1 >= 0 && index1 < array_size && index2 >= 0 && index2 < array_size) {\r\n\t\t\tbreak;\r\n\t\t} else {\r\n\t\t\tfprintf(stderr, \"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n\t\t}\r\n\t}\r\n\r\n\tprintf(\"The sum of the values at indices %i and %i is: %i\\n\", index1, index2, arr[index1] + arr[index2]);\r\n\r\n\tfree(arr);\r\n\r\n\treturn 0;\r\n}\n/* --- q2.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n\r\n#define ARRAY_SIZE 3\r\n#define NAME_LENGTH 50\r\n\r\nint get_float(const char *prompt, float *dest) {\r\n\tint status;\r\n\tdo {\r\n\t\tfflush(stdin);\r\n\t\tfprintf(stdout, prompt);\r\n\t\tstatus = scanf(\" %f\", dest);\r\n\t\tif (status == EOF) {\r\n\t\t\treturn EOF;\r\n\t\t}\r\n\t} while (status != 1);\r\n\r\n\treturn 0;\r\n}\r\n\r\nint get_name_marks(int index, char *name, float *marks) {\r\n\tfflush(stdin);\r\n\tfprintf(stdout, \"Enter the name of student %d: \", index);\r\n\tif (scanf(\" %[^\\n]\", name) == EOF) {\r\n\t\treturn EOF;\r\n\t}\r\n\r\n\tchar prompt[100];\r\n\tsprintf(prompt, \"Enter the mark of student %d: \", index);\r\n\treturn get_float(prompt, marks);\r\n}\r\n\r\nvoid print_students_info(char names[ARRAY_SIZE][NAME_LENGTH], float marks[ARRAY_SIZE]) {\r\n\tprintf(\"Student Names and Marks: \\n\");\r\n\tfor (int i = 0; i < ARRAY_SIZE; ++i) {\r\n\t\tprintf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n\t}\r\n}\r\n\r\nfloat get_average_marks(float marks[ARRAY_SIZE]) {\r\n\tfloat sum = 0;\r\n\tfor (int i = 0; i < ARRAY_SIZE; ++i) {\r\n\t\tsum += marks[i];\r\n\t}\r\n\r\n\treturn (sum / ARRAY_SIZE);\r\n}\r\n\r\nint main(void) {\r\n\tchar names[ARRAY_SIZE][NAME_LENGTH];\r\n\tfloat marks[ARRAY_SIZE];\r\n\r\n\tfor (int i = 0; i < ARRAY_SIZE; i++) {\r\n\t\tif (get_name_marks(i, names[i], &(marks[i])) == EOF) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprint_students_info(names, marks);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tfloat average_marks = get_average_marks(marks);\r\n\tprintf(\"Average Mark: %.2f\", average_marks);\r\n\r\n\treturn 0;\r\n}\n/* --- q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n\r\n#define MIN_BIDS_SIZE 2\r\n#define MIN_BID_AMOUNT 100000\r\n\r\nint get_int(const char *prompt, int *dest) {\r\n\tint status;\r\n\tdo {\r\n\t\tfflush(stdin);\r\n\t\tfprintf(stdout, prompt);\r\n\t\tstatus = scanf(\" %d\", dest);\r\n\t\tif (status == EOF) {\r\n\t\t\treturn EOF;\r\n\t\t}\r\n\t} while (status != 1);\r\n\r\n\treturn 0;\r\n}\r\n\r\nint main(void) {\r\n\tint num_bids = 0;\r\n\tint *bids;\r\n\r\n\tif (get_int(\"Enter the number of bids: \", &num_bids) == EOF) {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\twhile (num_bids < MIN_BIDS_SIZE) {\r\n\t\tif (get_int(\"Error: Number of bids must be at least 2. Please try again: \", &num_bids) == EOF) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n\r\n\tbids = malloc(num_bids * sizeof(int));\r\n\tif (bids == NULL) {\r\n\t\treturn 2;\r\n\t}\r\n\r\n\tprintf(\"Enter the bids (must be at least $%d):\\n\", MIN_BID_AMOUNT);\r\n\r\n\tint highest_bid = 0;\r\n\tchar prompt[100];\r\n\tfor (int i = 0; i < num_bids; ++i) {\r\n\t\tsprintf(prompt, \"Bid %d: \", i + 1);\r\n\t\tif (get_int(prompt, &(bids[i])) == EOF) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\twhile (bids[i] < MIN_BID_AMOUNT) {\r\n\t\t\tsprintf(prompt, \"Error: Bid must be at least $%d. Please try again: \", MIN_BID_AMOUNT);\r\n\t\t\tif (get_int(prompt, &(bids[i])) == EOF) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (highest_bid < bids[i]) {\r\n\t\t\thighest_bid = bids[i];\r\n\t\t}\r\n\t}\r\n\r\n\tprintf(\"The highest bid is: $%d\\n\", highest_bid);\r\n\r\n\tfree(bids);\r\n\r\n\treturn 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20581109",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N, index1, index2;\r\n\r\n    // user input size of array\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Incorrect array size, Please enter an array size of 5 or more.\");\r\n        }\r\n    }\r\n\r\n    while (N < 5);\r\n    // Declare an array N\r\n    int array[N];\r\n\r\n    // user input elements of the array one by one\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    // user input the indices and validate\r\n    do {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Error: Indices must be less than the size of the array. Try again.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n    // Compute sum\r\n    int sum = array[index1] + array[index2];\r\n    // Print the result\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n// declaring global variables\r\nint sum, i, average;\r\nchar studName[3][50];\r\nfloat mark[3];\r\n// Declaring function to print names and marks\r\nvoid myFunction(char studName[][50], float mark[]) {\r\n    printf(\"Student names and marks:\\n\");\r\n    for (int i = 0; i < 3; i++) { // Loop through the array\r\n        printf(\"%s: %.2f\\n\", studName[i], mark[i]); // Corrected format specifiers\r\n    }\r\n}\r\n\r\nvoid averageMark(float mark[]) {\r\n    sum = mark[0] + mark[1] + mark[2];\r\n    average = sum / 3;\r\n    printf(\"average mark: %f\", average);\r\n}\r\n\r\n\r\nint main() {\r\n    // Loop to input data for 3 students\r\n    for (i = 0; i < 3; i++) {\r\n        printf(\"Enter the name of student %d:\", i + 1);\r\n        // storing name in the array\r\n        scanf(\"%s\", studName[i]);\r\n        printf(\"Enter the mark of student %d:\", i + 1);\r\n        // Store mark in the array\r\n        scanf(\"%f\", &mark[i]);\r\n    }\r\n\r\n    // Call the myfunction to print the results\r\n    myFunction(studName, mark);\r\n    // Call averageMark to print the average\r\n    averageMark(mark);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1: The code structure is mostly clear, but the logic inside the nested loop is flawed. q2: The program correctly calculates the sum, average, product, smallest, and largest values, but it uses if statements that could be simplified. q3: While the code successfully calculates costs for fruits, it needs expansion to address all product types and improve variable naming for clarity."
  },
  {
    "student_id": "20720379",
    "code": "\n/* --- Q1.c --- */\n #include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N, index1, index2;\n\n    // Step 1: Prompt for size N of the array\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"The size must be at least 5.\\n\");\n        }\n    } while (N < 5);\n\n    // Step 2: Dynamically allocate memory for the array\n    int* arr = (int*)malloc(N * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n\n    // Step 3: Prompt the user to enter each element of the array\n    printf(\"Enter elements of the array:\\n\", N);\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", &arr[i]);\n    }\n\n    // Step 4: Prompt for two indices and validate them\n    do {\n        printf(\"Enter the indices of the two element (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\n            printf(\"Error:Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\n\n    // Step 5: Use pointers to access the array elements\n    int* ptr1 = arr + index1;\n    int* ptr2 = arr + index2;\n    int sum = *ptr1 + *ptr2;\n\n    // Step 6: Print the sum of the two elements\n    printf(\"Sum of the values at indices %d and %d: %d\\n\", index1, index2, sum);\n\n    // Free dynamically allocated memory\n    free(arr);\n\n    return 0;\n}\n\n/* --- Q2.c --- */\n#include <stdio.h>\n\n#define NUM_STUDENTS 3\n#define NAME_LENGTH 50\n\n// Function prototypes\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\n\nint main() {\n    char names[NUM_STUDENTS][NAME_LENGTH];  // Array to store student names\n    float marks[NUM_STUDENTS];               // Array to store student marks\n\n    // Step 1: Prompt the user to enter the names and marks\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);  // To read a full name with spaces\n\n        printf(\"Enter marks for student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    // Step 2: Calculate the average mark\n    float average = calculateAverage(marks, NUM_STUDENTS);\n\n    // Step 3: Display the student data and average\n    displayStudentData(names, marks);\n    printf(\"Average mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n// Function to calculate the average of the marks\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n// Function to display student names and marks\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"Names: %s, Marks: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\n/* --- Q3.c --- */\n#include <stdio.h>\n\n#define MIN_BID 100000  // Minimum valid bid amount\n\n// Function prototypes\nvoid getBids(int bids[], int n);\nint findHighestBid(int bids[], int n);\n\nint main() {\n    int N;\n\n    // Step 1: Prompt user to enter the number of bids\n    do {\n        printf(\"Enter the number of bids: \");\n        scanf(\"%d\", &N);\n        if (N < 2) {\n            printf(\"Errror: The number of bids must be at least 2.\\n\");\n        }\n    } while (N < 2);\n\n    // Declare an array to store the bids\n    int bids[N];\n\n    // Step 2: Get the bids from the user\n    getBids(bids, N);\n\n    // Step 3: Find the highest bid\n    int highestBid = findHighestBid(bids, N);\n\n    // Step 4: Output the highest bid\n    printf(\"The highest bid is: $%d\\n\", highestBid);\n\n    return 0;\n}\n\n// Function to get the bids from the user\nvoid getBids(int bids[], int n) {\n    for (int i = 0; i < n; i++) {\n        do {\n            printf(\"Enter bit %d (must be at least $100,000): \", i + 1);\n            scanf(\"%d\", &bids[i]);\n            if (bids[i] < MIN_BID) {\n                printf(\"Error: Bid must be at least $100,000.\\n\");\n            }\n        } while (bids[i] < MIN_BID);  // Keep asking until the bid is valid\n    }\n}\n\n// Function to find the highest bid\nint findHighestBid(int bids[], int n) {\n    int highest = bids[0];  // Assume the first bid is the highest\n\n    for (int i = 1; i < n; i++) {\n        if (bids[i] > highest) {\n            highest = bids[i];\n        }\n    }\n\n    return highest;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly prompts the user for a minimum of three integers, calculates their sum, average, product, smallest, and largest values. It also appropriately handles termination with -1 and checks to ensure that at least three valid integers have been entered. q3:The program correctly calculates the total cost for various grocery items based on user input. It handles different product types appropriately and allows for a discount to be applied"
  },
  {
    "student_id": "20699501",
    "code": "\n/* --- 20699501_Navya Binoy Valiyakunnel/q1.c --- */\n#include<stdio.h>\r\n#include<stdlib.h>\r\n\r\nint *N;\r\nint size;\r\nint sum;\r\n\r\n\r\nint main(){\r\n// prompt array size\r\n    printf(\"Enter the size of the array(N >= 5): \");\r\n    scanf(\"%d\", &size); \r\n\r\n    //validate size \r\n    while(size < 5){\r\n        printf(\"Invalid size. Please enter a valid size (N>=5):\");\r\n        scanf(\"%d\", &size);\r\n    }\r\n\r\n//Dynamically allocate memory for the array\r\n    N = (int *)malloc(size * sizeof(int));\r\n    \r\n\r\n\r\n\r\n    printf(\"Enter the array of elements:\\n\");\r\n //taking input and storing it in an array\r\n   \r\n    for (int i=0; i < size; i++) {\r\n        printf(\"Enter number %d: \", i+1);\r\n        scanf(\"%d\", &N[i]);\r\n    }\r\n\r\n    int index1, index2;\r\n\r\n    while(index1 >= 0, index2 < 6){\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index 2 < 6): \");\r\n        scanf(\"%d %d\", &index1, &index2);\r\n    }\r\n\r\n//Calculate sum\r\n    sum = N[index1] + N[index2];\r\n        \r\n\r\n    printf(\"The sum of the values of indices %d and %d is:%d\\n\", index1, index2, sum );\r\n\r\n//free allocated memory\r\n    free(N);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\n/* --- 20699501_Navya Binoy Valiyakunnel/q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n#define MAX_STUDENTS 3\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nfloat calculateAverage(const float marks[], int count) { \r\n    float total = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        total += marks[i]; // accumulate marks\r\n    }\r\n    return total / count; \r\n}\r\n\r\n// Function to display student data\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"Students Names and Marks:\\n\");\r\n    for (int i = 0; i < MAX_STUDENTS; i++) {\r\n        printf(\"Name: %s, Marks: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n\r\n    // Calculate and print the average mark\r\n    printf(\"Average mark: %.2f\\n\", calculateAverage(marks, MAX_STUDENTS)); \r\n}\r\nint main() {\r\n    char names[MAX_STUDENTS][NAME_LENGTH];\r\n    float marks[MAX_STUDENTS];\r\n\r\n    // loop for input \r\n    for (int i = 0; i < MAX_STUDENTS; i++) { \r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); // names to store names input\r\n\r\n        printf(\"Enter the mark of the student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]); // marks to store marks input\r\n    }\r\n\r\n    displayStudentData(names, marks); // Call to display student data\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\n/* --- 20699501_Navya Binoy Valiyakunnel/q3.c --- */\n#include<stdio.h>\r\n\r\nint bids[];\r\nint size;\r\n\r\nint main(){\r\n\r\n    printf(\"Enter number of bids: \");\r\n    scanf(\"%d\", &size);\r\n\r\n    int bids[size];\r\n\r\n    for(int i = 0; i <= size; i++){\r\n        int bid; \r\n        while(bid < 100000){\r\n            printf(\"Enter the bids(must be at least $100000):\\n Bid %d:\", i + 1);\r\n            scanf(\"%d\", &bid);\r\n\r\n            if(bid < 100000){\r\n            printf(\"Bid must be at least $100000.\\n \");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    for (int i = 1; i < bids; i++) {\r\n        if (bids[0] < bids[i]) {\r\n                bids[0] = bids[i];\r\n        }\r\n    }\r\n\r\n  printf(\"The highest bid is %d\", bids[0]);\r\n\r\n\r\n return 0;\r\n}",
    "feedback": "q1:The prompts for input are swapped. The variable columns should be used for the number of columns and rows for the number of rows. This can confuse the user about what they are inputting.  q2: not reading integers separated by single space as stated in question q3: The program aims to calculate the total and final costs of various products based on user input. However, there are several significant issues that prevent it from functioning correctly.The scanf function calls are incorrectly formatted.The for loop is incorrectly structured. The loop should not be used with a condition like productcode != 0 directly. The variables TotalF, TotalV, price3, and price4 are not initialized before use, which could lead to undefined behavior.\n\nDiscount Calculation Logic: The calculation for the final cost is incorrect. You should apply the discount to the total cost rather than just using the percentage"
  },
  {
    "student_id": "20607904",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(void) {\r\n    int *arr = NULL; //initialising the pointer to the dynamic array to NULL\r\n    int N, index1, index2; //initialing 3 int variables\r\n\r\n    int first_time = 1; //initialing first_time variable so that it wont show an error message the first time\r\n    do {\r\n        if (first_time != 1) {\r\n            printf(\"Array must be larger than 5, try again\\n\"); //displaying an error message if this is not the first time the user is attempting to input the variable\r\n        }\r\n        printf(\"Enter the size of the array (N ≥ 5): \");\r\n        scanf(\"%d\", &N);\r\n        first_time = 0;\r\n    } while (N < 5); //checking if the user input is less than 5, if it is loop back\r\n\r\n    //Reallocating memory to the size of the array(N) * the size of an int\r\n    int *temp = realloc(arr, N * sizeof(int)); //we reallocate temp in case it fails initially instead of arr\r\n    if(temp == NULL) {\r\n        printf(\"Memory allocation failed\"); //printing an error and freeing memory in the case of the memory failing to allocate\r\n        free(arr);\r\n        return 0;\r\n    }\r\n    arr = temp; //setting arr to the reallocated memory address\r\n\r\n    for(int i = 0; i<N; i++) { //running a for loop to read user input for elemnts and storing them in the array\r\n        printf(\"Element %d: \", i + 1);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    first_time = 1; //resetting first_time variable so that it wont show an error message the first time\r\n    do {\r\n        if (first_time != 1) {\r\n            printf(\"Error: Indices must be within range of the array elements. Please try again.\\n\"); //displaying an error message if this is not the first time\r\n        }\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2); //reading two integers separated by a space\r\n        first_time = 0;\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N); //checking if the two indexes given by the user are within bounds \r\n\r\n    //using pointer arithmatics to calculate the sum of the two numbers\r\n    int *num1ptr = arr + index1;  \r\n    int *num2ptr = arr + index2;  \r\n    int sum = *num1ptr + *num2ptr;   \r\n\r\n    printf(\"The sum of the values at indices %d and %d is: %d\", index1, index2, sum); //printing sum  of the two numbers and their index\r\n\r\n    free(arr); //freeing arr as its not being used anymore\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n#define NAME_LENGTH 50 //defining a const with the value 50 that represents the max length a name can be\r\n#define NUM_OF_STUDENTS 3 //defining a const with the value 3 that represents how many students the program is reading\r\n\r\n\r\n//this function is for reading student names and marks and storing them into their respective arrays\r\nvoid register_student_data(char student_names[NUM_OF_STUDENTS][NAME_LENGTH], float marks[NUM_OF_STUDENTS]) {\r\n    for(int i = 0; i<NUM_OF_STUDENTS; i++) { //running a for loop depending on the number of students\r\n        printf(\"Enter the name of student %d: \", i+1);\r\n        scanf(\" %[^\\n]\", student_names[i]); //changing scanf so that it can read spaces and as such a name instead of stopping at a space\r\n\r\n        printf(\"Enter the marks of student %d: \", i+1);\r\n        scanf(\"%f\", &marks[i]); //reading a float and storing it in marks \r\n    }\r\n}\r\n\r\n//this function is for calculating the avg marks\r\nfloat calc_avg(float marks[NUM_OF_STUDENTS]) {\r\n    float sum = 0; //initialising sum to 0\r\n    for(int i = 0; i<NUM_OF_STUDENTS; i++) { //running a for loop to add all the marks together\r\n        sum += marks[i];\r\n    }\r\n\r\n    float avg = sum / NUM_OF_STUDENTS; //diving the total marks by the number of students to get the avg\r\n    return avg;\r\n}\r\n\r\n//this function is for displaying all the student data in a table like format\r\nvoid display_student_data(char student_names[NUM_OF_STUDENTS][NAME_LENGTH], float marks[NUM_OF_STUDENTS]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\"); //printing a header\r\n    for(int i = 0; i<NUM_OF_STUDENTS; i++) {\r\n        printf(\"%s: %.2f\\n\", student_names[i], marks[i]); //printing the names and marks one by one in the format of, NAME: MARKS\r\n    }\r\n}\r\n\r\nint main(void) {\r\n    char student_names[NUM_OF_STUDENTS][NAME_LENGTH]; //initialing a 2d char array to store names with a cap of 50 letters per name\r\n    float marks[NUM_OF_STUDENTS]; //initialing an int array to store the marks of each student  \r\n\r\n    register_student_data(student_names, marks); //reading student names and marks \r\n\r\n    float avg = calc_avg(marks); //initialising avg and storing the average marks in avg\r\n\r\n    display_student_data(student_names, marks); //displaying student data\r\n\r\n    printf(\"\\nAverage Mark: %.2f\\n\", avg); //printing the avg marks\r\n\r\n    return  0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(void) {\r\n    double *bids = NULL;  //initialising the pointer to the dynamic array to NULL\r\n    int N; //initialing an int variable to store the number of bids\r\n\r\n    int first_time = 1; //initialing first_time variable so that it wont show an error message the first time\r\n    do {\r\n        if (first_time != 1) {\r\n            printf(\"number of bids must be at least 2. Please try again\\n\"); //displaying an error message if this is not the first time the user is attempting to input the variable\r\n        }\r\n        printf(\"Enter the number of bids (N ≥ 2): \");\r\n        scanf(\"%d\", &N);\r\n        first_time = 0;\r\n    } while (N < 2); //checking if the user input is less than 2, if it is loop back\r\n\r\n\r\n    //Reallocating memory to the number of bids * the size of a double\r\n    double *temp = realloc(bids, N * sizeof(double)); //we reallocate temp in case it fails initially instead of bids\r\n    if(temp == NULL) {\r\n        printf(\"Memory allocation failed\"); //printing an error and freeing memory in the case of the memory failing to allocate\r\n        free(bids);\r\n        return 0;\r\n    }\r\n    bids = temp; //setting bids to the reallocated memory address\r\n\r\n    printf(\"Enter the bids (must be at least $100000)\\n\"); //printing a header message\r\n    for(int i = 0; i<N; i++) { //running a for loop depending on the number of bids the user wants to input\r\n        first_time = 1; //resetting first_time varaible\r\n        do {\r\n            if (first_time != 1) {\r\n                printf(\"Error: Bid must be at least $100000. Please try again\\n\"); //printing an error message if its not the first_time or first_time = 0\r\n            }\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%lf\", &bids[i]);\r\n            first_time = 0;\r\n        } while (bids[i] < 100000); //checking if the bid is less than 100000, if it is loop back\r\n    }\r\n\r\n    double max = bids[0]; //initialing max to the first element of the array\r\n    for(int i = 1; i<N; i++) { //run through the entire array skipping the first element\r\n        if(bids[i] > max) { //checking if an element is in the array is larger than the max, if so set max to that element\r\n            max = bids[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: $%.0lf\", max); //printing the highest bid\r\n\r\n    free(bids); //freeing bids as its not being used anymore\r\n    return 0;\r\n}",
    "feedback": "q1:The code is generally well-structured, but there is an issue with variable reuse in the inner loop. Using the same variable name for both loops can lead to confusion and potential logical errors. q2:The program successfully prompts the user to enter three integers, calculates their sum, average, product, and identifies the smallest and largest values.The average calculation uses integer division, which can lead to truncation.  q3:The program correctly implements a menu-driven interface that allows users to select a product type, input relevant data, and calculate the total cost with a discount applied. In each case of the switch statement, you declare and initialize local variables (weight_fruits, price_per_kg_fruits, etc.) but do not handle the case where no valid option is selected (i.e., the switch statement handles it correctly, but the total variable is used uninitialized if the user enters an invalid option). This could lead to undefined behavior. To fix this, consider initializing total to 0 at the start."
  },
  {
    "student_id": "20687076",
    "code": "\n/* --- Q1.C --- */\nQUESTION 1)\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N, index1, index2, sum;\r\n    int *array;\r\n\r\n    // Step 1: Get the size of the array and validate\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n    while (N < 5) {\r\n        printf(\"Size must be at least 5. Try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    // Step 2: Allocate memory for the array\r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Step 3: Input array elements\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    // Step 4: Get the indices and validate\r\n    printf(\"Enter two indices (0 <= index < %d): \", N);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n    while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n        printf(\"Invalid indices. Try again: \");\r\n        scanf(\"%d %d\", &index1, &index2);\r\n    }\r\n\r\n    // Step 5: Calculate the sum\r\n    sum = array[index1] + array[index2];\r\n\r\n    // Step 6: Print the result\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free the allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.C --- */\nQUESTION 2)\r\n\r\n#include <stdio.h>\r\n\r\n#define STUDENT_COUNT 3\r\n#define NAME_LENGTH 50\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];  // Array to store student names\r\n    float marks[STUDENT_COUNT];              // Array to store student marks\r\n    float average;                           // Variable to store the average mark\r\n\r\n    // Step 1: Input student names and marks\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);  // Read the name (allows spaces)\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);  // Read the mark as a float\r\n    }\r\n\r\n    // Step 2: Calculate the average mark\r\n    average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    // Step 3: Display student names, marks, and average\r\n    displayStudentData(names, marks);\r\n    printf(\"Average Mark: %.2f\\n\", average);  // Print the average with 2 decimal places\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to calculate the average of marks\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n\r\n    // Sum all the marks\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n\r\n    // Return the average\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n\r\n    // Loop through all students and print their name and mark\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.C --- */\nQUESTION 3)\r\n\r\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N;\r\n    float bids[100];  // Fixed-size array to store bids (assumes a maximum of 100 bids)\r\n    float highest = 0;\r\n\r\n    // Step 1: Input the number of bids and validate\r\n    printf(\"Enter the number of bids (at least 2): \");\r\n    scanf(\"%d\", &N);\r\n    while (N < 2) {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    // Step 2: Input the bids and validate\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%f\", &bids[i]);\r\n        while (bids[i] < 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%f\", &bids[i]);\r\n        }\r\n\r\n        // Step 3: Check if this bid is the highest\r\n        if (bids[i] > highest) {\r\n            highest = bids[i];\r\n        }\r\n    }\r\n\r\n    // Step 4: Print the highest bid\r\n    printf(\"The highest bid is: $%.2f\\n\", highest);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. q2:\n    Logical Correctness: The intent to compute the sum, product, smallest, largest, and average of a given number of integers is clear. However, there are several issues:\n        The product calculation is incorrectly assigned in the loop, resetting for each number instead of accumulating.\n        The average calculation is placed incorrectly and lacks proper formatting.\n        The condition to check if the user entered at least three integers is flawed; it checks the value of x but does not prevent the program from starting if x is less than 3.\n    Code Structure Quality: The code has a reasonable structure, but there are syntax errors (missing semicolons) and logical flow issues. The use of float for average calculation should be corrected.\n    Code Completeness: The program does not compile due to syntax errors and lacks proper handling of the average calculation. Additionally, the sum should accumulate values instead of replacing them.\n\nFeedback: Needs Improvement.\n\n    Fix the product calculation: Change prod = numbers[i]; to prod *= numbers[i]; to accumulate the product.\n    Correct average calculation: Place the average calculation outside the loop and ensure proper type casting.\n    Add missing semicolons: Ensure every statement ends with a semicolon. q3: not answered"
  },
  {
    "student_id": "20611302",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int *arr = NULL;   // Pointer to assign array size dynamically\r\n    int size = 0;        // Size of array\r\n    int index1, index2;  // Index for the target elements\r\n\r\n    // User inputs the size of array and validate N ≥ 5\r\n    do {\r\n        printf(\"Enter the size of the array (N ≥ 5): \");\r\n        scanf(\"%d\", &size);\r\n        if (size < 5) {\r\n            printf(\"Invalid input. The size must be at least 5.\\n\");\r\n        }\r\n    } while (size < 5);\r\n\r\n    // Using malloc to assign size of array dynamically\r\n    arr = (int *)malloc(size * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed. Exiting program.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // User inputs elements inside the array\r\n    printf(\"Enter %d elements for the array:\\n\", size);\r\n    for (int i = 0; i < size; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    // User inputs 2 index and sums up the elements of the 2 chosen index, validate invalid index\r\n    do {\r\n        printf(\"Enter the first index (0 ≤ index < %d): \", size);\r\n        scanf(\"%d\", &index1);\r\n\r\n        printf(\"Enter the second index (0 ≤ index < %d): \", size);\r\n        scanf(\"%d\", &index2);\r\n\r\n        if (index1 < 0 || index1 >= size || index2 < 0 || index2 >= size) {\r\n            printf(\"Invalid indices. Please try again.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= size || index2 < 0 || index2 >= size);\r\n\r\n    // Calculation of the sum of the two elements chosen\r\n    int sum = *(arr + index1) + *(arr + index2);\r\n\r\n    // Print the sum\r\n    printf(\"The sum of elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME 25         // Length of name\r\n#define STUDENTS 3      // Student count\r\n\r\n// Function to calculate the average marks\r\nfloat calcAvg(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student data and the average marks\r\nvoid displayStudent(const char names[][NAME], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < STUDENTS; i++) {\r\n        printf(\"%d: %s %.2f\\n\", i + 1, names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char names[STUDENTS][NAME]; // Array to store student names\r\n    float marks[STUDENTS];      // Array to store student marks\r\n\r\n    // User inputs the names and marks of students\r\n    for (int i = 0; i < STUDENTS; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n\r\n        printf(\"Enter the marks of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // Calculate the average marks\r\n    float average = calcAvg(marks, STUDENTS);\r\n\r\n    // Display the student data\r\n    displayStudent(names, marks);\r\n\r\n    // Display the average marks\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int *bids = NULL;       // Pointer for dynamic array\r\n    int Bids;            // Number of bids\r\n    int highestBid = 0;     // Variable to store the highest bid\r\n\r\n    // User inputs number of bids\r\n    do {\r\n        printf(\"Enter the number of bids (N ≥ 2): \");\r\n        scanf(\"%d\", &Bids);\r\n        if (Bids < 2) {\r\n            printf(\"Invalid input. You must have at least two bids.\\n\");\r\n        }\r\n    } while (Bids < 2);\r\n\r\n    // Allocate size dynamically according to user input \r\n    bids = (int *)malloc(Bids * sizeof(int));\r\n    if (bids == NULL) {\r\n        printf(\"Memory allocation failed. Exiting program.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // User inputs each bid and validate bid ≥ 100,000\r\n    printf(\"Enter the bids (must be at least $100,000):\\n\");\r\n    for (int i = 0; i < Bids; i++) {\r\n        do {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%d\", &bids[i]);\r\n            if (bids[i] < 100000) {\r\n                printf(\"Error: Bid must be at least $100,000.\\n\");\r\n            }\r\n        } while (bids[i] < 100000);\r\n    }\r\n\r\n    // Determine highest bid\r\n    highestBid = bids[0]; \r\n    for (int *ptr = bids; ptr < bids + Bids; ptr++) {\r\n        if (*ptr > highestBid) {\r\n            highestBid = *ptr; \r\n        }\r\n    }\r\n\r\n    // Print the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3: Syntax error. The loop condition while(choice == 0) is incorrect. It should be while(choice != 0) to continue the loop until the user enters 0. Currently, the program exits immediately if 0 is entered."
  },
  {
    "student_id": "20614355",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:  incorrect largest value. The average is currently calculated using integer division, which will yield an incorrect result if the sum is not divisible by 3.The condition used to determine the smallest and largest numbers is incorrect. The expressions num1 < num2 < num3 do not work as expected in C. Q3: incorrect discount (int)"
  },
  {
    "student_id": "20595218",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20720830",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int* ptr;\r\n    int n=0;\r\n    // Enter size of array\r\n    while (n<5){\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &n);\r\n        // Validate N>=5\r\n        if (n >= 5) {\r\n            break;\r\n        } else {\r\n            printf(\"N<5. Please enter again.\\n\");\r\n    }\r\n    }\r\n    int array[n];\r\n    // Allocate memory for the array\r\n    ptr = (int*)malloc(n * sizeof(int));\r\n    // Enter array elements\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < n; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n    // Declare index1 and index2 as -1 to validate the input\r\n    int index1 =-1, index2 =-1;\r\n    while (index1 < 0|| index1>= n || index2<0 || index2>=n) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", n);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        //Validate the indices (0 <= index1, index2 < N)\r\n        if (index1>=0 && index2 < n) {\r\n            break;\r\n        }else{\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    }\r\n    // Pointer-based to find the sum of values of thr two array elements\r\n    int sum = *(array + index1) + *(array + index2);\r\n    // Output the sum\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n    \r\n    // Free the dynamically allocated memory\r\n    free(ptr);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]); \r\n\r\nint main() {\r\n    // Declare variables\r\n    char names[3][NAME_LENGTH];\r\n    float marks[3];\r\n    // Input student names and marks\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); \r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n    displayStudentData(names, marks);\r\n    return 0;\r\n}\r\n\r\n// Function to display student data\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    // Print student names and marks\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    // Print average mark\r\n    printf(\"\\nAverage Mark: %.2f\\n\", calculateAverage(marks, 3));\r\n}\r\n\r\n// Function to calculate average mark\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    float result = 0;\r\n    // Calculate sum of marks\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    // Calculate average mark\r\n    result = sum/count;\r\n    return result;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n// Function prototype\r\nint maximum(int arr[], int n);\r\n\r\nint main(){\r\n    int n=0;\r\n    // Input the number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\",&n);\r\n    // Validate the number of bids (N>=2)\r\n    while(n<2){\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\",&n);\r\n        }\r\n    int bids[n];\r\n    // Input the bids\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    // Validate the bids (>=100000)\r\n    for(int i=0;i<n;i++){\r\n        printf(\"Bid %d: \",i+1);\r\n        scanf(\"%d\",&bids[i]);\r\n        if(bids[i]<100000){\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\",&bids[i]);\r\n        }\r\n    }\r\n    // Output the highest bid\r\n    printf(\"The highest bid is: $%d\\n\",maximum(bids,n));\r\n    return 0;\r\n}\r\n\r\n// Function to find the highest bid\r\nint maximum(int arr[], int n)\r\n{\r\n    int max = arr[0];\r\n    for (int i = 1; i < n; i++)\r\n        if (arr[i] > max)\r\n            max = arr[i];\r\n    return max;\r\n}\r\n",
    "feedback": "q1:The program prompts the user correctly for the number of rows and columns and attempts to print a grid of asterisks. However, the inner loop starts from 1, which results in one fewer asterisk printed in each row than specified by the user. The correct loop should start from 0 to ensure the right number of asterisks is printed. q2: The program correctly prompts the user for three integers and calculates the sum, average, product, smallest, and largest values. The logic is sound and produces the expected output. q3: The program correctly implements the logic for calculating total costs based on user input for different product types. It effectively uses a switch statement to handle different cases and computes the total and final costs accurately. However, the program does not include a loop to allow multiple entries, which could enhance usability."
  },
  {
    "student_id": "20593889",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly calculates the sum, average, product, and identifies both the smallest and largest of three integers entered by the user. The logic is clear and yields the expected results. q3:The program effectively calculates the total cost and final cost after applying a discount based on user input for different product types. The flow of logic is clear and well-structured.While scanf_s is a safer version of scanf, it is not universally supported across all compilers. If you are using a compiler that supports it, that’s fine, but consider using scanf for broader compatibility"
  },
  {
    "student_id": "20590120",
    "code": "\n/* --- Question 1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n    int *arr;\r\n    int index1;\r\n    int index2;\r\n    int sum;\r\n    int i;\r\n\r\n   printf(\"Enter the size of the array (N >= 5): \");   //Prompt user to enter size of N\r\n        scanf(\"%d\",&N);\r\n\r\n        if (N>= 5) {\r\n    \r\n    arr = (int*)malloc(N *sizeof(int));              //Allocate memory\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    printf(\"Enter the array elements:\\n\");           //Prompt user to enter each element \r\n    for (i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    do {                                                                                   //Prompt the user to enter the two indices\r\n        printf(\"Enter the indices of the two elements (0 <= index1,index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1,&index2);\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N || index1 == index2) {      //Check whether indices are within the range of array elements\r\n            printf(\"Error:Indices must be within the range of the array elements.Please try again.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N || index1 == index2);\r\n\r\n    int *ptr1 = &arr[index1];          //assign pointer to index1 and index2 \r\n    int *ptr2 = &arr[index2];\r\n    sum =*ptr1+*ptr2;              //calculate sum\r\n\r\n    printf(\"The sum of elements at indices %d and %d is: %d\\n\",index1,index2,sum);     //Print sum\r\n\r\n    } else {\r\n        printf(\"Error! N must be >= 5.Please try again.\");          //Print error if user input less than 5\r\n    }\r\n\r\n    return 0;\r\n}\n/* --- Question 2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int NumStudent);\r\nfloat calculateAverage(const float marks[], int count);\r\n\r\nint main() {\r\n    char names[3][NAME_LENGTH];   // Array to store student names\r\n    float marks[3];               // Array to store student marks\r\n    int i;\r\n\r\n    // Input student names and marks\r\n    for (i = 0; i < 3; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);             // Prompt the user to enter student names\r\n        scanf(\" %[^\\n]\", names[i]);  \r\n        printf(\"Enter the mark of student %d: \", i + 1);              // Prompt the user to enter student marks\r\n        scanf(\"%f\", &marks[i]);  \r\n    }\r\n   \r\n   \r\n    float average = calculateAverage(marks, 3);         // Calculate the average\r\n    \r\n   \r\n    displayStudentData(names, marks, 3);                // Display student data\r\n\r\n    printf(\"\\nAverage mark: %.2f\\n\", average);             // Display student average mark\r\n\r\n    return 0;\r\n}\r\n\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int NumStudent) {        // Function that display student names and marks\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < NumStudent; i++) {\r\n        printf(\" %s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count) {            //Function that calculate the average mark\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\n/* --- Question 3.c --- */\n#include <stdio.h>\r\nint main() {\r\n    int N;\r\n\r\n   printf(\"Enter the number of bids: \");                // Prompt the user to enter number of bids\r\n   scanf(\"%d\", &N);\r\n\r\n    \r\n    if (N < 2) {\r\n        printf(\"Error: Number of bids must be at least 2.Please try again:\");    // Check if N is at least 2\r\n        scanf(\"%d\",&N);\r\n    }\r\n\r\n    int bids[N];\r\n    int i;\r\n\r\n   for (i = 0; i < N; i++) {\r\n        do {\r\n            printf(\"Enter the bids (must be at least $100000):\\n\");         //  Prompt the user to enter bids\r\n            printf(\"Bid %d:\",i+1);\r\n            scanf(\"%d\", &bids[i]);\r\n\r\n             if (bids[i] < 100000) {\r\n                printf(\"Error:Bid must be at least $100000.Please try again:\" );    // Validate that the bid is at least $100,000\r\n                scanf(\"%d\", &bids[i]);\r\n            }\r\n        } while (bids[i] < 100000);\r\n    }\r\n\r\n    \r\n    int highestBid = bids[0];                 \r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highestBid) {                   //Determine the highest bid\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    printf(\"\\nThe highest bid is: $%d\\n\", highestBid);    // Output the value of highest bid\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program intends to print a grid of asterisks based on user-defined rows and columns. However, there are multiple syntax errors and logical issues that prevent it from functioning correctly. q2:The program aims to calculate the sum, average, product, smallest, and largest of three integers. However, there are multiple syntax and logical errors that prevent it from functioning correctly. q3:The program is intended to calculate the total and final costs of various grocery items based on user input. However, there are numerous syntax and logical errors that prevent the program from compiling and functioning correctly."
  },
  {
    "student_id": "20580127",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n// Function to validate if the entered index is in valid range\r\nint validate_index(int index, int size) {\r\n    return (index >= 0 && index < size);\r\n}\r\n\r\nint main() {\r\nint N;\r\n\r\n\r\nprintf(\"Enter the size of the array (N >= 5): \");\r\nscanf(\"%d\", &N);\r\n\r\n// check if N is at least 5\r\nwhile (N < 5) {\r\nprintf(\"Invalid size. Please enter a size of at least 5: \");\r\nscanf(\"%d\", &N);\r\n}\r\n\r\n//allocate memory for the array using pointers\r\nint *array = (int *)malloc(N * sizeof(int));\r\nif (array == NULL) {\r\nprintf(\"Memory allocation failed.\\n\");\r\n    return 1;\r\n    }\r\n\r\n// Prompt the user to enter each element of the array\r\nprintf(\"Enter %d elements of the array:\\n\", N);\r\nfor (int i = 0; i < N; i++) {\r\n    printf(\"Element %d: \", i + 1);\r\n    scanf(\"%d\", &array[i]);\r\n        }\r\n\r\n    int index1, index2;\r\n\r\n// Prompt the user to enter the two indices\r\nprintf(\"Enter the first index: \");\r\nscanf(\"%d\", &index1);\r\nwhile (!validate_index(index1, N)) {\r\n    printf(\"Invalid index. Please enter a valid index (0 to %d): \", N-1 );\r\n    scanf(\"%d\", &index1);\r\n    }\r\n\r\nprintf(\"Enter the second index: \");\r\nscanf(\"%d\", &index2);\r\nwhile (!validate_index(index2, N)) {\r\n    printf(\"Invalid index. Please enter a valid index (0 to %d): \", N-1 );\r\n    scanf(\"%d\", &index2);\r\n    }\r\n\r\n//find the sum of the values of the two array elements\r\nint sum = *(array + index1) + *(array + index2);\r\n\r\n\r\nprintf(\"The sum of the elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\nchar names[STUDENT_COUNT][NAME_LENGTH];\r\nfloat marks[STUDENT_COUNT];\r\n\r\n// Prompt the user to enter the values of the three student names and marks one by one\r\nfor (int i = 0; i < STUDENT_COUNT; i++) {\r\n    printf(\"Enter name of student %d: \", i + 1);\r\n    scanf(\" %[^\\n]\", names[i]);  // Read the student name\r\n    printf(\"Enter mark of student %d: \", i + 1);\r\n    scanf(\"%f\", &marks[i]);  // Read the student mark\r\n}   \r\n\r\n// Calculate the average mark\r\nfloat average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\ndisplayStudentData(names, marks, STUDENT_COUNT);\r\nprintf(\"Average mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to calculate avg mark\r\nfloat calculateAverage(const float marks[], int count) {\r\nfloat sum = 0.0;\r\nfor (int i = 0; i < count; i++) {\r\n    sum += marks[i];\r\n            }\r\n    return sum / count;\r\n}\r\n\r\n//Function to display student names and marks and average mark\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\nprintf(\"Student names and marks:\\n\");\r\nfor (int i = 0; i < count; i++) {\r\n    printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n        }\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\nint N;\r\n\r\n\r\nprintf(\"Enter number of bids: \");\r\nscanf(\"%d\", &N);\r\n\r\n//tell user  that the number of bids is at least 2\r\nwhile (N < 2) {\r\n    printf(\"Error: number of bids must be at least 2. Please try again: \");\r\n    scanf(\"%d\", &N);\r\n    }\r\n\r\n//array to store the bids\r\nfloat bids[N];\r\n\r\n//let the user to enter the values of the bids one by one\r\nfor (int i = 0; i < N; i++) {\r\n    printf(\"Enter bid %d (must be at least $100000): \", i + 1);\r\n    scanf(\"%f\", &bids[i]);\r\n    while (bids[i] < 100000) {\r\n        printf(\"Error: bid must be at least $100000. Please try again: \");\r\n        scanf(\"%f\", &bids[i]);\r\n        }\r\n    }\r\n\r\n//check which is the highest bid\r\nfloat highest_bid = bids[0];\r\nfor (int i = 1; i < N; i++) {\r\n    if (bids[i] > highest_bid) {\r\n            highest_bid = bids[i];\r\n        }\r\n    }\r\n\r\n\r\nprintf(\"Highest bid is: $%.2f\\n\", highest_bid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The code effectively prints a grid of asterisks, but ensure that loop variables are uniquely named to avoid conflicts.  q2: The code effectively implements the required functionality, but to improve accuracy, consider calculating the average using floating-point arithmetic (e.g., float average = (num1 + num2 + num3) / 3.0;). This would ensure that the average is displayed correctly. The code for calculating largest and smallest can be streamlined further. q3:  The program does not correctly handle the discount application, as it should be calculated based on the most recent total cost from the product type selected. Additionally, the output for total costs is not consistent, as it should be displayed every time a cost is calculated."
  },
  {
    "student_id": "20718893",
    "code": "\n/* --- Q1.c --- */\n#include<stdio.h>\r\n#define SIZE 50\r\nint main(){\r\n    int N, index1 = -1 , index2 = -1;\r\n    //comment user to enter the size of the array\r\n    printf(\"Enter the size of the array (N >= 5):\");\r\n    scanf(\"%d\",&N);\r\n    if(N >= 5){     //size validate\r\n        printf(\"Enter the array elements:\\n\");\r\n        int element[SIZE];\r\n        //comment user to enter the array elements\r\n        for(int i = 0; i < N; i++){\r\n            printf(\"Element %d:\",i);\r\n            scanf(\"%d\",&element[i]);\r\n        }\r\n        //\r\n        printf(\"Enter the indices of two elements (0 <= index1, index2 < 6):\");\r\n        scanf(\"%d %d\",&index1,&index2);\r\n        while(index1 < 0 || index1 < 0 || index1 >= N && index2 >= N){\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n            printf(\"Enter the indices of two elements (0 <= index1, index2 < 6):\");\r\n            scanf(\"%d %d\",&index1,&index2);\r\n        }\r\n        int sum = element[index1] + element[index2];\r\n        printf(\"The sum of the values at indice %d and %d is:%d\",index1,index2,sum);\r\n    }\r\n    else{\r\n        main();\r\n    }\r\n}\n/* --- Q2.c --- */\n#include<stdio.h>\r\n#define NAME_LENGTH 50\r\n#define STUDENT 3\r\nfloat calculateAverage(float marks[],int count){\r\n    //calculate the sum of marks\r\n    float sum = 0;\r\n    for(int i = 0; i < count;i++){\r\n        sum += marks[i];\r\n    }\r\n    //return average\r\n    return sum / count;\r\n}\r\nvoid displayStudentData(char names[][NAME_LENGTH],float marks[]){\r\n    //dispaly the student name and marks\r\n    printf(\"Student Names and Marks:\\n\");\r\n    for(int i = 0; i < STUDENT; i++){\r\n        printf(\"%s:%.2f\\n\",names[i],marks[i]);\r\n    }\r\n}\r\nint main(){\r\n    char names[STUDENT][NAME_LENGTH];\r\n    float marks[STUDENT];\r\n    int count = 0;\r\n    //comment use to enter the student data\r\n    for(int i = 0 ;i < STUDENT ;i++){\r\n        printf(\"Enter the name of student %d:\",i+1);\r\n        scanf(\" %s[^\\n]\",&names[i]);\r\n        printf(\"Enter the mark of student %d:\",i+1);\r\n        scanf(\" %f\",&marks[i]);\r\n        count++;\r\n    }\r\n    //calculate the average\r\n    float average = calculateAverage(marks,count);\r\n    //display data\r\n    displayStudentData(names,marks);\r\n    printf(\"\\n\\nAverage Mark:%.2f\",average);\r\n\r\n}\n/* --- Q3.c --- */\n#include<stdio.h>\r\n#define BID_SIZE 30\r\nint main(){\r\n    int N,bid[BID_SIZE];\r\n    //comment user to enter the number of bids(N)\r\n    printf(\"Enter the number of bids:\");\r\n    scanf(\"%d\",&N);\r\n    while(N < 2){\r\n        printf(\"Error: Number of bids must be at least 2.Please try again:\");\r\n        scanf(\"%d\",&N);\r\n    }\r\n    //comment user to enter the values of bids\r\n    printf(\"Enter the bidss (must be at least $100000):\");\r\n    for(int i = 1; i <= N; i++){\r\n        printf(\"Bids%d:\",i);\r\n        scanf(\"%d\",&bid[i]);\r\n        while(bid[i] < 100000){\r\n            printf(\"Error: Bid must be at least $100000.Please try again:\");\r\n            scanf(\"%d\",&bid[i]);\r\n        }\r\n    }\r\n    //calculate the highestbid\r\n    int highestbid = -1;\r\n    for(int i = 1; i <= N; i++){\r\n        if(bid[i] > highestbid){\r\n            highestbid = bid[i];\r\n        }\r\n    }\r\n    printf(\"The highest bid is: $%d\",highestbid);\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and prints a grid of asterisks based on those dimensions. The logic is straightforward and functions as intended. q2:The average is calculated using integer division because sum is an integer. This can lead to incorrect results if sum is not perfectly divisible by 3.  q3:The return 0; statement is incorrectly placed inside the loop, causing the program to terminate after processing the first product.  Redundant logics for using both swith case and if / else"
  },
  {
    "student_id": "20618336",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n//QUESTION 1\r\n\r\nint main() {\r\n    int N;\r\n    int index1;\r\n    int index2; //Declaration of variables N, index1, index2\r\n\r\n    // Ask the user for the size of the array\r\n    \r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    \r\n    scanf(\"%d\", &N);\r\n\r\n    // Validate the size of the array\r\n    \r\n    while (N < 5) {\r\n        \r\n        printf(\"The size is invalid. Enter a minimum size of 5: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    //Dynamically allocate memory for an array\r\n    \r\n    int *array = malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        \r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Ask the user to fill the elements of the array\r\n    \r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    //Ask the user to input valid indices\r\n    \r\n    do {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        \r\n        scanf(\"%d %d\", &index1, &index2);\r\n        \r\n        \r\n\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Error: Indices must be within the range of the array. Please try again.\\n\"); //This line indicates an error message \r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    //Calculate the sum using pointers\r\n    \r\n    int sum = *(array + index1) + *(array + index2); //Calculate the sum using pointers\r\n\r\n    //Display the result\r\n    \r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free the allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n//QUESTION 2\r\n\r\nint main() {\r\n    char name1[50], name2[50], name3[50];// Variables to store the names of 3 students, each with a maximum length of 50 characters\r\n    \r\n    float mark1, mark2, mark3, average; // Variables to store the marks of three students (mark1, mark2, mark3) and the average of the marks.\r\n\r\n\r\n    //  Key in Data for student 1\r\n    printf(\"Enter the name of student 1: \");\r\n    scanf(\"%s\", name1);\r\n    \r\n    printf(\"Enter the mark of student 1: \");\r\n    scanf(\"%f\", &mark1);\r\n    \r\n    \r\n\r\n    // Key in Data for student 2\r\n    printf(\"Enter the name of student 2: \");\r\n    scanf(\"%s\", name2);\r\n    \r\n    printf(\"Enter the mark of student 2: \");\r\n    scanf(\"%f\", &mark2);\r\n    \r\n    \r\n\r\n    // Key in Data for student 3\r\n    printf(\"Enter the name of student 3: \");\r\n    scanf(\"%s\", name3);\r\n    \r\n    printf(\"Enter the mark of student 3: \");\r\n    scanf(\"%f\", &mark3);\r\n    \r\n    \r\n\r\n    \r\n    average = (mark1 + mark2 + mark3) / 3; //Calculate the average of the total marks\r\n\r\n    \r\n    printf(\"\\nStudent Names and Marks:\\n\"); //Display the Results\r\n    printf(\"%s: %.2f\\n\", name1, mark1);\r\n    printf(\"%s: %.2f\\n\", name2, mark2);\r\n    printf(\"%s: %.2f\\n\", name3, mark3);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average); 0//Display the result of the average\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n//QUESTION 3\r\n\r\nint main() {\r\n    int numBids, i;               // Declaration for the number of bids and loop counter\r\n    float bid, highestBid = 0.0;  // Variables to store each bid and the highest bid\r\n\r\n    // Prompt the user to enter the number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &numBids);\r\n\r\n    // Ensure the number of bids is at least 2\r\n    while (numBids < 2) {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &numBids);\r\n    }\r\n\r\n    // Prompt the user to input bids\r\n    printf(\"Enter the bids (must be at least $100,000):\\n\");\r\n    for (i = 1; i <= numBids; i++) {\r\n        printf(\"Bid %d: \", i);\r\n        scanf(\"%f\", &bid);\r\n\r\n        // Ensure each bid is at least $100,000\r\n        while (bid < 100000) {\r\n            printf(\"Error: Bid must be at least $100,000. Please try again: \");\r\n            scanf(\"%f\", &bid);\r\n        }\r\n\r\n        // Update the highest bid if the current bid is greater\r\n        if (bid > highestBid) {\r\n            highestBid = bid;\r\n        }\r\n    }\r\n\r\n    // Display the highest bid\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20716304",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    // define variable and array\r\n    int size;\r\n    int *array = NULL;\r\n\r\n    // ask user to input the size of the array\r\n    printf(\"Enter the size of array (N >= 5): \");\r\n    while (1) {\r\n        scanf(\"%d\", &size);\r\n        while(getchar() != '\\n');\r\n        if (size < 5) {\r\n            printf(\"Error: invalid size. Enter again: \");\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    // make array\r\n    array = malloc(size * sizeof(int));\r\n\r\n    // ask user to input elements\r\n    printf(\"Enter the array elements: \\n\");\r\n    for (int i = 0; i < size; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n        while (getchar() != '\\n');\r\n    }\r\n\r\n    // ask user to input two indexes\r\n    int index1, index2;\r\n    while (1) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", size);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if (index2 < index1 || index1 < 0 || index2 >= size){  \r\n            printf(\"Error: Indices must be within the range of the array elemtns. Please try again.\\n\");\r\n        }\r\n        else{\r\n            break;\r\n        }\r\n    }\r\n\r\n    // calculate the sum\r\n    int sum = 0;\r\n    for (int i = index1; i <= index2; i++) {\r\n        sum += array[i];\r\n    }\r\n    // printing the sum \r\n    printf(\"The sum of the values at indices %d and %d is: %d\", index1, index2, sum);\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50\r\n\r\n//function prototype\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const\r\nfloat marks[]); \r\n\r\nint main() {\r\n    // define variable and array\r\n    int count = 3;\r\n    char names[count][NAME_LENGTH];\r\n    float marks[count];\r\n    \r\n\r\n    // ask user to input name and marks\r\n    for (size_t i = 0; i < count; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        while (getchar() != '\\n');\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n        while (getchar() != '\\n');\r\n    }\r\n    puts(\"\");\r\n\r\n    // display student data\r\n    displayStudentData(names, marks);\r\n\r\n    // display the average mark\r\n    printf(\"\\nAverage Mark: %.2f\", calculateAverage(marks, count));\r\n    return 0;\r\n}\r\n\r\n// define function\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float avg = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        // calculate the sum of the marks\r\n        avg += marks[i];\r\n    }\r\n    avg /= count;\r\n    return avg;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"Student Names and Marks: \\n\");\r\n    // printing the student data\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MAX_NUM 100\r\n\r\nint main() {\r\n    //define variables\r\n    int num_bids;\r\n    int array[MAX_NUM];\r\n    int highest = 0;\r\n\r\n    // ask user to input the number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    while (1) {\r\n        // error handling\r\n        if (scanf(\"%d\", &num_bids) != 1 || num_bids < 2) {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    \r\n    // ask user to input bids\r\n    printf(\"Enter the bids (must be at least $100000): \\n\");\r\n    int num;\r\n    for (size_t i = 0; i < num_bids; i++) {\r\n        printf(\"Bid %d: \", i + 1);\r\n        // while loop for error handling\r\n        while (1) {\r\n            if (scanf(\"%d\", &num) != 1 || num < 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            while(getchar() != '\\n');\r\n        }\r\n        else {\r\n            // if bid is valid, then find the maximum\r\n            array[i] = num;\r\n            if (array[i] > highest) {\r\n                highest = array[i];\r\n            }\r\n            break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // printing the highest bid\r\n    printf(\"The highest bid is: $%d\", highest);\r\n    \r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print a grid of asterisks based on that input. The logic is sound and produces the expected output. q2:The program correctly prompts the user for three integers and calculates their sum, average, product, smallest, and largest values. However, the logic for finding the maximum value could be simplified for clarity. q3:The program correctly implements a menu-driven system for calculating the costs of various grocery products based on user inputs. It handles different product types, applies discounts, and calculates total and final costs effectively."
  },
  {
    "student_id": "20612258",
    "code": "\n/* --- assessment 2(Q1).c --- */\n#include <stdio.h>\r\n#include <stdlib.h> // Required for dynamic memory allocation\r\n\r\nint main() {\r\n    int N, *array = NULL, index1 = -1, index2 = -1, sum = 0;\r\n\r\n    // Step 1: Prompt user for the size of the array\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    while (1) {\r\n        scanf(\"%d\", &N);\r\n        if (N >= 5) { // Valid input\r\n            break;\r\n        }\r\n        printf(\"Error: N must be at least 5. Please try again: \");\r\n    }\r\n\r\n    // Step 2: Dynamically allocate memory for the array\r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (!array) { // Check for allocation failure\r\n        printf(\"Memory allocation failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Step 3: Populate the array with user input\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]); // Accessing using array subscript notation\r\n    }\r\n\r\n    // Step 4: Prompt user to enter two valid indices\r\n    printf(\"Enter the indices of two elements (0 <= index1, index2 < %d): \", N);\r\n    while (1) {\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        // Validate indices\r\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n            break;\r\n        }\r\n        printf(\"Error: Indices must be within the range [0, %d). Please try again: \", N);\r\n    }\r\n\r\n    // Step 5: Compute the sum of the selected elements\r\n    sum = array[index1] + array[index2]; // Accessing using array subscript notation\r\n\r\n    // Step 6: Display the sum\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Step 7: Free the allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- assessment 2(Q2).c --- */\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50 // Maximum length for a student name\r\n#define STUDENT_COUNT 3 // Number of students\r\n\r\n// Function prototypes\r\n// Calculates the average of marks in the array\r\nfloat calculateAverage(const float marks[], int count);\r\n\r\n// Displays student names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    // Array to store the names of students \r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    // Array to store marks corresponding to each student\r\n    float marks[STUDENT_COUNT];\r\n    int i; // Loop variable\r\n\r\n    // Step 1: Prompt the user to enter names and marks\r\n    for (i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        // Using \" %[^\\n]\" to read the full name including spaces\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        \r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        // Input the student's mark\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // Step 2: Calculate the average mark\r\n    // Calling the calculateAverage function to compute the average of all marks\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    // Step 3: Display the student data and the average mark\r\n    // Calls the displayStudentData function to print names and marks\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    \r\n    // Prints the average mark to two decimal places\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n \r\n    return 0; // Indicate successful program termination\r\n}\r\n\r\n// Function to calculate the average mark\r\n// Takes an array of marks and the total number of students\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0; // Initialize the sum of marks to 0\r\n    for (int i = 0; i < count; i++) {\r\n        // Add each student's mark to the sum\r\n        sum += marks[i];\r\n    }\r\n    // Return the average by dividing the sum by the number of students\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Names and Marks:\\n\"); // Header for the output\r\n    for (int i = 0; i < count; i++) {\r\n        // Prints the name and mark for each student\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- assessment 2(Q3).c --- */\n#include <stdio.h>\r\n#include <stdlib.h> // For dynamic memory allocation\r\n\r\nint main() {\r\n    int numberOfBids;       // To store the number of bids\r\n    int *bidsArray = NULL;  // Pointer for storing bids dynamically\r\n    int maxBid = 0;     // Variable to track the highest bid\r\n\r\n    // Step 1: Get the number of bids (must be at least 2)\r\n    while (1) {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &numberOfBids);\r\n\r\n        if (numberOfBids >= 2) {\r\n            break; // Exit the loop if the number of bids is valid\r\n        } else {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n    }\r\n\r\n    // Step 2: Allocate memory for the bids based on user input\r\n    bidsArray = (int *)malloc(numberOfBids * sizeof(int));\r\n    if (bidsArray == NULL) { // Check if memory allocation was successful\r\n        printf(\"Memory allocation failed! Exiting program.\\n\");\r\n        return 1; // Exit with an error code\r\n    }\r\n\r\n    // Step 3: Input each bid and validate it\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    for (int i = 0; i < numberOfBids; i++) {\r\n        while (1) {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%d\", &bidsArray[i]);\r\n\r\n            if (bidsArray[i] >= 100000) { \r\n                break; // Accept the bid if it meets the minimum requirement\r\n            } else {\r\n                printf(\"Error: Bid must be at least $100000. Please try again.\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Step 4: Find the highest bid from the array\r\n    for (int i = 0; i < numberOfBids; i++) {\r\n        if (bidsArray[i] > maxBid) {\r\n            maxBid = bidsArray[i]; // Update the maximum bid if a higher bid is found\r\n        }\r\n    }\r\n\r\n    // Step 5: Display the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", maxBid);\r\n\r\n    // Step 6: Free allocated memory to avoid memory leaks\r\n    free(bidsArray);\r\n\r\n    return 0; // Indicate successful program execution\r\n}\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns, then prints a grid of asterisks as expected. However, the declared but unused functions row and column may cause confusion. q2:The program accurately computes the sum, average, product, smallest, and largest of three integers based on user input. The use of a loop for comparisons is a nice touch, though it could be simplified further. While using a loop for comparisons is acceptable, it might be more straightforward to use simple conditional statements to find the smallest and largest numbers.  q3: no submission"
  },
  {
    "student_id": "20718385",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h> \r\n#include <stdlib.h> \r\n \r\nint main() { \r\n    int size = 0;\r\n    int indices1 = 0;\r\n    int indices2 = 0;\r\n    printf(\"Enter the size of the array: \"); \r\n    scanf(\"%d\", &size); \r\n    \r\n    if(size >= 5){\r\n    // Allocate memory for the array \r\n    int *array = (int *)malloc(size * sizeof(int)); \r\n    if (array == NULL) { \r\n        printf(\"Memory allocation failed\\n\"); \r\n        return 1; // Exit if allocation fails \r\n    } \r\n \r\n    //Fill the array with user input \r\n    for (int i = 0; i < size; i++) { \r\n        printf(\"Enter element %d: \", i + 1); \r\n        scanf(\"%d\", &array[i]); \r\n    } \r\n \r\n    //Print the array \r\n    printf(\"You entered: \"); \r\n    for (int i = 0; i < size; i++) { \r\n        printf(\"%d \", array[i]); \r\n    } \r\n    printf(\"\\n\"); \r\n    \r\n    // Free the allocated memory \r\n    free(array); \r\n    }\r\n    else{\r\n        printf(\"Number entered is not within range!\");\r\n    }\r\n    \r\n    printf(\"Enter the indices of two elements (0 <= index1, index < %d): \", size);\r\n    scanf(\"%d %d\", &indices1, &indices2);\r\n    \r\n    \r\n    if (indices1 && indices2 <= 0 && size){\r\n        printf(\"Enter the indices of two elements (0 <= index1, index < %d): \", size, indices1, indices2);\r\n    }\r\n    else{\r\n        printf(\"Error: Indices must be within  the range of array elements. Please try again.\");\r\n    }\r\n    \r\n    \r\n    \r\n    return 0; \r\n} \n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\n// Function to calculate average marks\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student data\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Name: %s, Marks: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n    \r\n    // Input student names and marks\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); // Reading name with spaces\r\n        printf(\"Enter the marks of %s: \", names[i]);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n    \r\n    // Calculate average\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n    \r\n    // Display student data and average marks\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"\\nAverage Marks: %.2f\\n\", average);\r\n    \r\n    return 0;\r\n}\r\n\r\n\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main(){\r\n    \r\n    int number = 0;\r\n    int bids = 0;\r\n    int m = 0;\r\n    int max = 0;\r\n    int min = 0;\r\n    \r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &number);\r\n    \r\n    for(int i = 1; i <= number; i++){\r\n        if(number >= 2){\r\n            printf(\"Enter the bids (must be at least $100000): \");\r\n            scanf(\"%d\", &m);\r\n            \r\n            \r\n        }\r\n        else{\r\n        printf(\"Error: Number of bids must be at least 2. Please try again.\");\r\n        }\r\n    }\r\n    \r\n    \r\n    printf(\"The highest bid is: \");\r\n    \r\n    \r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program effectively prompts the user for product details, calculates the total cost based on product type, and applies any discounts. The logic flows well, and the calculations are accurate."
  },
  {
    "student_id": "20579147",
    "code": "\n/* --- Qst 1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n\r\n\r\n\r\nint main(){\r\n// initialization of functions\r\nint N=0;\r\nint *array;\r\nint i=0;\r\nint index1=0;\r\nint index2=0;\r\n\r\n   do{\r\n   printf(\"Enter the size of the array(N>=5):\");// prompt the the user to enter\r\n   scanf(\"%d\",&N);//Get output form the user\r\n   if(N<5){\r\n    printf(\"Invalid\");\r\n   }\r\n}while(N<5);{\r\n        //allocate the memory\r\n        array = (int*) malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n }     printf(\"Memory allocation failed.\\n\");\r\n}\r\n\r\n\r\nprintf(\"Enter the array elements:\\n\");\r\n    for (i = 0; i < N; i++) {//loop through the array elements\r\n        printf(\"Elements %d: \", i);\r\n        scanf(\"%d\", &array[i]);//get output form user\r\n}\r\n\r\n\r\nreturn 0;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n/* --- Qst 2.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <math.h>\r\n\r\n\r\n\r\n\r\n// Function to calculate the average of marks\r\nfloat calculateAverage(float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names and marks\r\nvoid displayStudentData(char names[][50], float marks[], int count) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Name: %s, Marks: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char names[3][50];  // Array to store names of 3 students and allow only fifty characters\r\n    float marks[3];     // Array to store marks of 3 students\r\n\r\n    // Prompt the user to enter student names and marks\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); // Read the whole line for the student's name\r\n        printf(\"Enter marks of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]); // Read the marks for the student\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\n/* --- Qst 3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n\r\n\r\n\r\n\r\nint main() {\r\n    int N=0;//Initialization\r\n\r\n    // prompt user to enter bids\r\n    printf(\"Enter the number of bids(must be at least $100000): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    while (N < 2) {// check if number of bids is not less than two\r\n        printf(\"Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    int bids[N];//array\r\n\r\n    // loop through number of bids\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%d\", &bids[i]);// get output\r\n\r\n        while (bids[i] < 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &bids[i]);//output\r\n        }\r\n    }\r\n\r\n    //\r\n    int highest_bid = bids[0];\r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highest_bid) {\r\n            highest_bid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Step 4: print the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highest_bid);\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn 0;//end program\r\n\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: incorrect output (missing smallest/largest) The format string in scanf() has unnecessary escape characters (\\).The logic for determining the smallest and largest integers is incomplete. The current conditions do not assign or print the smallest and largest values.The sum calculation is correct q3: no submission"
  },
  {
    "student_id": "20611298",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    int N;\r\n    // pointer array\r\n    int *array;\r\n    // declare two variable\r\n    int index1;\r\n\r\n    int index2;\r\n\r\n    // prompt the user to enter the size of the array\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // use while loop to check if N value is above 5\r\n    while (N < 5)\r\n    {\r\n        printf(\"Error: N must be at least 5. Please try again.\\n\");\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    // allocate memory for the array\r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL)\r\n    {\r\n        printf(\"Error: Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // prompt user to enter all the elements for the array\r\n    printf(\"Enter the array elements:\\n\");\r\n\r\n    for (int i = 0; i < N; i++)\r\n    {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (array + i));\r\n    }\r\n\r\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n\r\n    // check if indices are within range\r\n    while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N)\r\n    {\r\n        // if not in range, prompt the user to enter it agian\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n    }\r\n\r\n    // declare pointer to do the sum\r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    // print output\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // free memoryy\r\n    free(array);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NUM_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\n// function prototypes\r\nfloat CalculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\n// function to calculate the average of marks\r\nfloat CalculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_STUDENTS];\r\n\r\n    // prompt user to key in student names and marks\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // calculate average mark using the function\r\n    float average = CalculateAverage(marks, NUM_STUDENTS);\r\n\r\n    // display student data and average mark\r\n    displayStudentData(names, marks);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n// Function prototypes\r\nvoid EnterBids(int bids[], int count);\r\nint HighestBid(const int bids[], int count);\r\n\r\n// recceive the bid from user\r\nvoid EnterBids(int bids[], int count)\r\n{\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%d\", &bids[i]);\r\n\r\n        // make sure each bid is at least $100000\r\n        while (bids[i] < 100000)\r\n        {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &bids[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// calculation for the highest bid\r\nint HighestBid(const int bids[], int count)\r\n{\r\n    int highest = bids[0];\r\n    for (int i = 1; i < count; i++)\r\n    {\r\n        if (bids[i] > highest)\r\n        {\r\n            highest = bids[i];\r\n        }\r\n    }\r\n\r\n    return highest;\r\n}\r\n\r\nint main()\r\n{\r\n    int N;\r\n\r\n    // prompt the user to enter the number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // use while loop to make sure that the value dont excess 2\r\n    while (N < 2)\r\n    {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    int bids[N];\r\n\r\n    // prompt use to enter the bids\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    EnterBids(bids, N);\r\n\r\n    // determine the highest bid calculate form the\r\n    int highestBid = HighestBid(bids, N);\r\n\r\n    // print the final output\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Ng Guan Yi_20611298/Ng Guan Yi_20611298/Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    int N;\r\n    // pointer array\r\n    int *array;\r\n    // declare two variable\r\n    int index1;\r\n\r\n    int index2;\r\n\r\n    // prompt the user to enter the size of the array\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // use while loop to check if N value is above 5\r\n    while (N < 5)\r\n    {\r\n        printf(\"Error: N must be at least 5. Please try again.\\n\");\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    // allocate memory for the array\r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL)\r\n    {\r\n        printf(\"Error: Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // prompt user to enter all the elements for the array\r\n    printf(\"Enter the array elements:\\n\");\r\n\r\n    for (int i = 0; i < N; i++)\r\n    {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (array + i));\r\n    }\r\n\r\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n\r\n    // check if indices are within range\r\n    while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N)\r\n    {\r\n        // if not in range, prompt the user to enter it agian\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n    }\r\n\r\n    // declare pointer to do the sum\r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    // print output\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // free memoryy\r\n    free(array);\r\n\r\n    return 0;\r\n}\n/* --- Ng Guan Yi_20611298/Ng Guan Yi_20611298/Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NUM_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\n// function prototypes\r\nfloat CalculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\n// function to calculate the average of marks\r\nfloat CalculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_STUDENTS];\r\n\r\n    // prompt user to key in student names and marks\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // calculate average mark using the function\r\n    float average = CalculateAverage(marks, NUM_STUDENTS);\r\n\r\n    // display student data and average mark\r\n    displayStudentData(names, marks);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Ng Guan Yi_20611298/Ng Guan Yi_20611298/Q3.c --- */\n#include <stdio.h>\r\n\r\n// Function prototypes\r\nvoid EnterBids(int bids[], int count);\r\nint HighestBid(const int bids[], int count);\r\n\r\n// recceive the bid from user\r\nvoid EnterBids(int bids[], int count)\r\n{\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%d\", &bids[i]);\r\n\r\n        // make sure each bid is at least $100000\r\n        while (bids[i] < 100000)\r\n        {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &bids[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// calculation for the highest bid\r\nint HighestBid(const int bids[], int count)\r\n{\r\n    int highest = bids[0];\r\n    for (int i = 1; i < count; i++)\r\n    {\r\n        if (bids[i] > highest)\r\n        {\r\n            highest = bids[i];\r\n        }\r\n    }\r\n\r\n    return highest;\r\n}\r\n\r\nint main()\r\n{\r\n    int N;\r\n\r\n    // prompt the user to enter the number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // use while loop to make sure that the value dont excess 2\r\n    while (N < 2)\r\n    {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    int bids[N];\r\n\r\n    // prompt use to enter the bids\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    EnterBids(bids, N);\r\n\r\n    // determine the highest bid calculate form the\r\n    int highestBid = HighestBid(bids, N);\r\n\r\n    // print the final output\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and prints a grid of asterisks according to the specified dimensions. The logic is sound, and the output is as expected. q2:The program accurately prompts the user for three integers and computes the sum, average, product, smallest, and largest values. The calculations are implemented correctly, and the outputs are formatted well.The current logic does not account for the case where two or more numbers may be equal. This can lead to incorrect outputs. Using <= and >= instead of < and > would make it more robust q3:The program correctly implements a menu-driven system that allows users to input product details, calculate total costs, and apply discounts for various product types. The calculations for total and final costs are accurate.The calculations for total cost and final cost are repeated across cases. This could be refactored into a separate function to avoid redundancy."
  },
  {
    "student_id": "20613250",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main(void){\r\n    int n = 0;\r\n    int index1=-1;\r\n    int index2=-1;\r\n\r\n    //size of array\r\n    while (n < 5){\r\n        printf(\"Enter the size of the array (N>=5):\");//prompt user to input size of array\r\n        scanf(\"%d\", &n);\r\n        if (n<5){ //check if size of array >=5\r\n            printf(\"\\nSize of array should more than or equal to 5\\n\");\r\n        }\r\n    }\r\n\r\n    //initialise array and pointer\r\n    int a[n];\r\n    int *ptr1 =a; //point to a[0]\r\n    int *ptr2 =a; //point to a[0]\r\n\r\n    //array element\r\n    printf(\"\\nEnter the array elements:\\n\");\r\n    for (size_t i =0; i<n; ++i){ //prompt user to input all array element\r\n        printf(\"Element %zu: \", i);\r\n        scanf(\"%d\", &a[i]);\r\n    }\r\n    \r\n    //array indices\r\n    while ((index1<0 || index1>=n)||(index2<0 || index2>=n)){ //validation of index\r\n        printf(\"\\nEnter the indices of the two elements (0<=index1, index2 < %d): \", n); //prompt user to input two indices\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if ((index1<0 || index1>=n)||(index2<0 || index2>=n)){\r\n            printf(\"\\nError: Indices must be within the range of the array elements. Please try again.\");\r\n        }\r\n        \r\n    }\r\n    ptr1+= index1; //set pointer1 address to address index1\r\n    ptr2+= index2; //set pointer2 address to address index2\r\n    int x = *ptr1+*ptr2; //value on two address added together\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, x);\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\nfloat marks[3];\r\nchar names[3];\r\nfloat calculateAverage(const float marks[], int count);\r\n//void displayStudentData(const char names[][NAME_LENGTH], const float marks[]); // NAME_LENGTH 50\r\n\r\nint main() {\r\n    for (size_t i=0;i<3;i++){\r\n        int j=i+1;\r\n        printf(\"\\nEnter the name of student %d:\",&j);\r\n        scanf(\"%s\", &names[i]);\r\n        printf(\"\\nEnter the name of student %d:\",&j);\r\n        scanf(\"%lf\", &marks[i]);\r\n    }\r\n    printf(\"\\nAverage Mark: %lf\", calculateAverage(marks,3));\r\n\r\n    return 0;\r\n}\r\nfloat calculateAverage(const float marks[], int count){\r\n    float average;\r\n    float total=0;\r\n    for (size_t i=0;i<count;i++){\r\n        total+=marks[i];\r\n    }\r\n    average = (total/count);\r\n    return average;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\nint n=0;\r\nint bid;\r\n\r\nint main() {\r\n    //prompt user to enter number of bids\r\n    printf(\"Enter the number of bids:\");\r\n    while (n<2){ //validation\r\n        scanf(\"%d\", &n);\r\n        if (n<2){ //validation\r\n            printf(\"\\nError: Number of bids must be at least 2. Please try again:\");\r\n        }\r\n        else{\r\n            break;\r\n        }\r\n    }\r\n    //initialise array and highest bid\r\n    int a[n];\r\n    int h; //highest bid\r\n    printf(\"\\nEnter the bids(must be at least $100000): \"); //prompt user to enter the bids   \r\n    for (int i=0;i<n;i++){ //repeat for n time\r\n        int j=i+1;\r\n        printf(\"\\nBid %d: \", (j)); //prompt user to enter the bid\r\n        while (a[i] <100000){\r\n            scanf(\"%d\", &bid);//validation\r\n            a[i] = bid;\r\n            if (a[i]<100000){ //validation\r\n                printf(\"\\nError: Bid must be at least $100000. Please try again:\");\r\n            }\r\n        }\r\n    }\r\n    //check for highest value\r\n    for (int i=1;i<n;i++){\r\n        if (a[i]>a[(i-1)]){ //if a[i] higher than a[i-1], then change highest bid to a[i]\r\n            h=i;\r\n        }\r\n    }\r\n    //display highest bid\r\n    printf(\"\\nThe highest bid is: %d\", a[h]);\r\n    \r\n    return 0;\r\n}\n/* --- labtest2/labtest2/Q1.c --- */\n#include <stdio.h>\r\n\r\nint main(void){\r\n    int n = 0;\r\n    int index1=-1;\r\n    int index2=-1;\r\n\r\n    //size of array\r\n    while (n < 5){\r\n        printf(\"Enter the size of the array (N>=5):\");//prompt user to input size of array\r\n        scanf(\"%d\", &n);\r\n        if (n<5){ //check if size of array >=5\r\n            printf(\"\\nSize of array should more than or equal to 5\\n\");\r\n        }\r\n    }\r\n\r\n    //initialise array and pointer\r\n    int a[n];\r\n    int *ptr1 =a; //point to a[0]\r\n    int *ptr2 =a; //point to a[0]\r\n\r\n    //array element\r\n    printf(\"\\nEnter the array elements:\\n\");\r\n    for (size_t i =0; i<n; ++i){ //prompt user to input all array element\r\n        printf(\"Element %zu: \", i);\r\n        scanf(\"%d\", &a[i]);\r\n    }\r\n    \r\n    //array indices\r\n    while ((index1<0 || index1>=n)||(index2<0 || index2>=n)){ //validation of index\r\n        printf(\"\\nEnter the indices of the two elements (0<=index1, index2 < %d): \", n); //prompt user to input two indices\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if ((index1<0 || index1>=n)||(index2<0 || index2>=n)){\r\n            printf(\"\\nError: Indices must be within the range of the array elements. Please try again.\");\r\n        }\r\n        \r\n    }\r\n    ptr1+= index1; //set pointer1 address to address index1\r\n    ptr2+= index2; //set pointer2 address to address index2\r\n    int x = *ptr1+*ptr2; //value on two address added together\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, x);\r\n}\n/* --- labtest2/labtest2/Q2.c --- */\n#include <stdio.h>\r\nfloat marks[3];\r\nchar names[3];\r\nfloat calculateAverage(const float marks[], int count);\r\n//void displayStudentData(const char names[][NAME_LENGTH], const float marks[]); // NAME_LENGTH 50\r\n\r\nint main() {\r\n    for (size_t i=0;i<3;i++){\r\n        int j=i+1;\r\n        printf(\"\\nEnter the name of student %d:\",&j);\r\n        scanf(\"%s\", &names[i]);\r\n        printf(\"\\nEnter the name of student %d:\",&j);\r\n        scanf(\"%lf\", &marks[i]);\r\n    }\r\n    printf(\"\\nAverage Mark: %lf\", calculateAverage(marks,3));\r\n\r\n    return 0;\r\n}\r\nfloat calculateAverage(const float marks[], int count){\r\n    float average;\r\n    float total=0;\r\n    for (size_t i=0;i<count;i++){\r\n        total+=marks[i];\r\n    }\r\n    average = (total/count);\r\n    return average;\r\n}\n/* --- labtest2/labtest2/Q3.c --- */\n#include <stdio.h>\r\nint n=0;\r\nint bid;\r\n\r\nint main() {\r\n    //prompt user to enter number of bids\r\n    printf(\"Enter the number of bids:\");\r\n    while (n<2){ //validation\r\n        scanf(\"%d\", &n);\r\n        if (n<2){ //validation\r\n            printf(\"\\nError: Number of bids must be at least 2. Please try again:\");\r\n        }\r\n        else{\r\n            break;\r\n        }\r\n    }\r\n    //initialise array and highest bid\r\n    int a[n];\r\n    int h; //highest bid\r\n    printf(\"\\nEnter the bids(must be at least $100000): \"); //prompt user to enter the bids   \r\n    for (int i=0;i<n;i++){ //repeat for n time\r\n        int j=i+1;\r\n        printf(\"\\nBid %d: \", (j)); //prompt user to enter the bid\r\n        while (a[i] <100000){\r\n            scanf(\"%d\", &bid);//validation\r\n            a[i] = bid;\r\n            if (a[i]<100000){ //validation\r\n                printf(\"\\nError: Bid must be at least $100000. Please try again:\");\r\n            }\r\n        }\r\n    }\r\n    //check for highest value\r\n    for (int i=1;i<n;i++){\r\n        if (a[i]>a[(i-1)]){ //if a[i] higher than a[i-1], then change highest bid to a[i]\r\n            h=i;\r\n        }\r\n    }\r\n    //display highest bid\r\n    printf(\"\\nThe highest bid is: %d\", a[h]);\r\n    \r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print a grid of asterisks based on that input. The logic is sound and produces the expected output. q2:The average calculation should be performed as a floating-point operation to avoid integer division. Currently, casting only the final result may lead to incorrect averages if the sum is not perfectly divisible by 3. A better approach would be to cast the sum before division q3:The program correctly implements a menu-driven system that allows users to input product details, calculate initial and final costs based on discounts, and handle different product types. The logic is sound, and the calculations are performed accurately.The calculation for the final cost after applying the discount could be made clearer. The line disPer = 100 - disPer; might be confusing. It's better to directly calculate the discount amount and apply it, which could improve readability."
  },
  {
    "student_id": "20677174",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main (void) {\r\n    int size; // Size of the array\r\n    int index1; // First index \r\n    int index2; // Second index\r\n    int sum; // Sum of elements at first index and second index\r\n\r\n    // Prompt user input for size and validate the size \r\n    // Ask user to enter again if invalid\r\n    while (1) {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &size);\r\n        if (size >= 5) {\r\n            break;\r\n        }\r\n        printf(\"Error: Size N must be >= 5\");\r\n    }\r\n\r\n    // Declare array based on size N input by user\r\n    int nums[size];\r\n\r\n\r\n    // Prompt user input for N array elements\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < size; ++i) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", nums+i);\r\n    }\r\n\r\n    // Prompt user input for two indices of the array elements and validate them\r\n    // Ask user to input again if invalid\r\n    while (1) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", size);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        // Validate by checking if both index1 and index2 are within the range (>=0 and < size)\r\n        if (index1 >= 0 && index1 < size && index2 >= 0 && index2 < size ) {\r\n            break;\r\n        }\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n    }\r\n    \r\n    // Calculate the sum using pointer arithmetic and display the sum\r\n    sum = *(nums + index1) + *(nums + index2);\r\n    printf(\"The sum of the values at indices %d and %d is: %d\", index1, index2, sum);\r\n    \r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50 // Define NAME_LENGTH as 50\r\n\r\n// Function prototype given by question\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]); // NAME_LENGTH 50 \r\n\r\n\r\nint main (void) {\r\n    char names[3][NAME_LENGTH]; // Array of names\r\n    float marks[3]; // Array of marks\r\n\r\n    // Use a for loop to get the name and mark of three students\r\n    for (int i = 0; i < 3; ++i) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", marks+i);\r\n    }\r\n    displayStudentData(names, marks);\r\n    return 0;\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float total = 0;\r\n    for (int i = 0; i < count; ++i) {\r\n        total += marks[i];\r\n    }\r\n    return total/count; \r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    float average; // Stores the average of the marks\r\n\r\n    printf(\"\\n\"); // Formatting output based on question's sample output\r\n\r\n    // Loop through names array and marks array to print the student's name and mark\r\n    printf(\"Student Names and Marks:\\n\");\r\n    for (int i = 0; i < 3; ++i) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n\r\n    printf(\"\\n\"); // Formatting output based on question's sample output\r\n\r\n    // Calculate the average marks and display the average marks\r\n    average = calculateAverage(marks, 3);\r\n    printf(\"Average Mark: %.2f\", average); \r\n}\r\n\r\n\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main (void) {\r\n    int noOfBids;\r\n    int highestBid;\r\n    \r\n    // Prompt user input for number of bids\r\n    // Asks user to input again if invalid\r\n    printf(\"Enter the number of bids: \");\r\n    while (1) {\r\n        scanf(\"%d\", &noOfBids);\r\n        if (noOfBids >= 2) {\r\n            break;\r\n        }\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n    }\r\n\r\n    // Initialise array to store bids based on number of bids input by user\r\n    int bids[noOfBids];\r\n\r\n    // Prompt user input for bids\r\n    // Asks user to input again if invalid\r\n    printf(\"Enter the bids (must be at least $100000)\\n\");\r\n    for (int i = 0; i < noOfBids; ++i) {\r\n        printf(\"Bid %d: \", i + 1);\r\n        while (1) {\r\n            scanf(\"%d\", bids + i);\r\n            if (bids[i] >= 100000) {\r\n                break;\r\n            }\r\n            printf(\"Error: Bids must be at least $100000. Please try again: \");\r\n        }\r\n    }\r\n\r\n    // Loop through all bids to get highest bid\r\n    // Initialise highest bid by default to first bid and start comparing from second bid onwards\r\n    highestBid = bids[0];\r\n    for (int i = 1; i < noOfBids; ++i) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Output the highest bid\r\n    printf(\"The highest bid is: $%d\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program effectively prompts the user for product details, calculates the total cost based on product type, and applies any discounts. The logic flows well, and the calculations are accurate."
  },
  {
    "student_id": "20617520",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    int sizeArr, *arr, index1, index2, sum = 0;\r\n\r\n    //promt array size and validate the N>=5\r\n    do{\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &sizeArr); //put the size of the array into sizeArr\r\n    } while (sizeArr < 5);\r\n\r\n    //allocate memmory for array\r\n    //RMB TO FREE MEMORY!!!\r\n    arr = (int *) malloc (sizeArr * sizeof(int)); //allocate memory for arr\r\n    if (arr == NULL)\r\n    {\r\n        printf(\"Memory allocation failed. \\n\"); //print error message if memory alloc fails\r\n        return 1;\r\n    }\r\n\r\n    //prompt for array elements\r\n    printf(\"Enter the array elements: \");\r\n    for (int i = 0; i < sizeArr; i++) //loop to fill the array with elements entered by user\r\n    {\r\n        printf(\"Element %d: \",i);\r\n        scanf(\"%d\", &arr[i]); //put the elements entered by user into array\r\n    }\r\n\r\n    //prompy for indices and validate\r\n    do \r\n    {\r\n        printf(\"Enter the indices of the two elemtns (0 <= index1, index2): \");\r\n        scanf(\"%d %d\", &index1, &index2);\r\n    } while(index1 < 0 || index1 >= sizeArr || index2 < 0 || index2 >= sizeArr);\r\n\r\n    //sum (must use ptr) ptr arithmetic \r\n    sum = *(arr + index1) + *(arr + index2); //formula to add the elements that are pointed by pointer using ptr arithmetic\r\n\r\n    //pritn output\r\n    printf(\"The sum of the values ar the indices %d and %d is: %d \\n\", index1, index2, sum);\r\n\r\n    free(arr); //free the memory\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define NUM_STUDENTS 3\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const int marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const int marks[], int count);\r\n\r\nint main() \r\n{\r\n    char names[NUM_STUDENTS][NAME_LENGTH]; //initiallize the size of arrays and define the max size\r\n    int marks[NUM_STUDENTS]; \r\n\r\n    //prompt user for student names and marks\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\"%s\", names[i]); //put the name in names array at index [i]\r\n\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%d\", &marks[i]); //put marks in marks array at index [i]\r\n    }\r\n\r\n    //calculate average mark using prototype given by question\r\n    float averageMark = calculateAverage(marks, NUM_STUDENTS);\r\n\r\n    //display student data and average mark using funciton\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    displayStudentData(names, marks, NUM_STUDENTS);\r\n    printf(\"Average Mark: %.2f\\n\", averageMark);\r\n\r\n    return 0;\r\n}\r\n\r\n//fucntion to calculate the average mark\r\nfloat calculateAverage(const int marks[], int count) //use const bc pass by value\r\n{\r\n    int sum = 0; //initialize sum\r\n    for (int i = 0; i < count; i++) //loop to add sum from the students\r\n    { \r\n        sum += marks[i]; //accumulate the sum of total marks\r\n    }\r\n    return (float)sum / count; //casting sum as a float so can get the result of avg mark as float\r\n}\r\n\r\n//funtion to display student names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const int marks[], int count) {\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %d\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int NumBids, i;\r\n    int bids [100];\r\n\r\n    //Get num of bids\r\n    do \r\n    {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &NumBids); //put number of bids into NumBids\r\n\r\n        if (NumBids < 2) //print error if user enters number of bids <= 2\r\n        {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again. \\n\");\r\n        }\r\n    } while (NumBids < 2);\r\n\r\n    //get bid values from user and validate\r\n    for (int i = 0; i < NumBids; i++)\r\n    {\r\n        do\r\n        {\r\n            printf(\"Enter bid %d (must be at least $100000): \", i+1);\r\n            scanf(\"%d\", &bids[i]); //put the $$$ of bids in bids[i]\r\n\r\n            if (bids[i] < 100000) //print error if user enters bid <= 100000\r\n            {\r\n                printf(\"Error: Bid must be at least $100000. PLease try again. \\n\");\r\n            }\r\n        }while(bids[i] < 100000);\r\n    }\r\n\r\n    //find hightest bid\r\n    int highest_bid = bids[0];\r\n    for (int i = 1; i < NumBids; i++)\r\n    {\r\n        if (bids[i] > highest_bid)\r\n        {\r\n            highest_bid = bids[i];\r\n        }\r\n    }\r\n\r\n    //display highets bid\r\n    printf(\"The highest bid is: $%d \\n\", highest_bid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly takes three integers from the user and calculates the maximum, minimum, sum, product, and average of the entered numbers.  Q3: incorrect output for case 3 & 4"
  },
  {
    "student_id": "20717304",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int n; //initialize variable for size of array \r\n    while (1)  //implement an infinite loop which does not break until valid value is given\r\n    {\r\n        printf(\"Enter the size of the array ( >= 5) : \");  //user input for array size\r\n        scanf(\"%d\", &n);\r\n\r\n        if (n < 5)   // loop to verify if given size is greater than 5\r\n        {\r\n            printf(\"Invalid size, enter again: \");\r\n        } \r\n        else \r\n        {\r\n            break;\r\n        }\r\n    }\r\n\r\n    int *array = (int *)malloc(n * sizeof(int));  // dynamic memory allocation for array using pointer\r\n\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (size_t i = 0; i < n; i++)\r\n    {                                               // take user input for each element of the array\r\n        printf(\"Enter element %d: \", i);\r\n        scanf(\"%d\", (array + i));\r\n    }\r\n\r\n    int index1, index2;\r\n    while (1)\r\n    {\r\n        printf(\"Enter the indices of two elements (0 <= index1, index2 < %d): \", n);   // take user input for index values \r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        if (index1 >= 0 && index1 < n && index2 >= 0 && index2 < n)  // verify if index lies within the array\r\n        {\r\n            break;\r\n        } \r\n        else\r\n        {\r\n            printf(\"Indices must be within the range of array elements. Please try again.\\n\");  // error message for when the given index values are not in the array \r\n        }\r\n    }\r\n\r\n    int sum = *(array + index1) + *(array + index2); // implement pointer arithmetic sum\r\n\r\n    printf(\"The sum of values at indices %d and %d is %d\\n\", index1, index2, sum);  // print out the output\r\n\r\n    free(array);  // free the memory location to prevent memory leaks\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50  \r\n#define STUD_COUNT 3\r\n\r\nfloat calculateAverage(const float marks[], int count) {   //define a function to calculate average\r\n\r\n    float sum = 0.0; \r\n    for (int i = 0; i < count; i++)    // for loop to count the sum of elements of the array as we traverse\r\n    {\r\n        sum = sum + marks[i];\r\n    }\r\n\r\n    return sum/count;  // returns the average value \r\n\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {  // define a function to display all the data \r\n\r\n    printf(\"\\nStudent Names and Marks: \\n\"); \r\n    int count = STUD_COUNT;\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        printf(\"%s : %.2f\\n\", names[i], marks[i]);  // for loop to traverse through both the arrays and print out data \r\n    }\r\n}\r\n\r\n\r\nint main() {\r\n\r\n    char names[STUD_COUNT][NAME_LENGTH];  //2d array for names since we have multiple names\r\n    float marks[STUD_COUNT];\r\n\r\n    for (int i = 0; i < STUD_COUNT; i++)\r\n    {\r\n        printf(\"Enter the name of student %d: \", i + 1);  // for loop to take user input for values\r\n        scanf(\" %[^\\n]\", names[i]); \r\n\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    displayStudentData(names, marks); // function call to display data\r\n\r\n    float average = calculateAverage(marks, STUD_COUNT);  // function call to calculate average\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n    \r\n\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int nbids;\r\n\r\n    while (1)\r\n    {\r\n        printf(\"Enter the number of bids: \");  //take user input for number of bids\r\n        scanf(\"%d\", &nbids);\r\n\r\n        if (nbids >= 2)  // validate if there are at least 2 bids, if not display error\r\n        {\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");  //error message\r\n        }\r\n    }\r\n\r\n    int bids[nbids];\r\n\r\n    for (int i = 0; i < nbids; i++)  //traverse through array and take user input \r\n    {\r\n        while (1)\r\n        {\r\n            printf(\"Bid %d: \", i + 1);  //user input for bids\r\n            scanf(\"%d\", &bids[i]);\r\n\r\n            if (bids[i] >= 100000)  //validat if bids are more than 100k\r\n            {\r\n                break;\r\n            }\r\n            else\r\n            {\r\n                printf(\"Error: Bid must be at least $100000. Please try again.\\n\"); //error message \r\n            }\r\n        }\r\n    }\r\n\r\n    int hbid = bids[0];\r\n    for (int i = 1; i < nbids; i++)  //traverse through loop and find highest\r\n    {\r\n        if (bids[i] > hbid)\r\n        {\r\n            hbid = bids[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: $%d\\n\", hbid);  //output the highiest bid\r\n\r\n    return 0;\r\n}\r\n\n/* --- 20717304_Eashwar/20717304_Eashwar_LA2/Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int n; //initialize variable for size of array \r\n    while (1)  //implement an infinite loop which does not break until valid value is given\r\n    {\r\n        printf(\"Enter the size of the array ( >= 5) : \");  //user input for array size\r\n        scanf(\"%d\", &n);\r\n\r\n        if (n < 5)   // loop to verify if given size is greater than 5\r\n        {\r\n            printf(\"Invalid size, enter again: \");\r\n        } \r\n        else \r\n        {\r\n            break;\r\n        }\r\n    }\r\n\r\n    int *array = (int *)malloc(n * sizeof(int));  // dynamic memory allocation for array using pointer\r\n\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (size_t i = 0; i < n; i++)\r\n    {                                               // take user input for each element of the array\r\n        printf(\"Enter element %d: \", i);\r\n        scanf(\"%d\", (array + i));\r\n    }\r\n\r\n    int index1, index2;\r\n    while (1)\r\n    {\r\n        printf(\"Enter the indices of two elements (0 <= index1, index2 < %d): \", n);   // take user input for index values \r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        if (index1 >= 0 && index1 < n && index2 >= 0 && index2 < n)  // verify if index lies within the array\r\n        {\r\n            break;\r\n        } \r\n        else\r\n        {\r\n            printf(\"Indices must be within the range of array elements. Please try again.\\n\");  // error message for when the given index values are not in the array \r\n        }\r\n    }\r\n\r\n    int sum = *(array + index1) + *(array + index2); // implement pointer arithmetic sum\r\n\r\n    printf(\"The sum of values at indices %d and %d is %d\\n\", index1, index2, sum);  // print out the output\r\n\r\n    free(array);  // free the memory location to prevent memory leaks\r\n\r\n    return 0;\r\n}\r\n\n/* --- 20717304_Eashwar/20717304_Eashwar_LA2/Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50  \r\n#define STUD_COUNT 3\r\n\r\nfloat calculateAverage(const float marks[], int count) {   //define a function to calculate average\r\n\r\n    float sum = 0.0; \r\n    for (int i = 0; i < count; i++)    // for loop to count the sum of elements of the array as we traverse\r\n    {\r\n        sum = sum + marks[i];\r\n    }\r\n\r\n    return sum/count;  // returns the average value \r\n\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {  // define a function to display all the data \r\n\r\n    printf(\"\\nStudent Names and Marks: \\n\"); \r\n    int count = STUD_COUNT;\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        printf(\"%s : %.2f\\n\", names[i], marks[i]);  // for loop to traverse through both the arrays and print out data \r\n    }\r\n}\r\n\r\n\r\nint main() {\r\n\r\n    char names[STUD_COUNT][NAME_LENGTH];  //2d array for names since we have multiple names\r\n    float marks[STUD_COUNT];\r\n\r\n    for (int i = 0; i < STUD_COUNT; i++)\r\n    {\r\n        printf(\"Enter the name of student %d: \", i + 1);  // for loop to take user input for values\r\n        scanf(\" %[^\\n]\", names[i]); \r\n\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    displayStudentData(names, marks); // function call to display data\r\n\r\n    float average = calculateAverage(marks, STUD_COUNT);  // function call to calculate average\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n    \r\n\r\n}\n/* --- 20717304_Eashwar/20717304_Eashwar_LA2/Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int nbids;\r\n\r\n    while (1)\r\n    {\r\n        printf(\"Enter the number of bids: \");  //take user input for number of bids\r\n        scanf(\"%d\", &nbids);\r\n\r\n        if (nbids >= 2)  // validate if there are at least 2 bids, if not display error\r\n        {\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");  //error message\r\n        }\r\n    }\r\n\r\n    int bids[nbids];\r\n\r\n    for (int i = 0; i < nbids; i++)  //traverse through array and take user input \r\n    {\r\n        while (1)\r\n        {\r\n            printf(\"Bid %d: \", i + 1);  //user input for bids\r\n            scanf(\"%d\", &bids[i]);\r\n\r\n            if (bids[i] >= 100000)  //validat if bids are more than 100k\r\n            {\r\n                break;\r\n            }\r\n            else\r\n            {\r\n                printf(\"Error: Bid must be at least $100000. Please try again.\\n\"); //error message \r\n            }\r\n        }\r\n    }\r\n\r\n    int hbid = bids[0];\r\n    for (int i = 1; i < nbids; i++)  //traverse through loop and find highest\r\n    {\r\n        if (bids[i] > hbid)\r\n        {\r\n            hbid = bids[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: $%d\\n\", hbid);  //output the highiest bid\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print a grid of asterisks based on that input. The logic is sound and produces the expected output. q2:The program correctly prompts the user for three integers and performs calculations to find the sum, average, product, smallest, and largest values. The variable avg is declared as an int, which can lead to truncation of decimal values. It would be better to declare it as a float. q3:The program effectively implements a menu-driven system that allows users to select different product types and input relevant data for calculating total costs and discounts. The logic is sound, and calculations are performed correctly for each product type."
  },
  {
    "student_id": "20615047",
    "code": "\n/* --- Question1.c --- */\n#include <stdio.h>\r\n\r\nint main (void) {\r\n\r\n    int N = 0;\r\n\r\n    printf (\"Enter the size of the array (N >= 5): \");\r\n    scanf (\"%d\", &N);\r\n\r\n    while (N < 5) {\r\n        printf (\"The Size of the Array must be at least 5. Please try again: \");\r\n        scanf (\"%d\", &N);\r\n    }\r\n\r\n    // i is a variable to loop till N\r\n    int arr[N], i = 1;\r\n\r\n    printf (\"Enter the array elements: \\n\");\r\n    for (int i = 0; i < N; ++i) {\r\n        printf (\"Element %d: \", i);\r\n        scanf (\"%d\", (arr + i));\r\n    }\r\n\r\n    int index1, index2;\r\n    printf (\"\\nEnter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n    scanf (\"%d %d\", &index1, &index2);\r\n\r\n    while ((index1 < 0 && index2 < 0 )|| (index1 > N && index2 > N)) {\r\n        printf (\"\\nError: Indices must be within the range of the array elements. Please try again: \");\r\n        scanf (\"%d %d\", &index1, &index2);\r\n    }\r\n\r\n    while (index1 < 0 || index1 > N) {\r\n        printf (\"\\nError: Indice must be within the range of the array elements. Please try again: \", index1);\r\n        scanf (\"%d\", &index1);\r\n    }\r\n\r\n    while (index2 < 0 || index2 > N) {\r\n        printf (\"\\nError: Indice must be within the range of the array elements. Please try again: \", index2);\r\n        scanf (\"%d\", &index2);\r\n    }\r\n\r\n    // Sum function using pointer\r\n    int sum = *(arr + index1) + *(arr + index2);\r\n    printf (\"\\nThe sum of the values at indices %d and %d is: %d\", index1, index2, sum);\r\n}\n/* --- Question2.c --- */\n#include <stdio.h>\r\n\r\nvoid displayStudentData(const char names[3][50], const float marks[3]) {\r\n    printf (\"Student Names and Marks: \\n\");\r\n    for (int x = 0; x < 3; ++x) {\r\n        puts(names[x]);\r\n        printf (\" %.2f\\n\", *(marks + x));\r\n    }\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float total = 0;\r\n    for (int y = 0; y < count; ++y){\r\n        total += marks[y];\r\n    }\r\n    return total / count;\r\n}\r\n\r\n\r\nint main (void) {\r\n    \r\n    int count = 3;\r\n    char names[3][50];\r\n    float marks[3];\r\n\r\n    for (int i = 0; i < count; ++i) {\r\n        printf (\"Enter the name of Student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n\r\n        printf (\"Enter the mark of Student %d: \", i + 1);\r\n        scanf(\"%f\", (marks + i));\r\n    }\r\n\r\n    displayStudentData (names, marks);\r\n\r\n    float sum = calculateAverage(marks, count);\r\n    printf (\"\\nAverage Mark: %.2f\", sum);\r\n}\n/* --- Question3.c --- */\n#include <stdio.h>\r\n\r\nint main(void) {\r\n\r\n    int bids, value[100], highest = 0;\r\n\r\n    // Prompt for the number of bids\r\n    printf(\"Enter the number of Bids: \");\r\n    scanf(\"%d\", &bids);\r\n\r\n    // Validate that the number of bids is at least 2\r\n    while (bids < 2) {\r\n        printf(\"Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &bids);\r\n    }\r\n\r\n    // Inputing the value of bids\r\n    for (int i = 0; i < bids; ++i) { \r\n        printf(\"Enter the bid #%d (must be at least $100000): \", i + 1);\r\n        scanf(\"%d\", &value[i]);\r\n\r\n        // Validate individual bid amounts\r\n        while (value[i] < 100000) {\r\n            printf(\"Invalid bid. Please try again (must be at least $100000): \");\r\n            scanf(\"%d\", &value[i]);\r\n        }\r\n\r\n        // Update the highest bid if the current bid is greater\r\n        if (highest < value[i]) {\r\n            highest = value[i];\r\n        }\r\n    }\r\n\r\n    // Output the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highest);\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20711819",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h> // library for malloc\n\nint main(){\n    // *uwuArray is pointr for the malloc dynamic array\n    // uwuSize for the user input array size\n    // uwuHold for holding each element value enter by the user\n    // index1, index2 for the indices specified by user\n    // outOfBound check if the indices are not in array range\n    // answer for storing the sum\n    int *uwuArray, uwuSize = 0, uwuHold, index1, index2, outOfBound = 1, answer = 0;\n    \n    // prompt user to enter the array size\n    printf(\"Enter the size of the array (N >= 5): \");\n    // check if the size input is < 5, if so, repeat asking the user\n    for (scanf(\"%d\", &uwuSize); uwuSize < 5; scanf(\"%d\", &uwuSize)){\n        printf(\"Enter the size of the array (N >= 5): \");\n    }\n    // dynamically allocate memory chunk for the array, return the address of first element to the pointer\n    uwuArray = malloc(uwuSize * sizeof(uwuSize));\n    \n    // promt user to enter each elemnt's value\n    for (int i = 0; i < uwuSize; i++){\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", &uwuHold);\n        // dereference and store the value into the pointed address\n        *uwuArray = uwuHold;\n        // increment the address by 1 (size of int, in this case, 4 bytes)\n        uwuArray++;\n    }\n    // reset the address the pointer is pointing to the first elemet\n    uwuArray -= uwuSize;\n    \n    // prompt the user to enter valid indices when they are out of bound\n    while(outOfBound){\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", uwuSize);\n        scanf(\"%d %d\", &index1, &index2);\n        // check if the indices are beyond the array range\n        if ((index1 < 0 || index1 >= uwuSize) || (index2 < 0 || index2 >= uwuSize)){\n            // error message if they are out of bound\n            printf(\"Error: Indices must be within the range of the array elements. Pwease try again.\\n\");\n        }else{\n            // else quit the loop\n            outOfBound = 0;\n        }\n    }\n    \n    // looping until the pointer is pointing to index1 of array\n    for (int i = 0; i < index1; i++){\n        uwuArray++;   \n    }\n    // add the value to answer\n    answer += *uwuArray;\n    // reset the pointer's pointing address\n    uwuArray -= index1;\n    \n    // looping until the pointer is pointing to index2 of array\n    for (int i = 0; i < index2; i++){\n        uwuArray++;   \n    }\n    // add the value to answer\n    answer += *uwuArray;\n    // reset the pointer's pointing address\n    uwuArray -= index2;\n\n    // print the answer\n    printf(\"The sum of value at indices %d and %d is: %d\\n\", index1, index2, answer);\n\n    return 0;\n}\n/* --- Q2.c --- */\n#include <stdio.h>\n\nvoid displayStudentData(const char *names[50], float marks[]){\n    printf(\"Students names and marks:\\n\");\n    for (int i = 0; i < 3; i++){\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\nfloat calculateAverage(float marks[], int count){\n    float average = 0.0;\n    for (int i = 0; i < count; i++){\n        average += marks[i];\n    }\n    return average / (float) count;\n}\n\nint main(){\n    char student1[50], student2[50], student3[50], hold = ' ';\n    char *names[50] = {student1, student2, student3};\n    float marks[3];\n    \n    int index = 0;\n    printf(\"Enter the name of sudent1: \");\n    for (scanf(\" %c\", &hold); hold != '\\n'; scanf(\"%c\", &hold)){\n        student1[index] = hold;\n        index++;\n    }\n    printf(\"Enter the mark of student1: \");\n    scanf(\"%f\", &marks[0]);\n    \n    index = 0;\n    printf(\"Enter the name of sudent2: \");\n    for (scanf(\" %c\", &hold); hold != '\\n'; scanf(\"%c\", &hold)){\n        student2[index] = hold;\n        index++;\n    }\n    printf(\"Enter the mark of student2: \");\n    scanf(\"%f\", &marks[1]);\n    \n    index = 0;\n    printf(\"Enter the name of sudent3: \");\n    for (scanf(\" %c\", &hold); hold != '\\n'; scanf(\"%c\", &hold)){\n        student3[index] = hold;\n        index++;\n    }\n    printf(\"Enter the mark of student3: \");\n    scanf(\"%f\", &marks[2]);\n    \n    displayStudentData(names, marks);\n    printf(\"Average mark: %f\", calculateAverage(marks, 3));\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n#include <stdlib.h> // library for malloc\n\nint main(){\n    // number of bids\n    int bids = 0;\n    // *money for storing each bid money\n    // hold for holding the bid money before validate and put int array\n    // highest to record highest\n    long long *money, hold, highest = 0;\n    \n    // ask the user to enter the amount of bids\n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &bids);\n    // loop until the bids are >= 2\n    while(bids < 2){\n        printf(\"Error: Number of bids msust be at least 2.\\n\");\n        printf(\"Please try again: \");\n        scanf(\"%d\", &bids);\n    }\n    // allocate array for storing each bid amount\n    money = malloc(bids * sizeof(hold));\n    \n    // ask user to enter bid money\n    printf(\"Enter the bids (must be at least $100000):\\n\");\n    // for each bid store into the array\n    for (int i = 0; i < bids; i++){\n        printf(\"Bid %d: \", i+1);\n        scanf(\"%lld\", &hold);\n        // ask the user to enter again if it is less than 100000\n        while (hold < 100000){\n            printf(\"Error: Bid must be at least $100000.\\n\");\n            printf(\"Please try again: $\");\n            scanf(\"%lld\", &hold);\n        }\n        // store it into the array\n        *money = hold;\n        // increase the array address\n        money++;\n    }\n    // reset the array address\n    money -= bids;\n    \n    // let the highest be the first bid first\n    highest = *money;\n    // loop through the array\n    for (int i = 1; i < bids; i++){\n        money++;\n        // if the current bid is higher, change the highest\n        if (*money > highest){\n            highest = *money;\n        }\n    }\n    \n    // print the highest\n    printf(\"The highest bid is: $%lld\", highest);\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20714680",
    "code": "\n/* --- Q1.c --- */\n// Q1\r\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N; \r\n    int arr[N];\r\n    int a, b;\r\n\r\n    printf(\"Enter the size of the array (N>=5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    if(N<5) {\r\n        printf(\"N should be >= 5. Please enter size gain: \");       //Prompt the user to enter size again if N<5\r\n    }\r\n    \r\n    printf(\"Enter the array elements:\\n\");\r\n    for(int i = 0; i<N; i++) {\r\n        printf(\"Element[%d]: \", i);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n    printf(\"Enter the indices of the two elements (0<=index1,index2<6): \");\r\n    scanf(\"%d%d\", &a, &b);\r\n\r\n    if((a<0 || a>N) || (b<0 || b>N)) {\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements (0<=index1,index2<6): \");\r\n        scanf(\"%d%d\", &a, &b);\r\n    }\r\n    int sum = 0;\r\n    sum = arr[a] + arr[b];\r\n    printf(\"The sum of the values at indices %d and %d is: %d\", a, b, sum);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n//Q2 \r\n#include <stdio.h>\r\n#include <string.h>\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    int sum =0;\r\n    for(int i = 0; i<count;i++) {\r\n        sum += marks[i];\r\n}\r\n    float calculateAverage = (float) sum/3;\r\n}\r\n\r\nvoid displayStudentData(const char names[][100], const float marks[]) {\r\n    \r\n}\r\n\r\n\r\nint main(void) {\r\n    char name1[100], name2[100], name3[100];\r\n    float marks[3];\r\n    float result;\r\n    \r\n    printf(\"Enter the name of student 1: \");\r\n    fgets(name1,100,stdin);\r\n\r\n    printf(\"Enter the mark of student 1: \");\r\n    scanf(\"%f\", &marks[0]);\r\n    getchar();\r\n    \r\n    printf(\"Enter the name of student 2: \");\r\n    fgets(name2,100,stdin);\r\n\r\n    printf(\"Enter the mark of student 2: \");\r\n    scanf(\"%f\", &marks[1]);\r\n    getchar();\r\n    \r\n    printf(\"Enter the name of student 3: \");\r\n    fgets(name3,100,stdin);\r\n    \r\n    printf(\"Enter the mark of student 3: \");\r\n    scanf(\"%f\", &marks[2]);\r\n    getchar();\r\n\r\n    result = calculateAverage(marks,3);\r\n    printf(\"Average Mark: %.2f\", result);\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int n = 0;\r\n    int bid[n];\r\n    printf(\"Enter the number of bids: \");   //Prompt the user to enter the number of bids\r\n    scanf(\"%d\", &n);\r\n\r\n    if(n<2) {\r\n        printf(\"Number of bids must be atleast 2. Please try again: \");  //Prompt the user to enter number again if <2\r\n        scanf(\"%d\", &n);\r\n    }\r\n\r\n    printf(\"Enter the bids (must be atleast $100000):\\n \");\r\n    for(int i = 0; i<n;i++) {       //Use for loop to store bidding amount in an array\r\n        printf(\"Bid %d: \", i+1);\r\n        scanf(\"%d\", &bid[i]);\r\n\r\n        if(bid[i] < 100000) {\r\n            printf(\"Error: Bid must be atleast $100000. Please try again: \");   //Give error if bidding amount is < 100000\r\n             scanf(\"%d\", &bid[i]);\r\n        }\r\n    }\r\n\r\n    for(int i = 0; i<n;i++) {\r\n        if(bid[i+1]>bid[i]) {\r\n            printf(\"The highest bid is: %d\", bid[i+1]);     //Print highest bid\r\n        }\r\n    }\r\n}\r\n\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3: he program is intended to calculate costs based on product type input, but it contains several syntax errors and logical issues that prevent it from functioning correctly."
  },
  {
    "student_id": "20713670",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int n, index1, index2;\n    int *arr;  //  it is used to store \n\n\n    // get the size of array from user\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &n);\n    } while (n < 5);\n\n    // allocate \n    arr = malloc(n * sizeof(int));  \n    if (arr == NULL) {\n        printf(\"Memory allocation failed.\\n\");\n        return 1;  // the end of program\n    }\n\n   \n    printf(\"Enter the array elements:\\n\");//get elements from user\n    for (int i = 0; i < n; i++) { //the first is Element0\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", &arr[i]);  // use arr[i] to get element\n    }\n\n    // Enter two indexes and make sure\n    do {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", n);\n        scanf(\"%d %d\", &index1, &index2);\n        if (index1 < 0 || index1 >= n || index2 < 0 || index2 >= n) {\n            printf(\"Error: Indices out of range. Try again.\\n\");\n        }\n    } while (index1 < 0 || index1 >= n || index2 < 0 || index2 >= n);\n\n    // calculate sum \n    int sum = arr[index1] + arr[index2];\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    \n    free(arr);  // Freeing allocated memory\n\n    return 0;\n}\n\n\n/* --- Q2.c --- */\n#include <stdio.h>\n\n#define NUM_STUDENTS 3\n#define NAME_LENGTH 50\nfloat calculateaverage(const float marks[], int count);\nvoid displaystudentdata(const char names[][NAME_LENGTH], const float marks[]);// Function prototypes\n\nint main() {\n    char names[NUM_STUDENTS][NAME_LENGTH];\n    float marks[NUM_STUDENTS];\n    \n    \n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);// get name from user\n        scanf(\" %s\", names[i]);  //read name\n        printf(\"Enter the mark of student %d: \", i + 1);//get mark from user\n        scanf(\"%f\", &marks[i]);//read marks\n    }\n\n    // the average mark of studnets\n    float average = calculateaverage(marks, NUM_STUDENTS);\n\n    // tell user student data and average mark\n    displaystudentdata(names, marks);\n    printf(\"Average Mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n// the structure of function \nfloat calculateaverage(const float marks[], int count) {\n    float sum = 0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;//in the end we can get the value of sum/count\n}\n\n// Function to display student names and marks\nvoid displaystudentdata(const char names[][NAME_LENGTH], const float marks[]) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);//do it ,we can get names and marks  \n    }\n}\n\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main() {\n    int n;\n\n  \n    printf(\"Enter the number of bids: \");// Get the number of bids\n    scanf(\"%d\", &n);\n    while (n < 2) {\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\n        scanf(\"%d\", &n);\n    }\n    \n    int bids[n];\n    printf(\"Enter the bids (must be at least $100000):\\n\");// array to store bids\n\n    // make sure the bids \n    for (int i = 0; i < n; i++) {\n        printf(\"Bid %d: \", i + 1);\n        scanf(\"%d\", &bids[i]);\n        while (bids[i] < 100000) {\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\n            scanf(\"%d\", &bids[i]);\n        }\n    }\n\n    // find the highest bid\n    int highest = bids[0];\n    for (int i = 1; i < n; i++) {\n        if (bids[i] > highest) {\n            highest = bids[i];\n        }\n    }\n\n    // this is the highest bid\n    printf(\"The highest bid is: $%d\\n\", highest);\n\n    return 0;\n}\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print a grid of asterisks based on the user input. However, it does not print a new line after each row, which is necessary to form a proper grid. q2:The program correctly reads three integers and computes their sum, average, and product. However, there are issues with the logic used to determine the smallest and largest numbers.  the logic for finding the smallest and largest integers is flawed. The conditional checks do not correctly handle comparisons."
  },
  {
    "student_id": "20705519",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main () {\n    int N = 0;\n    int *myArr = malloc(N * sizeof(int));\n    int index1, index2;\n\n    printf(\"Enter the size of array (N >= 5): \");\n    scanf(\"%d\", &N);\n    getchar();\n    while (N < 5) {\n        printf(\"\\nError: Size of array must be at least 5. Please try again: \");\n        scanf(\"%d\", &N);\n        getchar();\n    }\n\n    printf(\"Enter the array elements: \");\n    for (int i = 0; i < N; i++) {\n        printf(\"\\nElement %d: \", i);\n        scanf(\"%d\", &myArr[i]);\n    }\n\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n    scanf(\"%d %d\", &index1, &index2);\n    while ((index1 < 0 || index2 < 0) || (index1 > N -1 || index2 > N -1)) {\n        printf(\"\\nError: Indices must be within the range of the array elements. Please try again: \");\n        printf(\"\\nEnter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n    }\n\n    int sum = myArr[index1] + myArr[index2];\n    printf(\"\\nThe sum of the values at the indices %d and %d is: %d\", index1, index2, sum);\n\n    free(myArr);\n\n    return 0;\n}\n/* --- Q2.c --- */\n#include <stdio.h>\n#include <string.h>\n\n#define NAME_LENGTH 50\n\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]); // NAME_LENGTH 50 \n\nint main () {\n    char names[3][NAME_LENGTH];\n    float marks[3];\n\n    for (int i = 0; i < 3; i++) {\n        printf(\"Enter the name of student %d: \", i+1);\n        fgets(names[i], NAME_LENGTH, stdin);\n        names[i][strcspn(names[i], \"\\n\")] = 0;\n\n        printf(\"Enter the mark of student %d: \", i+1);\n        scanf(\"%f\", &marks[i]);\n        getchar();\n    }\n\n    displayStudentData(names, marks);\n\n    printf(\"\\nAverage Mark: %.2f\", calculateAverage(marks, 3));\n\n    return 0;\n}\n\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < 3; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n} \n\nfloat calculateAverage(const float marks[], int count) {\n    float average = 0;\n    for (int i = 0; i < count; i++) {\n        average += marks[i];\n    }\n    average /= 3;\n\n    return average;\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main () {\n    int bid_number = 0;\n    int *bid_amount = malloc(bid_number * sizeof(int));\n    int highest_bid;\n\n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &bid_number);\n    getchar();\n    while (bid_number < 2) {\n        printf(\"\\nError: Number of bids must be at least 2. Please try again: \");\n        scanf(\"%d\", &bid_number);\n        getchar();\n    }\n\n    printf(\"\\nEnter the bids (must be at least $100,000): \");\n    for (int i = 0; i < bid_number; i++) {\n        printf(\"\\nBid %d: \", i+1);\n        scanf(\"%d\", &bid_amount[i]);\n        getchar();\n        while (bid_amount[i] < 100000) {\n            printf(\"\\nError: bids must be at least $100,000. Please try again: \");\n            scanf(\"%d\", &bid_amount[i]);\n            getchar();\n        }\n    }\n\n    for (int i = 0; i < bid_number; i++) {\n        if (highest_bid < bid_amount[i]) {\n            highest_bid = bid_amount[i];\n        }\n    }\n\n    printf(\"\\nThe highest bid is: $%d\", highest_bid);\n\n    free(bid_amount);\n    return 0;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs."
  },
  {
    "student_id": "20619473",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h> // Include standard input/output library\r\n#include <stdlib.h> // Memory library\r\n\r\nint main() {\r\n    int N; // Array\r\n    int *arr; // Pointer \r\n    int index1, index2; // Variables to store the two indices\r\n    int sum; // Variable to store the sum\r\n\r\n    // Prompts the user to enter the size of the array\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n\r\n        if (N < 5) {\r\n            printf(\"Size must at least be 5. Please try again.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // Memory for the array\r\n    arr = (int *)malloc(N * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed. Exiting program.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Prompts the user to enter the elements of the array\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (arr + i)); // Pointer arithmetic to store values\r\n    }\r\n\r\n    // Prompt the user to enter the indices\r\n    while (1) {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        // Validation\r\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n            break; // Exit loop if valid\r\n        } else {\r\n            printf(\"Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    }\r\n\r\n    // Calculate the sum using pointer arithmetic\r\n    sum = *(arr + index1) + *(arr + index2);\r\n\r\n    // Display the sum\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free memory\r\n    free(arr);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h> // Include standard input/output library\r\n#include <string.h>\r\n#include <ctype.h> // For isalpha()\r\n\r\n#define MAX_STUDENTS 3\r\n#define MAX_NAME_LENGTH 100\r\n\r\n// Validate names\r\nint validateName(const char *name) {\r\n    if (strlen(name) == 0) return 0; // Name can't be empty\r\n    for (int i = 0; i < strlen(name); i++) {\r\n        if (!isalpha(name[i]) && name[i] != ' ') return 0; // Alphabetical characters only\r\n    }\r\n    return 1;\r\n}\r\n\r\n// Calculate the average marks\r\nfloat calculateAverage(float marks[], int size) {\r\n    float sum = 0;\r\n    for (int i = 0; i < size; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / size;\r\n}\r\n\r\nint main() {\r\n    char studentNames[MAX_STUDENTS][MAX_NAME_LENGTH];\r\n    float studentMarks[MAX_STUDENTS];\r\n    float averageMark;\r\n\r\n    for (int i = 0; i < MAX_STUDENTS; i++) {\r\n        // Input and validate name\r\n        while (1) {\r\n            printf(\"Enter the name of student %d: \", i + 1);\r\n            fgets(studentNames[i], MAX_NAME_LENGTH, stdin);\r\n\r\n            // Remove trailing newline from fgets\r\n            studentNames[i][strcspn(studentNames[i], \"\\n\")] = '\\0';\r\n\r\n            if (validateName(studentNames[i])) {\r\n                break;\r\n            } else {\r\n                printf(\"Invalid name. Please enter alphabetic characters only.\\n\");\r\n            }\r\n        }\r\n\r\n        // Input and validate marks\r\n        while (1) {\r\n            printf(\"Enter the mark of student %d: \", i + 1);\r\n            if (scanf(\"%f\", &studentMarks[i]) == 1 && studentMarks[i] >= 0) {\r\n                break;\r\n            } else {\r\n                printf(\"Invalid mark. Please enter a non-negative number.\\n\");\r\n                while (getchar() != '\\n'); // Clear input buffer\r\n            }\r\n        }\r\n        while (getchar() != '\\n'); // Clear input buffer\r\n    }\r\n\r\n    // Display student names and marks\r\n    printf(\"\\nStudent names and marks:\\n\");\r\n    for (int i = 0; i < MAX_STUDENTS; i++) {\r\n        printf(\"%s: %.2f\\n\", studentNames[i], studentMarks[i]);\r\n    }\r\n\r\n    // Calculate and display average mark\r\n    averageMark = calculateAverage(studentMarks, MAX_STUDENTS);\r\n    printf(\"\\nAverage mark: %.2f\\n\", averageMark);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MIN_BID 100000 // Minimum bid amount for validation\r\n\r\nint main() {\r\n    int numBids; // Number of bids\r\n    float bids[15]; // Array to store the bids (assuming a max of 15 bids)\r\n    float highestBid; // Variable to track the highest bid\r\n\r\n    // Input and validate number of bids\r\n    while (1) {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &numBids);\r\n\r\n        if (numBids >= 2) {\r\n            break; // Valid input\r\n        } else {\r\n            printf(\"Number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n    }\r\n\r\n    // Input and validate bid amount $\r\n    for (int i = 0; i < numBids; i++) {\r\n        while (1) {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%f\", &bids[i]);\r\n\r\n            if (bids[i] >= MIN_BID) {\r\n                break; // Valid bid\r\n            } else {\r\n                printf(\"Bid must be at least $%d. Please try again:\\n\", MIN_BID);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine the highest bid\r\n    highestBid = bids[0]; // Assume the first bid is the highest initially\r\n    for (int i = 1; i < numBids; i++) { \r\n        if (bids[i] > highestBid) { //Rearrangement\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Display the highest bid\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20715999",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nvoid clear_buffer(void) {\n    while (getchar() != '\\n'); // Flush the input buffer\n}\n\nvoid standard_input(char input[], size_t size) {\n    fgets(input, size, stdin); // Directly read into the passed array\n    if (!strchr(input, '\\n')) { // Check if the newline was not present (overflow occurred)\n        clear_buffer(); // Clear the buffer\n    } else {\n        input[strcspn(input, \"\\n\")] = '\\0'; // Remove newline character if present\n    }\n}\n\nint is_digit(char input[]){\n    for(int i = 0; i < strlen(input); i++){\n        if(!isdigit(input[i])) {\n            puts(\"Invalid input. Input must only contain digits.\");\n            return 0; // Test failed\n        }\n    }\n    return 1; // Test pass\n}\n\nint main(void){\n    char input[10] = \"\\0\";\n    int N = 0;\n    int arr[] = {0}; \n    int *arrPtr = arr;\n    arrPtr = malloc(100*sizeof(int));\n    int index1 = 0;\n    int index2 = 0;\n    int sum = 0;\n    \n    do {\n        printf(\"Enter the size of the array (N>= 5): \");\n        standard_input(input, sizeof(input)); // Get input\n        N = atoi(input); // Convert string to int\n    } while (N < 5);\n\n    printf(\"%d\\n\", N);\n\n    for (int i = 0; i < N;) { // Code is not functioning here, please tell me why\n        printf(\"Element %d: \", i);\n        standard_input(input, sizeof(input));\n        if (!is_digit(input)) continue; // Get input again if not a number\n        *(arr + i) = atoi(input); // Convert string to int\n        i++; \n    }\n\n    while (1) {\n        printf(\"Enter the indices of two elements (0 <= index1, index2 < %d)\\n\", N);\n        // Get index1\n        printf(\"enter index1: \");\n        standard_input(input, sizeof(input));\n        if (!is_digit(input)) continue; // Get input again if not a number\n        index1 = atoi(input); // Convert string to int\n        \n        // Get index2\n        printf(\"enter index2: \");\n        standard_input(input, sizeof(input));\n        if (!is_digit(input)) continue; // Get input again if not a number\n        index2 = atoi(input); // Convert string to int\n        \n        // Validate index1 and index2\n        if (index1 < 0 || index2 >= N ){\n            puts(\"Error, indices must be within the range of the array elements. Please try again\");\n            continue; // Get input again\n        }\n        break;\n    }\n    \n    // Get sum\n    sum += *(arrPtr + index1);\n    sum += *(arrPtr + index2);\n\n    printf(\"The sum of values at the two indices %d and %d are %d\", index1, index2, sum);\n    \n    free(arrPtr); // Free memory\n}\n/* --- q2.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#define NAME_LENGTH 50\n\nvoid clear_buffer(void) {\n    while (getchar() != '\\n'); // Flush the input buffer\n}\n\nvoid standard_input(char input[], size_t size) {\n    fgets(input, size, stdin); // Directly read into the passed array\n    if (!strchr(input, '\\n')) { // Check if the newline was not present (overflow occurred)\n        clear_buffer(); // Clear the buffer\n    } else {\n        input[strcspn(input, \"\\n\")] = '\\0'; // Remove newline character if present\n    }\n}\n\nint is_digit(char input[]){\n    for(int i = 0; i < strlen(input); i++){\n        if(!isdigit(input[i])) {\n            puts(\"Invalid input. Input must only contain digits.\");\n            return 0; // Test failed\n        }\n    }\n    return 1; // Test pass\n}\n\nint is_alpha(char input[]){\n    for(int i = 0; i < strlen(input); i++){\n        if(!isalpha(input[i])) {\n            puts(\"Invalid input. Input must only contain alphabets.\");\n            return 0; // Test failed\n        }\n    }\n    return 1; // Test pass\n}\n\nfloat calculateAverage(const float marks[], int count){\n    float average = 0;\n    for (int i = 0; i < count; i++) {\n        average += *(marks + i); // Sum total\n    }\n    average /= count; // Divide by count\n    return average;\n}\n\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    puts(\"Students names and marks:\");\n    for(int i = 0; i < 3; i++) {\n        printf(\"%s: %f\\n\", names[i], marks[i]);\n    }\n}\n\nint main(void) {\n    char input[50] = \"\\0\";\n    float marks[3] = {0};\n    char names[3][NAME_LENGTH] = {0};\n    for (int i = 0; i < 3;){\n        while(1) {\n            printf(\"Enter the name of student %d: \", i+1);\n            standard_input(input, sizeof(input));\n            if(!is_alpha(input)) continue; // Get input again\n            strcpy(names[i], input); // Copy input into name\n            break;\n        }\n        while(1){\n            printf(\"Enter the marks of student %d: \", i+1);\n            standard_input(input, sizeof(input));\n            if(!is_digit(input)) continue; // Get input again\n            marks[i] = atoi(input); // Convert string to int\n            if (marks[i] > 100) {\n                printf(\"Marks must be between 0-100\");\n                continue;\n            }\n            break;\n        }\n        i++; // Get next student\n    }\n\n    displayStudentData(names, marks);\n\n    float average_mark = calculateAverage(marks, 3);\n\n    printf(\"Average mark: %f\", average_mark);\n}\n/* --- q3.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#define NAME_LENGTH 50\n\nvoid clear_buffer(void) {\n    while (getchar() != '\\n'); // Flush the input buffer\n}\n\nvoid standard_input(char input[], size_t size) {\n    fgets(input, size, stdin); // Directly read into the passed array\n    if (!strchr(input, '\\n')) { // Check if the newline was not present (overflow occurred)\n        clear_buffer(); // Clear the buffer\n    } else {\n        input[strcspn(input, \"\\n\")] = '\\0'; // Remove newline character if present\n    }\n}\n\nint is_digit(char input[]){\n    for(int i = 0; i < strlen(input); i++){\n        if(!isdigit(input[i])) {\n            puts(\"Invalid input. Input must only contain digits.\");\n            return 0; // Test failed\n        }\n    }\n    return 1; // Test pass\n}\n\nint main(void){\n    char input[50] = \"\\0\";\n    long bids[50] = {0};\n    int N = 0;\n    long highest_bid = 0;\n\n    do {\n        printf(\"Enter number of bids N (N >= 2): \");\n        standard_input(input, sizeof(input)); // Get input\n        if (!is_digit(input)) continue; // Get input again\n        N = atoi(input); // Convert string to int\n        if (N < 2) puts(\"The highest bid can not be determined\");\n    } while (N < 2);\n\n    for (int i = 0; i < N;) {\n        printf(\"Bid %d: $\", i + 1);\n        standard_input(input, sizeof(input));\n        if (!is_digit(input)) continue; // Get input again if not a number\n        bids[i] = atol(input); // Convert string to long\n        if (bids[i] < 100000) {\n            puts(\"Each bid must be at least $100,000\");\n            continue; // Get input again\n        }\n        i++; // Get next bid\n    }\n\n    for (int j = 0; j < N; j++) {\n        if (bids[j] > highest_bid) highest_bid = bids[j]; // Update highest bid through the array of bids\n    }\n\n    printf(\"The highest bid is %ld\", highest_bid);\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20724220",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n    int* arr;\r\n    int index1, index2;\r\n\r\n    // Prompt user to enter the size of the array\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf_s(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Invalid input. Please enter again.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // Memory allocates dynamically using malloc()\r\n    arr = (int*)malloc(N * sizeof(int));\r\n\r\n    // checking for memory allocation\r\n    if (arr == NULL) {\r\n        printf(\"Memory not allocated.\\n\");\r\n    }\r\n    else {\r\n        // Prompt the user to enter array elements\r\n        printf(\"Enter %d elements for the array:\\n\", N);\r\n        for (int i = 0; i < N; i++) {\r\n            printf(\"Element %d: \", i);\r\n            scanf_s(\"%d\", &arr[i]);\r\n        }\r\n\r\n        // Prompt the user to enter two indices\r\n        do {\r\n            printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n            scanf_s(\"%d %d\", &index1, &index2);\r\n            if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) { // check if it is a valid indices\r\n                printf(\"Error: Indices must be in the range of the array elements. Please try again.\\n\");\r\n            }\r\n        } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n        // Calculate the sum\r\n        int sum = *(arr + index1) + *(arr + index2);\r\n\r\n        // Print the sum\r\n        printf(\"The sum of the elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n    }\r\n\r\n    free(arr);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NUM_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\n// function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]); // NAME_LENGTH 50\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_STUDENTS];\r\n\r\n    // Input student names and marks\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Enter name of student %d: \", i + 1);\r\n        scanf_s(\" %[^\\n]\", names[i], NAME_LENGTH); \r\n        printf(\"Enter marks of student %d: \", i + 1);\r\n        scanf_s(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // Calculate average\r\n    float average = calculateAverage(marks, NUM_STUDENTS);\r\n\r\n    // Display student names and marks\r\n    printf(\"\\nStudents Names and Marks:\\n\");\r\n    displayStudentData(names, marks);\r\n\r\n    // Display average mark\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to calculate average\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n\r\n    // calculate sum of the marks of students\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n\r\n    // Calculate and return the average\r\n    return sum / count;\r\n}\r\n\r\n// Function to display students names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n    float* bids; \r\n    float highest_bid = 0.0;\r\n\r\n    // Prompt the user to enter the number of bids\r\n    do {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf_s(\"%d\", &N);\r\n        if (N < 2) {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n    } while (N < 2);\r\n\r\n    // Memory allocates dynamically using malloc()\r\n    bids = (float*)malloc(N * sizeof(float));\r\n\r\n    // checking for memory allocation\r\n    if (bids == NULL) {\r\n        printf(\"Memory not allocated.\\n\");\r\n    }\r\n\r\n    else {\r\n        // Prompt the user to enter the values of the bids\r\n        printf(\"Enter the bids (must be at least $100000):\\n\");\r\n        for (int i = 0; i < N; i++) {\r\n            do {\r\n                printf(\"Bid %d: \", i + 1);\r\n                scanf_s(\"%f\", &bids[i]);\r\n                if (bids[i] < 100000) { // check if value of bit is more than $100000\r\n                    printf(\"Error: Each bid must be at least $100000. Please try again:\\n\");\r\n                    scanf_s(\"%f\", &bids[i]);\r\n                }\r\n            } while (bids[i] < 100000);\r\n        }\r\n\r\n        // Determine the highest bid\r\n        highest_bid = bids[0];\r\n        for (int i = 1; i < N; i++) {\r\n            if (bids[i] > highest_bid) {\r\n                highest_bid = bids[i];\r\n            }\r\n        }\r\n\r\n        // print the highest bid\r\n        printf(\"\\nThe highest bid is: $%.0f\\n\", highest_bid);\r\n    }\r\n\r\n    free(bids);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly calculates and displays the sum, average, product, smallest, and largest of three numbers input by the user. The current logic for determining the smallest and largest values is not comprehensive. It can lead to incorrect results because it does not compare all three integers correctly. q3:The program calculates the total cost of grocery items based on user input and applies a discount if provided."
  },
  {
    "student_id": "20607094",
    "code": "",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20718606",
    "code": "\n/* --- task1.c --- */\n#include <stdio.h>\n#include <stdlib.h> //for malloc\n\nint main() {\n\n    //1) Prompt the user to enter the size N of the array. Validate if N ≥ 5.\n    int N;\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N); //while N is less than 5 it will keep asking \n    } while (N < 5);\n\n    //2) Dynamically allocate memory for the array using pointers.\n    int *array = malloc(N * sizeof(int)); //allocating memory for the array using malloc. Malloc is a function that returns a pointer to the allocated memory. \n\n    //3) Prompt the user to enter each element of the array one by one.\n    printf(\"Enter the elements of the array:\\n\");\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &array[i]);\n    }\n\n    //4) Prompt the user to enter the two indices (positions) of the array elements of their choice. Validate if the indices are within the range of the array elements 0 <= index1, index2 < N). Prompt the user for input again until the indices entered are valid.\n    int index1, index2;\n    do {\n        printf(\"Enter the first index: \");\n        scanf(\"%d\", &index1);\n        printf(\"Enter the second index: \");\n        scanf(\"%d\", &index2);\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N); //index1 >= N || index2 >= N will check if the index is greater than or equal to the size of the array\n\n    //5) Use a pointer-based approach to find the sum of the values of the two array elements.\n    int sum = array[index1] + array[index2];\n\n    //6) Print the output for the sum.\n    printf(\"The sum of the values of the two array elements is: %d\", sum);\n\n    return 0;\n}\n/* --- task2.c --- */\n#include <stdio.h>\n\n//calculate average function:\nfloat calculateAverage(const float marks[], int size) {\n    float sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += marks[i]; //sum up the values \n    }\n    return sum / size; //divide the sum by the size to get the avaerage \n}\n\n// display student data function:\nvoid displayStudentData(const char names[][50], const float marks[]) {\n    printf(\"\\nNames and marks of students:\\n\");\n    for (int i = 0; i < 3; i++) { //there are only ever 3 entries to we use i < 3\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);//will print \"student name:\" and the mark \n    }\n}\n\nint main() {\n\n    //1) Prompt the user to enter the values of the three student names and marks one by one:\n    char names[3][50];\n    float marks[3];\n\n    for (int i = 0; i < 3; i++)\n    {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    //2) calculate average mark, using function:\n    float average = calculateAverage(marks, 3); //function call \n\n    //3) Display student names and marks and the average mark, using function:\n    displayStudentData(names, marks); //function call\n    \n    printf(\"\\nAverage mark: %.2f\", average);\n\n    return 0;\n}\n/* --- task3.c --- */\n#include <stdio.h>\n\nint main() {\n\n    //1) The user should be able to enter the number of bids (N). Perform validation that N ≥ 2. If there are fewer than two valid bids, the program should display an appropriate message indicating that a highest bid cannot be determined.\n    int N;\n    do {\n        printf(\"Enter the number of bids (N >= 2): \"); //so long as N is less than 2 it will ask for appropriate number of bids \n        scanf(\"%d\", &N);\n    } while (N < 2);\n\n    //2) The user should then enter the values of the N bid one by one. Perform validation of user inputs to ensure each bid is at least $100,000.\n    int bids[N];\n    for (int i = 0; i < N; i++) {\n        do {\n            printf(\"Enter the value of bid %d: \", i + 1); //we need the bids to be of the amount specific by N \n            scanf(\"%d\", &bids[i]);\n        } while (bids[i] < 100000); //cheeck bids are greater than 100,000 if not then run the looop and ask again\n    }\n\n    //3) The program will determine the highest bid from the entered values.\n    int highestBid = bids[0];\n    for (int i = 1; i < N; i++) {\n        if (bids[i] > highestBid) { //if the current bid > the original bid then that is the new highest bid \n            highestBid = bids[i];\n        }\n    }\n\n    //4) The program should output the value of the highest bid.\n    printf(\"The highest bid is: $%d\\n\", highestBid);\n\n    return 0;\n}",
    "feedback": "q1: The code is logically sound and effectively implements the required functionality; q2: The code accurately performs calculations but could be streamlined and improved for clarity. q3: The code effectively calculates costs and applies discounts, demonstrating a solid understanding of control structures."
  },
  {
    "student_id": "20590948",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *arr = NULL; // Dynamic memory handle\n    int N;           // Specify the number of elements in the array\n    int index1, index2; // Input the indices of the elements to calculate the sum\n\n\n    // Step 1: Prompt user to enter the array size and ensure it is valid\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"Invalid size! Please enter a value greater than or equal to 5.\\n\");\n        }\n    } while (N < 5);\n\n    // Step 2: Allocate memory for the array dynamically \n    arr = (int *)malloc(N * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1; // Terminate the program if memory allocation fails \n    }\n\n    // Step 3: Request the user to input elements of the array\n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (arr + i)); // Access elements using pointer arithmetic\n    }\n\n    // Step 4: Ask the user for indices and ensure they are valid \n    do {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n\n        // Validate indices\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\n\n    // Step 5:  Calculate the sum using pointers to access elements\n    int sum = *(arr + index1) + *(arr + index2);\n\n    // Step 6: Print the result\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    // Free the allocated memory block\n    free(arr);\n\n    return 0;\n}\n\n/* --- Q2.c --- */\n#include <stdio.h>\n\n#define NAME_LENGTH 50\n#define STUDENT_COUNT 3\n\n// List the function prototypes\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\n\nint main() {\n    char names[STUDENT_COUNT][NAME_LENGTH];\n    float marks[STUDENT_COUNT];\n\n    // Request user input for names and marks of three students\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]); // Read full name with spaces\n        printf(\"Enter the marks of %s: \", names[i]);\n        scanf(\"%f\", &marks[i]); // Accept marks as input \n    }\n\n    // Compute the average of the marks \n    float average = calculateAverage(marks, STUDENT_COUNT);\n\n    // Display student data and the computer average \n    displayStudentData(names, marks, STUDENT_COUNT);\n    printf(\"Average marks: %.2f\\n\", average);\n\n    return 0;\n}\n\n// Function to find the average of the given marks \nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n// Create a function to display names, marks, and the average\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\n    printf(\"\\nStudent Data:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"Student %d: %s - Marks: %.2f\\n\", i + 1, names[i], marks[i]);\n    }\n}\n\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main() {\n    int N; // Number of bids\n    float bids[100]; // Array to ensure that the bids are stored (a max of 100 bids for simplicity)\n    float highestBid = 0.0; // The highest bid is to be stored\n\n    // Step 1: Ask user to enter the number of bids and ensure that is valid \n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &N);\n\n    while (N < 2) {\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\n        scanf(\"%d\", &N);\n    }\n\n    // Step 2: Input the bids and make sure each bid is valid\n    printf(\"Enter the bids (must be at least $100000):\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Bid %d: \", i + 1);\n        scanf(\"%f\", &bids[i]);\n\n        while (bids[i] < 100000) {\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\n            printf(\"Bid %d: \", i + 1); // Ask user to reprompt for the same bid\n            scanf(\"%f\", &bids[i]);\n        }\n    }\n\n    // Step 3: Decide the highest bid\n    highestBid = bids[0];\n    for (int i = 1; i < N; i++) {\n        if (bids[i] > highestBid) {\n            highestBid = bids[i];\n        }\n    }\n\n    // Step 4: Display output of the highest bid\n    printf(\"The highest bid is: $%.0f\\n\", highestBid);\n\n    return 0;\n}\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20612400",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main () {\r\n\r\n    int arrSize = 0;\r\n    int index1, index2 = 0;\r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\" %d\", &arrSize);\r\n\r\n    int* arr = malloc(arrSize * sizeof(int));\r\n\r\n    for (int i = 0; i < arrSize; i++) {\r\n        printf(\"Enter element %d: \", i);\r\n        scanf(\" %d\", arr + i);\r\n    }\r\n\r\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", arrSize);\r\n    scanf(\" %d %d\", &index1, &index2);\r\n\r\n    //Ensures the indexes are within the range of the array\r\n    while ( !(index1 >= 0 && index1 < arrSize)  || !(index2 >= 0 && index2 < arrSize) ) {\r\n        printf(\"Error: Indices must be within range of the array elements. Please try again.\\n\");\r\n\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", arrSize);\r\n        scanf(\" %d %d\", &index1, &index2);\r\n    }\r\n\r\n    int sum = *(arr + index1) + *(arr + index2);\r\n    printf(\"The sum of values at index %d and %d is: %d\", index1, index2, sum);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() {\r\n\r\n    char names[3][NAME_LENGTH] = {};\r\n    float marks[3] = {};\r\n\r\n    for (size_t i = 0; i < 3; i++) {\r\n        printf(\"Enter student number %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", &names[i]);\r\n\r\n        printf(\"Enter mark of student %d: \", i + 1);\r\n        scanf(\" %f\", &marks[i]);\r\n    }\r\n    \r\n    printf(\"\\nStudent names and marks:\\n\");\r\n    displayStudentData(names, marks);\r\n\r\n    float avg = calculateAverage(marks, 3);\r\n\r\n    printf(\"\\nAverage Mark: %.2f\", avg);\r\n\r\n    return 0;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n\r\n    for (size_t i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    \r\n    return sum/count;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n\r\n    int bidsCount = 0;\r\n    int* bids = malloc(bidsCount * sizeof(int));\r\n    \r\n    int max = 0;\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &bidsCount);\r\n    \r\n    while(bidsCount < 2) {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &bidsCount);\r\n    }\r\n\r\n    printf(\"Enter the bids (must be at least $100,000):\\n\");\r\n\r\n    for (int i = 0; i < bidsCount; i++) {\r\n\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%d\", (bids + i));\r\n\r\n        while(*(bids + i) < 100000) {\r\n            \r\n            printf(\"Error: Bid must be at least $100,000. Please try again: \");\r\n            scanf(\"%d\", (bids + i));\r\n        }\r\n    }\r\n\r\n\r\n    for (int i = 0; i < bidsCount; i++) {\r\n        if (max < bids[i]) {\r\n            max = bids[i];\r\n        }\r\n    }\r\n    \r\n    printf(\"The highest bid is: %d\", max);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program is intended to print a grid of asterisks based on user-defined rows and columns. However, the nested loop implementation has the loop control variables incorrectly defined, which results in an incorrect output. The outer loop should iterate over rows, and the inner loop should iterate over columns. q2:The program effectively prompts the user for three integers and calculates their sum, average, product, smallest, and largest values. The logic is sound, and the expected output is achieved correctly. q3:The program is structured to handle user input for different product types, calculate total costs based on weights or quantities, and apply discounts correctly.The discount check could be made clearer. Instead of checking if discount != 0, you might want to explicitly check if the discount is greater than zero"
  },
  {
    "student_id": "20618300",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() \r\n{\r\n    int number, index1, index2, *array;\r\n\r\n    // Ask user to enter the size of the array\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &number);\r\n\r\n    // Fix that number >= 5\r\n    while (number < 5) \r\n    {\r\n        printf(\"Size must be at least 5. Please try again: \");\r\n        scanf(\"%d\", &number);\r\n    }\r\n\r\n    // Allocate memory for the array based on the user input\r\n    array = (int *)malloc(number * sizeof(int));\r\n    if (array == NULL) \r\n    {\r\n        printf(\"Memory allocation failed. Exiting program.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Ask the user to enter the elements of the array\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < number; i++) \r\n    {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]); \r\n    }\r\n\r\n    // Use while True to keep asking the user to enter two valid elements based on the requirement\r\n    while (1) \r\n    {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", number);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        // Check if the the range is valid\r\n        if (index1 >= 0 && index1 < number && index2 >= 0 && index2 < number) \r\n        {\r\n            break; \r\n        } \r\n        else \r\n        {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    }\r\n\r\n    // Sum of the two elements\r\n    int sum = array[index1] + array[index2];\r\n\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free the allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n// Set the total length of name and total number of student required\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\n// Function to calculate the average marks\r\nfloat calculateAverage(const float marks[], int count) \r\n{\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) \r\n    {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to show the student names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) \r\n{\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < count; i++) \r\n    {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\n// Function to clear the input buffer\r\nvoid clearInputBuffer() \r\n{\r\n    int c;\r\n    while ((c = getchar()) != '\\n' && c != EOF);\r\n}\r\n\r\nint main() \r\n{\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n\r\n    // Ask user to enter student names and marks\r\n    for (int i = 0; i < STUDENT_COUNT; i++) \r\n    {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        fgets(names[i], sizeof(names[i]), stdin);\r\n\r\n        // Remove the trailing newline from fgets\r\n        // search '\\n' in names[i] then change it to null '\\0'\r\n        names[i][strcspn(names[i], \"\\n\")] = '\\0';\r\n\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n        // Remove the input buffer from scanf since '\\n' will be left in the buffer\r\n        clearInputBuffer(); \r\n    }\r\n\r\n    float averageMark = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", averageMark);\r\n\r\n    return 0;\r\n}\r\n\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n// Function to get bids from the user\r\nvoid getBids(int bids[], int count) \r\n{\r\n    for (int i = 0; i < count; i++) \r\n    {\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%d\", &bids[i]);\r\n\r\n        // Validation of each bid must at least $100000\r\n        while (bids[i] < 100000) \r\n        {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &bids[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// Function to search for the highest bid\r\nint getHighestBid(const int bids[], int count) \r\n{\r\n    int highest = bids[0];\r\n    // No need to compare with itself\r\n    for (int i = 1; i < count; i++) \r\n    {\r\n        if (bids[i] > highest) {\r\n            highest = bids[i];\r\n        }\r\n    }\r\n    return highest;\r\n}\r\n\r\nint main() \r\n{\r\n    int numberOfBids;\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &numberOfBids);\r\n\r\n    while (numberOfBids < 2) \r\n    {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &numberOfBids);\r\n    }\r\n\r\n    // To set the size of arrays based on the total number of bids of user enter \r\n    int bids[numberOfBids];\r\n\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    getBids(bids, numberOfBids);\r\n\r\n    int highestBid = getHighestBid(bids, numberOfBids);\r\n\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20609983",
    "code": "",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print the grid of asterisks. However, the inner loop starts from 1, resulting in one fewer asterisk printed in each row than specified by the user. It should start at 0 to ensure the correct number of asterisks is printed. q2:The program correctly prompts the user for three floats (though it should be integers as per the original requirement) and calculates the sum, average, product, smallest, and largest values.The implementation meets most of the requirements and produces the expected output. However, the average calculation could benefit from using 3.0 instead of 3 to ensure floating-point division q3:The program correctly implements a menu system to handle different product types and calculates total and final costs based on user input.The cost calculation is repeated for each case. You could consider creating a function to handle the cost calculation logic to avoid code duplication and improve readability."
  },
  {
    "student_id": "20713555",
    "code": "\n/* --- q1.c/main.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{   \n    // Introduce the element\n    int N;\n    int *array;\n    int index1, index2;\n    int sum;\n\n    // Prompt user for the size of the array\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"Invalid size. Please enter a value greater than or equal to 5.\\n\");\n        }\n    } while (N < 5);\n\n\n    // Allocate memory for the array\n    array = (int *)malloc(N * sizeof(int));\n    if (array == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1; // Exit if memory allocation fails\n    }\n    \n    // Prompt user to enter each element of the array\n    printf(\"Enter %d elements of the array:\\n\", N);\n    for (int i = 0; i < N; i++) {\n        printf(\"Element [%d]: \", i);\n        scanf(\"%d\", &array[i]);\n    }\n\n    // Prompt user to enter two valid indices\n    do {\n        printf(\"Enter two indices (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n        \n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\n            printf(\"Invalid indices. Please enter valid indices within range.\\n\");\n        }\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\n\n    // Use pointers to find the sum of the values of the two array elements\n    int *ptr1 = &array[index1];\n    int *ptr2 = &array[index2];\n    \n    sum = *ptr1 + *ptr2;\n\n    // Print the output for the sum\n    printf(\"The sum of elements at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    // Free allocated memory\n    free(array);\n    \n    return 0;\n}\n\n\n\n\n/* --- q2.c/main.c --- */\n#include <stdio.h>\n#define NUM_STUDENTS 3\n#define NAME_LENGTH 50\n\n// Function prototypes\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]); \n\nint main()\n{\n    // define the element \n    char names[NUM_STUDENTS][NAME_LENGTH];\n    float marks[NUM_STUDENTS];\n    \n    // Prompt user to enter the student names and marks\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        // Student's name\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);\n\n        // Student's mark\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    // calculate average marks\n    float average = calculateAverage(marks, NUM_STUDENTS);\n\n    // display students data\n    printf(\"\\nStudent Names and Marks:\\n\");\n    displayStudentData(names, marks);   \n\n    // display average mark of students\n    printf(\"\\nAverage Mark: %.2f\\n \", average);\n\n    return 0;\n}\n\n\n// Function to calculate the average mark\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n// Function to display student names and marks\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n/* --- q3.c/main.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MIN_BID 100000 // Minimum valid bid\n#define MAX_BIDS 100   // Maximum number of bids allowed\n\n// Function prototypes\nint getNumberOfBids();\nvoid getBids(int N, float *bids);\nfloat findHighestBid(int N, float *bids);\n\nint main() {\n    // Introduce the element \n    int N; \n    float bids[MAX_BIDS];\n\n    // Prompt the user to enter the number of bids\n    N = getNumberOfBids();\n\n    // Prompt the user to enter the value of bids\n    getBids(N, bids);\n\n    // Determine the highest value of bid\n    float highestBid = findHighestBid(N, bids);\n\n    // Output the value of the highest bid\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\n\n    return 0;\n}\n\n// Function to get the number of bids from the user\nint getNumberOfBids() {\n    int N;\n    do {\n        printf(\"Enter the number of bids (N >= 2): \");\n        scanf(\"%d\", &N);\n        if (N < 2) {\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\n        }\n    } while (N < 2);\n    \n    return N;\n}\n\n// Function to get valid bids from the user\nvoid getBids(int N, float *bids) {\n    printf(\"Enter the bids (must be at least $%d):\\n\", MIN_BID);\n    \n    for (int i = 0; i < N; i++) {\n        float bid;\n        do {\n            printf(\"Bid %d: \", i + 1);\n            scanf(\"%f\", &bid);\n            if (bid < MIN_BID) {\n                printf(\"Error: Bid must be at least $%d. Please try again.\\n\", MIN_BID);\n            }\n        } while (bid < MIN_BID);\n        \n        // Store the valid bid in the array\n        bids[i] = bid;\n    }\n}\n\n// Function to find the highest bid from the entered values\nfloat findHighestBid(int N, float *bids) {\n    float highestBid = bids[0]; // Start with the first bid as the highest\n\n    for (int i = 1; i < N; i++) {\n        if (bids[i] > highestBid) {\n            highestBid = bids[i]; // Update highest bid if current is greater\n        }\n    }\n\n    return highestBid;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The program correctly calculates the sum, average, product, smallest, and largest of a user-defined number of integers. The initialization of smallest and largest should occur before the loop starts, as they are used in comparisons for the first value. This can lead to undefined behavior if the first number is not processed correctl q3:The program correctly calculates the total and final costs of various grocery items based on user input, including discounts. The use of functions to calculate costs for different product types is a good design choice."
  },
  {
    "student_id": "20511126",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    int N;\r\n    printf(\"Enter the size of the array (N >=5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // Validate if N > 5\r\n    while (N < 5)\r\n    {\r\n        printf(\"Invalid size, please enter a number >= 5\");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    // Dynamically allocate pointers\r\n    int *array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL)\r\n    {\r\n        printf(\"Memory allocation failed. Exiting program.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Prompting the user to enter all elements of the array\r\n    printf(\"Enter the array elements: \\n\");\r\n    for (int i = 0; i < N; i++)\r\n    {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (array + i));\r\n    }\r\n\r\n    int index1, index2;\r\n    // Prompt the user to input two indices that are valid\r\n    do\r\n    {\r\n        printf(\"Enter the indices of the two elements: \");\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N)\r\n        {\r\n            printf(\"Invalid indices. Indices should be between 0 and %d.\\n\", N - 1);\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    // Calculating the sum\r\n    int *ptr1 = &array[index1];\r\n    int *ptr2 = &array[index2];\r\n\r\n    int sum = *ptr1 + *ptr2;\r\n\r\n    printf(\"The sum of the elements at indices %d and %d is %d\", index1, index2, sum);\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define STUDENT_COUNT 3\r\n#define NAME_LENGTH 50\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main()\r\n{\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n\r\n    // input student names and marks\r\n    for (int i = 0; i < STUDENT_COUNT; i++)\r\n    {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the marks of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // for the average of the marks\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    // display the student data and average mark\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"\\nAverage mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// function for calculating avarage\r\nfloat calculateAverage(const float marks[], int count)\r\n{\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// function for displaying student data\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count)\r\n{\r\n    printf(\"Student Data: \\n\");\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    int N;\r\n\r\n    // validation and input of bids\r\n    do\r\n    {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 2)\r\n        {\r\n            printf(\"Invalid number of bids, have to be greater than 2.\");\r\n        }\r\n    } while (N < 2);\r\n\r\n    // input bids and validation\r\n\r\n    float bids[N];\r\n    printf(\"Enter the bids (Must be at least $100000):\\n\");\r\n    for (int i = 0; i < N; i++)\r\n    {\r\n        printf(\"Bid %d:\\n\", i + 1);\r\n        scanf(\"%f\", &bids[i]);\r\n        while (bids[i] < 100000)\r\n        {\r\n            printf(\"Error: Bid must be at least $100,000. Please try again: \");\r\n            scanf(\"%f\", &bids[i]);\r\n        }\r\n    }\r\n\r\n    // determining the highest bid\r\n    float highest_bid = bids[0];\r\n    for (int i = 0; i < N; i++)\r\n    {\r\n        if (bids[i] > highest_bid)\r\n        {\r\n            highest_bid = bids[i];\r\n        }\r\n    }\r\n\r\n    // outputting highest bid\r\n    printf(\"The highest bid is: %.2f\", highest_bid);\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20701571",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n    // Prompt user to enter the size of the array\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Error: Size of the array must be at least 5. Please try again.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // Declare a static array with a maximum possible size\r\n    int array[N];\r\n\r\n    // Prompt user to enter the array elements\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    int index1, index2;\r\n\r\n    // Prompt user to enter indices and validate them\r\n    while (1) { // 1 is used for the while condition to create an infinite while loop\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\r\n            break; // If the If indices are valid then break will stop the infinite loop else false criteria will display the error message\r\n        } else {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    }\r\n\r\n    // Calculates the sum using array indexing\r\n    int sum = array[index1] + array[index2];\r\n\r\n    // Outputs the sum of the 2 index's\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define STUDENT_COUNT 3\r\n#define NAME_LENGTH 50\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n    int i;\r\n\r\n    // Input student names and marks\r\n    for (i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);  // Read full name including spaces without giving problems during program flow\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // Calculate the average mark\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    // Display the student data and the average\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average); // prints average to 2 decimal places\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to calculate the average of marks\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student data\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\n\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n    // Prompt the user to enter the number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // Checks that the number of bids is at least 2\r\n    while (N < 2) {\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    int numbids[N]; // Array to store the number of bids\r\n    int highestBid = 0;\r\n\r\n    // Prompt the user to enter each bid\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%d\", &numbids[i]);\r\n\r\n        // Checks whether each bid is at least $100,000\r\n        while (numbids[i] < 100000) {\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &numbids[i]);\r\n        }\r\n\r\n        // Determine the highest bid provided \r\n        if (numbids[i] > highestBid) {\r\n            highestBid = numbids[i];\r\n        }\r\n    }\r\n    \r\n    // Outputs the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The code does not meet the task requirements, as it incorrectly prints indices instead of a grid of asterisks q2: The code fails to correctly read three integers and does not implement the full set of required calculations q3: The code does not implement the required functionality for calculating costs or applying discounts"
  },
  {
    "student_id": "20677103",
    "code": "\n/* --- qstn 1 (2).c --- */\n#include<stdio.h>\r\n// qstn 1\r\n\r\nint main(){\r\n    int size; // declare size variable\r\n    printf(\"enter the size of the array (N>=5):\");\r\n    scanf(\"%d\",&size);//input size of variable\r\n    int arr[size];//declare an array with size of given size inpit by user\r\n    for(int i=0;i<size;i++){// enter a for loop to accept inputs from the user and store in the array\r\n        printf(\"element %d :\",i);\r\n        scanf(\"%d\",&arr[i]);\r\n    }\r\n    int index1, index2;\r\n    printf(\"enter the indices of the two elements with one space between them (0<=index1, index2< 6):\");\r\n    scanf(\"%d %d\",&index1,&index2);\r\n    \r\n    if(0>index1 || index2>size){ // if the conditions arent met input another value\r\n        printf(\"error: indices must be within the range of the array elements. please try again.\");\r\n        printf(\"enter the indices of the two elements with one space between them (0<=index1, index2< 6):\");\r\n        scanf(\"%d %d\",&index1,&index2);\r\n    }\r\n    int *ptrindex1=&arr[index1];// declare pointers\r\n    int *ptrindex2=&arr[index2];\r\n    printf(\"the sum of the two inidices is:%d\",*ptrindex1+*ptrindex2);//pointer arithmetic\r\n\r\n    \r\n    return 0;\r\n}\r\n\n/* --- qstn 2.c --- */\n#include <stdio.h>\r\nfloat average(int a, int b, int c);\r\n\r\n\r\nint main(){\r\n    int rows=3;\r\n    int columns=1;\r\n    char name1[50];\r\n    char name2[50];\r\n    char name3[50];\r\n    int marks1;\r\n    int marks2;\r\n    int marks3;\r\n    \r\n    int marks[columns][rows];//initialize a 2d array\r\n    printf(\"enter name of studnet 1:\");//ask for names and marks\r\n    scanf(\"%s\",name1);\r\n    printf(\"enter name of studnet 2:\");\r\n    scanf(\"%s\",name2);\r\n    printf(\"enter name of studnet 3:\");\r\n    scanf(\"%s\",name3);\r\n    printf(\"enter marks of student 1:\");\r\n    scanf(\"%d\",&marks1);\r\n    printf(\"enter marks of student 2:\");\r\n    scanf(\"%d\",&marks2);\r\n    printf(\"enter marks of student 3:\");\r\n    scanf(\"%d\",&marks3);\r\n    float avg =average(marks1,marks2,marks3);//initailize avg that prints the function\r\n    printf(\"the average marks are %.2f\\n\",avg);\r\n\r\n    \r\n\r\n    \r\n\r\n    return 0;\r\n\r\n\r\n}\r\nfloat average(int a,  int b, int c){ //define the function\r\n    return  (a+b+c)/3.0;//return the avg\r\n}\r\n\r\n\r\n\r\n\n/* --- qstn 3.c --- */\n//qstn 3\r\n\r\n#include<stdio.h>\r\nint main(){\r\n    int  N;//declare N\r\n    //declare an array\r\n    printf(\"enter number of bids: \");\r\n    scanf(\"%d\",&N);//input number of bids\r\n    unsigned long long int bid[N];\r\n    if(N<=2){ //enter input again if condition isnt met\r\n        printf(\"Number of bids cannot be less than or equal to 2 please enter again: \\n\");\r\n        scanf(\"%d\",&N);\r\n    }\r\n    for(int i=0; i<N; ++i){\r\n        \r\n        printf(\"bid %d :\",i);\r\n        scanf(\"%llu\",&bid[i]);\r\n        if(bid[i]<100000){//check if condition is ryt\r\n            printf(\"bid must ne atleast $100000. please try again:\\n\");\r\n            \r\n        }\r\n        for(int i=0;i<N;++i){         \r\n            printf(\"%d\\n\",bid[i]);    \r\n            }    \r\n            puts(\"\");\r\n    }\r\n    for(int pass=1;pass<N;++pass){//do bubble sort to sort from lowest to highers\r\n        for(int i=0;i<N-1;++i){\r\n            if(bid[i]>bid[i+1]){\r\n                unsigned long long int hold=bid[i];\r\n                bid[i]=bid[i+1];\r\n                bid[i+1]=hold;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    printf(\"the highest bid is %llu\",bid[N-1]);// print last value as it is the highets\r\n}\r\n",
    "feedback": "q1: incorrect output q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3: unable to run"
  },
  {
    "student_id": "20599269",
    "code": "\n/* --- Omair Ahmad Ibrahim-20599269/Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n    int *array;\r\n    int index1, index2;\r\n\r\n    // Ask the user to enter the size N of the array. Check if N >= 5\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Error: N must be at least 5. Please try again.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // Dynamically allocate memory for the array using pointers\r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Prompt the user to enter each element of the array one by one\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    // Prompt the user to enter the two indices (positions) of the array elements of their choice\r\n    do {\r\n        printf(\"Enter the indices of the two elements ex: 3 4 (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    // Use a pointer-based approach to find the sum of the values of the two array elements\r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    //  Print the output for the sum\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free the dynamically allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Omair Ahmad Ibrahim-20599269/Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\n// Struct definition\r\nstruct Student {\r\n    char name[NAME_LENGTH];\r\n    float mark;\r\n};\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const struct Student students[], int count);\r\nvoid displayStudentData(const struct Student students[], int count);\r\n\r\nint main() {\r\n    struct Student students[STUDENT_COUNT];\r\n\r\n    // Input student names and marks\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", students[i].name);  // Using %[^\\n] to read names with spaces\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &students[i].mark);\r\n    }\r\n\r\n    // Calculate the average mark\r\n    float average = calculateAverage(students, STUDENT_COUNT);\r\n\r\n    // Display student names and marks\r\n    displayStudentData(students, STUDENT_COUNT);\r\n\r\n    // Display the average mark\r\n    printf(\"Average Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to calculate the average mark\r\nfloat calculateAverage(const struct Student students[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += students[i].mark;\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names and marks\r\nvoid displayStudentData(const struct Student students[], int count) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", students[i].name, students[i].mark);\r\n    }\r\n}\r\n\n/* --- Omair Ahmad Ibrahim-20599269/Q3.c --- */\n#include <stdio.h>\r\n\r\n// Functions\r\nint getNumberOfBids(void);\r\nvoid getBids(int bids[], int numberOfBids);\r\nint findHighestBid(int bids[], int numberOfBids);\r\n\r\nint main() {\r\n    // Get number of bids\r\n    int numberOfBids = getNumberOfBids();\r\n\r\n    // Array to store the bids\r\n    int bids[numberOfBids];\r\n\r\n    // Get each bid value and store in the array\r\n    getBids(bids, numberOfBids);\r\n\r\n    // Find the highest bid\r\n    int highestBid = findHighestBid(bids, numberOfBids);\r\n\r\n    // Output the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to get and validate the number of bids\r\nint getNumberOfBids(void) {\r\n    int n;\r\n    do {\r\n        printf(\"Enter the number of bids (at least 2): \");\r\n        scanf(\"%d\", &n);\r\n        if (n < 2) {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n    } while (n < 2);\r\n    return n;\r\n}\r\n\r\n// To get and validate each bid\r\nvoid getBids(int bids[], int numberOfBids) {\r\n    for (int i = 0; i < numberOfBids; ++i) {\r\n        do {\r\n            printf(\"Enter bid %d (must be at least $100000): \", i + 1);\r\n            scanf(\"%d\", &bids[i]);\r\n            if (bids[i] < 100000) {\r\n                printf(\"Error: Bid must be at least $100000. Please try again.\\n\");\r\n            }\r\n        } while (bids[i] < 100000);\r\n    }\r\n}\r\n\r\n// To find the highest bid in the array\r\nint findHighestBid(int bids[], int numberOfBids) {\r\n    int highest = bids[0];\r\n    for (int i = 1; i < numberOfBids; ++i) {\r\n        if (bids[i] > highest) {\r\n            highest = bids[i];\r\n        }\r\n    }\r\n    return highest;\r\n}\r\n",
    "feedback": "q1: Syntax errors. The program aims to print a grid of asterisks based on user-defined rows and columns, but there are critical issues in the loop structure that prevent it from functioning correctly. The outer loop incorrectly uses i instead of r, and the inner loop incorrectly uses j instead of c. This will lead to compilation errors because i and j are not defined in the loop q2: The program correctly takes three integers from the user and calculates the maximum, minimum, sum, product, and average of the entered numbers. The average is calculated using integer division, which can lead to truncation. q3:The program successfully calculates the total cost for various product types based on user input for weight, price, and quantity. The logic for handling discounts is also implemented correctly."
  },
  {
    "student_id": "20573337",
    "code": "\n/* --- q1.c --- */\n//Libraries :\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n// Function to validate user input for array indices\r\nint validateIndex(int index, int size) {\r\n    return index >= 0 && index < size;\r\n}\r\n\r\nint main() {\r\n    int arraySize, index1, index2;\r\n    \r\n    // Prompt user to enter the size of the array\r\n    printf(\"Enter the size of the array (minimum 5): \");\r\n    scanf(\"%d\", &arraySize);\r\n\r\n    // Validate size\r\n    if (arraySize < 5) {\r\n        printf(\"Error: Array size must be at least 5.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Dynamically allocate memory for the array\r\n    int *array = (int *)malloc(arraySize * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Error: Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Input array elements\r\n    printf(\"Enter %d elements for the array:\\n\", arraySize);\r\n    for (int i = 0; i < arraySize; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    // Input and validate indices\r\n    do {\r\n        printf(\"Enter the first index (0 to %d): \", arraySize - 1);\r\n        scanf(\"%d\", &index1);\r\n    } while (!validateIndex(index1, arraySize));\r\n\r\n    do {\r\n        printf(\"Enter the second index (0 to %d): \", arraySize - 1);\r\n        scanf(\"%d\", &index2);\r\n    } while (!validateIndex(index2, arraySize));\r\n\r\n    // Calculate the sum using pointers\r\n    int sum = *(array + index1) + *(array + index2);\r\n    printf(\"The sum of elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Free allocated memory\r\n    free(array);\r\n    return EXIT_SUCCESS;\r\n}\r\n\n/* --- q2.c --- */\n//Libraries\r\n#include <complex.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n//Preprocessors\r\n#define MAX_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\n// Funcion takes average  and by average I mean arthimethic mean\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int increment = 0; increment < count; increment++) {\r\n        sum += marks[increment];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Displayer Function that gives it in Text form in the terminal\r\n//TO-Do, adding color to C - terminal code somehow\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"Student Data:\\n\");\r\n    for (int increment = 0; increment < count; increment++) {\r\n        printf(\"Name: %s, Mark: %.2f\\n\", names[increment], marks[increment]);\r\n    }\r\n    printf(\"Average Mark: %.2f\\n\", calculateAverage(marks, count));\r\n}\r\n// Main Function to execute the main body of code\r\n\r\nint main() {\r\n    char studentNames[MAX_STUDENTS][NAME_LENGTH];\r\n    float studentMarks[MAX_STUDENTS];\r\n\r\n    // Input student data\r\n    for (int increment = 0; increment < MAX_STUDENTS; increment++) {\r\n        printf(\"Enter name of student %d: \", increment + 1);\r\n        scanf(\" %[^\\n]\", studentNames[increment]);\r\n        printf(\"Enter mark of student %d: \", increment + 1);\r\n        scanf(\"%f\", &studentMarks[increment]);\r\n    }\r\n\r\n    // Display student data and average\r\n    displayStudentData(studentNames, studentMarks, MAX_STUDENTS);\r\n    return EXIT_SUCCESS;\r\n}\r\n\n/* --- q3.c --- */\n//libraries \r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n// Function to find the highest bidder\r\n//Pretty self-explanatory\r\nfloat findHighestBid(const float bids[], int count) {\r\n    float highest = bids[0];\r\n    for (int increment = 1; increment < count; increment++) { // for loop to add bidders\r\n        if (bids[increment] > highest) {\r\n            highest = bids[increment];\r\n        }\r\n    }\r\n    return highest;\r\n}\r\n// the main function to actually execute the code :)\r\nint main() {\r\n    int numBids;\r\n\r\n    // Input number of bids\r\n    printf(\"Enter the number of bids (minimum 2): \");\r\n    scanf(\"%d\", &numBids);\r\n\r\n    // Validate number of bids\r\n    if (numBids < 2) {\r\n        printf(\"Error: At least two bids are required.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Allocate memory for bids\r\n    float *bids = (float *)malloc(numBids * sizeof(float));\r\n    if (bids == NULL) {\r\n        printf(\"Error: Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Input bids and validate each one\r\n    printf(\"Enter the bids (minimum $100,000 each):\\n\");\r\n    for (int increment = 0; increment < numBids; increment++) {\r\n        do {\r\n            printf(\"Bid %d: \", increment + 1);\r\n            scanf(\"%f\", &bids[increment]);\r\n            if (bids[increment] < 100000) {\r\n                printf(\"Error: Bid must be at least $100,000.\\n\");\r\n            }\r\n        } while (bids[increment] < 100000);\r\n    }\r\n\r\n    // Find and display the highest bid\r\n    float highestBid = findHighestBid(bids, numBids);\r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    // Free allocated memory\r\n    free(bids);\r\n    return EXIT_SUCCESS;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20612945",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int size, index1, index2;\n    int *array;\n\n    //array size validation\n    while (1) {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &size);\n        if (size < 5) {\n            printf(\"Size should be at least 5.\\n\");\n        }\n        else {\n            break;\n        }\n    }\n    \n    //allocate memory\n    array = (int *)malloc(size * sizeof(int));\n\n    //elements input\n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < size; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (array + i));\n    }\n\n    //loop for indices input validation\n    while (1) {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d: \", size);\n        scanf(\"%d %d\", &index1, &index2);\n\n        if (index1 >= 0 && index1 < size && index2 >= 0 && index2 < size && index1 <= index2) {\n            break;\n        } \n        else {\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    }\n\n    //sum up value\n    int sum = 0;\n    for (int i = index1; i <= index2; i++) {\n        sum += *(array + i);\n    }\n\n    //output\n    printf(\"The sum of at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    //free memory\n    free(array);\n\n    return 0;\n}\n\n/* --- Q2.c --- */\n#include <stdio.h>\n\n//define size\n#define STUDENT_COUNT 3\n#define NAME_LENGTH 50\n\n//calculate average score\nfloat calcAverage(const float marks[], int count) {\n    float sum = 0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n//output display for student names and their marks\nvoid displayData(const char names[][NAME_LENGTH], const float marks[], int count) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\n//main\nint main() {\n    char names[STUDENT_COUNT][NAME_LENGTH];\n    float marks[STUDENT_COUNT]; \n    float average;\n\n    for (int i = 0; i < STUDENT_COUNT; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    average = calcAverage(marks, STUDENT_COUNT);\n\n    displayData(names, marks, STUDENT_COUNT);\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n/* --- Q3.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int bidNum;\n    float *bids;\n\n    //input amount of bids\n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &bidNum);\n\n    //loop to validate bids input\n    while (1) {\n        if (bidNum < 2) {\n            printf(\"Error: Number of bids must be at least 2. Please try again: \");\n        }\n        else {\n            break;\n        }\n    }\n\n    //allocate memory\n    bids = (float *)malloc(bidNum * sizeof(float));\n\n    //input bids amount\n    printf(\"Enter the bids (must be at least $100000):\\n\");\n    for (int i = 0; i < bidNum; i++) {\n        //validate bids\n        while (bids[i] < 100000) {\n            printf(\"Bid %d: \", i + 1);\n            scanf(\"%f\", &bids[i]);\n            if (bids[i] < 100000) {\n                printf(\"Bid must be at least $100000. Please try again: \");\n            }\n        }\n    }\n\n    //compare bids (find highest input)\n    float highestBid = bids[0];\n    for (int i = 1; i < bidNum; i++) {\n        if (bids[i] > highestBid) {\n            highestBid = bids[i];\n        }\n    }\n\n    //output\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\n\n    //free memory\n    free(bids);\n\n    return 0;\n}\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20621408",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    int N, index1, index2, sum;\r\n    int *array;\r\n\r\n    // User Input & Validate Array Size\r\n    do\r\n    {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n\r\n        if (N < 5)\r\n        {\r\n            printf(\"Invalid input. Size must be at least 5.\\n\");\r\n        }\r\n\r\n    } while (N < 5);\r\n\r\n    // Allocate memory dynamically\r\n    array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Array Elements Input\r\n    printf(\"Enter the array elements:\\n\");\r\n\r\n    for (int i = 0; i < N; i++)\r\n    {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", array + i);\r\n    }\r\n\r\n    // Validate Indices\r\n    do {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N)\r\n        {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    // Display Sum\r\n    sum = *(array + index1) + *(array + index2);\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define STUDENT_COUNT 3\r\n#define NAME_LENGTH 50\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main()\r\n{\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n    float average;\r\n\r\n    // User Input (Name & Marks)\r\n    for (int i = 0; i < STUDENT_COUNT; i++)\r\n    {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);                         // Able to read name with spaces, instead of using fgets\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // CALL Function: Display Student Data\r\n    displayStudentData(names, marks);\r\n\r\n    // CALL Function: Calculate Average\r\n    average = calculateAverage(marks, STUDENT_COUNT);\r\n    // Display Average Mark\r\n    puts(\"\");\r\n    printf(\"Average Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// Function: Calculate Average ----------------------------------------------\r\nfloat calculateAverage(const float marks[], int count)\r\n{\r\n    float sum = 0.0;\r\n\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        sum += marks[i];\r\n    }\r\n\r\n    return sum / (float)count;\r\n}\r\n\r\n// Function: Display Student Data -------------------------------------------\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[])\r\n{\r\n    puts(\"\");\r\n    printf(\"Student Names and Marks:\\n\");\r\n\r\n    for (int i = 0; i < STUDENT_COUNT; i++)\r\n    {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    \r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MIN 100000\r\n\r\nint validateBid(int bidNumber);\r\n\r\nint main()\r\n{\r\n    int numBids, highestBid = 0;\r\n\r\n    printf(\"Enter the number of bids: \");\r\n\r\n    while (1)\r\n    {\r\n        scanf(\"%d\", &numBids);\r\n        \r\n        if(numBids != 1 || numBids < 2)\r\n        {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        }\r\n        else\r\n        {\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (numBids < 2)\r\n    {\r\n        printf(\"Error: Number of bids must be at least 2. Exiting program.\\n\");\r\n\r\n        return -1;\r\n    }\r\n\r\n    // User Input & Validate: Bids\r\n    int bids[numBids];\r\n\r\n    printf(\"Enter the bids (must be at least $%d):\\n\", MIN);\r\n\r\n    for (int i = 0; i < numBids; i++)\r\n    {\r\n        bids[i] = validateBid(i + 1);\r\n\r\n        if (bids[i] > highestBid)\r\n        {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Display Highest Bid\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n// Function to validate individual bids ---------------------------------------\r\nint validateBid(int bidNumber) {\r\n    int bid;\r\n    printf(\"Bid %d: \", bidNumber);\r\n    \r\n    while (1)\r\n    {\r\n        scanf(\"%d\", &bid);\r\n        if (scanf(\"%d\", &bid) != 1 || bid < MIN)\r\n        {\r\n            printf(\"Error: Bid must be at least $%d. Please try again: \", MIN);\r\n        }\r\n        else\r\n        {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return bid;\r\n}",
    "feedback": "q1: The program correctly prompts the user for the number of rows and columns, then prints a grid of asterisks as intended. The logic for the nested loops functions correctly, producing the expected output format. q2:The program correctly calculates the sum, average, product, smallest, and largest of three integers based on user input. The calculations and logic for determining the smallest and largest values are accurate.  the logic for finding the smallest and largest values could be simplified. q3:The program effectively prompts the user for a product type and gathers the necessary information to compute the total cost. It correctly handles the calculation of costs based on weight or quantity and applies a discount if provided. The exit condition works well. The default case in the switch statement should inform the user that the input was invalid. This can help guide the user to enter correct product codes.You can streamline the discount application logic."
  },
  {
    "student_id": "20697931",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nvoid main(){\r\n    int number;\r\n\r\n    //size of array\r\n    printf(\"Enter the size of the array(N>=5):\");\r\n    scanf(\"%d\",&number);\r\n    while (number < 5){\r\n        printf(\"Invalid.Enter the size of the array again:\");\r\n        scanf(\"%d\",&number);\r\n    }\r\n\r\n    int array[100]={0};\r\n    int* pointer=(int*)malloc(sizeof(array)); //Dynamic memory allocation\r\n\r\n  \r\n    //Enter array elements\r\n    printf(\"Enter the array elements\\n \");\r\n    int i=0;\r\n    while (i <number){\r\n         printf(\"Element %d:\",i);\r\n         scanf(\"%d\",&pointer[i]);\r\n         i++;\r\n         \r\n\r\n    }\r\n   \r\n    \r\n\r\n    // two indices\r\n    int index1;\r\n    int index2;\r\n    printf(\"Enter the indices of the two elements(0 <=index1,index<%d):\",number);\r\n    scanf(\"%d %d\",&index1,&index2);\r\n    while ( (index1 <0 )|| (index2 >= number)){\r\n        printf(\"Error:Please write again:\");\r\n        scanf(\"%d %d\",&index1,&index2);\r\n\r\n    }\r\n    \r\n    //sum\r\n    int sum = *(pointer+index1) + *(pointer+index2);\r\n    printf(\"The sum of the values at indices %d and %d is:%d\",index1,index2,sum);\r\n\r\n\r\n\r\n    \r\n\r\n\r\n}\n/* --- q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count){\r\n    float sum=0.0;\r\n    for (int i=0;i <count;i++){\r\n        sum += marks[i];\r\n\r\n    }\r\n    return sum/3;\r\n} \r\n       \r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]){\r\n    printf(\"Student Names and Marks:\\n\");\r\n    for (int i=0; i<3 ;i++){\r\n        printf(\"%s:%.2f\\n\",names[i],marks[i]);\r\n    }\r\n}   \r\n\r\nvoid main(){\r\n     char names[3][NAME_LENGTH];\r\n     float marks[3];\r\n    \r\n\r\n    for (int i=0; i <3;i++){\r\n        printf(\"Enter the name of student %d:\",i);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        getchar();\r\n        printf(\"Enter the mark of student %d:\",i);\r\n        scanf(\"%f\", &marks[i]);\r\n    \r\n\r\n    }\r\n\r\n  \r\n    displayStudentData(names,marks);\r\n    float average=calculateAverage(marks,3 );\r\n    printf(\"\\nAverage Mark:%.2f\",average);\r\n\r\n\r\n    \r\n}\n/* --- q3.c --- */\n#include <stdio.h>\r\n\r\nvoid main(){\r\n    int bid_num = 0;\r\n    \r\n    \r\n    int bid_array[100] = {0};\r\n    \r\n\r\n    //Enter bid number\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &bid_num);\r\n    \r\n    while (bid_num < 2){\r\n        printf(\"\\nError: Number of bids must be >= 2\");\r\n        printf(\"\\nEnter the number of bids: \");\r\n        scanf(\"%d\", &bid_num);\r\n    }\r\n\r\n\r\n    //Enter each bid amount into array\r\n    for (int i = 0; i < bid_num; i++){\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%d\", &bid_array[i]);\r\n        \r\n        while (bid_array[i] < 100000){\r\n            printf(\"Try again. Bid %d: \", i + 1);\r\n            scanf(\"%d\", &bid_array[i]);\r\n        }\r\n    }\r\n   \r\n   //check highest value\r\n    int highest = 0;\r\n    for (int i = 0; i < bid_num; i++){\r\n        if (bid_array[i] > highest){\r\n            highest = bid_array[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: $%d\\n\", highest);\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20712314",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int first = 0;\r\n    int second = 0;\r\n    int N = 0;\r\n\r\n    // Prompt the user to enter the size of the array\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // Validate if N >= 5\r\n    while (N < 5) {\r\n        printf(\"Invalid size. Please enter a size of at least 5: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    // Dynamically allocate memory for the array using pointers\r\n    int *array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Prompt the user to enter each element of the array\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    // Prompt the user to enter the two indices of the array elements\r\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n    scanf(\"%d %d\", &first, &second);\r\n\r\n    // Validate the indices\r\n    while (first < 0 || first >= N || second < 0 || second >= N) {\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again: \");\r\n        scanf(\"%d %d\", &first, &second);\r\n    }\r\n\r\n    // Calculate the sum of the two target elements using pointers\r\n    int sum = *(array + first) + *(array + second);\r\n\r\n    // Print the output for the sum\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", first, second, sum);\r\n\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <ctype.h>\r\n\r\n#define NAME_LENGTH 50\r\n\r\n// Function prototypes\r\nvoid getStudentData(char names[3][NAME_LENGTH], float marks[3]);\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[3][NAME_LENGTH], const float marks[], int count, float average);\r\n\r\nint main() {\r\n    char names[3][NAME_LENGTH];\r\n    float marks[3];\r\n\r\n    getStudentData(names, marks);\r\n\r\n    float average = calculateAverage(marks, 3);\r\n\r\n    displayStudentData(names, marks, 3, average);\r\n\r\n    return 0;\r\n}\r\n\r\nvoid getStudentData(char names[3][NAME_LENGTH], float marks[3]) {\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displayStudentData(const char names[3][NAME_LENGTH], const float marks[], int count, float average) {\r\n    printf(\"\\n\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n}\r\n\n/* --- Q3.C --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n    // Prompt the user to enter the number of bids\r\n    printf(\"Enter the number of bids (N >= 2): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // Validate that N is at least 2\r\n    while (N < 2) {\r\n        printf(\"\\nError: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    // Dynamically allocate memory for the bids array\r\n    int *bids = (int *)malloc(N * sizeof(int));\r\n    if (bids == NULL) {\r\n        printf(\"Memory allocation failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Get the bids from the user\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"\\nEnter bid %d (must be at least $100,000): \", i + 1);\r\n        scanf(\"%d\", &bids[i]);\r\n        // Validate that each bid is at least $100,000\r\n        while (bids[i] < 100000) {\r\n            printf(\"\\nError: Bid must be at least $100,000. Please try again: \");\r\n            scanf(\"%d\", &bids[i]);\r\n        }\r\n    }\r\n\r\n    // Find the highest bid\r\n    int highestBid = bids[0];\r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // Output the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);\r\n\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. Q3: incorrect case 4. There is a typo in the scanf for the quantity of canned goods.The calculation of cost and final_cost is repeated in each case. Consider refactoring this into a function to avoid redundancy and improve maintainability."
  },
  {
    "student_id": "20701305",
    "code": "",
    "feedback": "q1: there are several critical errors that prevent it from functioning correctly.  The line int rows and columns; is incorrect. It should declare the variables separately q2: several issues prevent it from functioning correctly. Syntax errors. q3:The program is designed to calculate the total cost of different types of grocery items based on user input. The overall logic is sound, and it correctly handles user selections, calculates costs, and applies discounts."
  },
  {
    "student_id": "20722250",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() \r\n{\r\n    int N; \r\n    int *array;\r\n    int index1, index2;\r\n    int sum = 0;\r\n\r\n    // prompt user to enter size of array, N\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n\r\n    // validate input (size of array at least 5)\r\n    do\r\n    {\r\n        scanf(\"%d\", &N);\r\n\r\n        if (N < 5) \r\n        {\r\n            printf(\"Invalid size. Please enter a value of N >= 5: \");\r\n        }\r\n    } while (N < 5);\r\n\r\n    // allocate memory for the array\r\n    array = (int*)malloc(N * sizeof(int));\r\n    if (array == NULL) \r\n    {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // prompt user to enter the array elements\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) \r\n    {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (array + i));\r\n    }\r\n\r\n    // prompt user to enter the indices of two elements (validate input)\r\n    while (1) \r\n    {\r\n        printf(\"Enter the indices of two elements (index1 >= 0, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        if (index1 >= 0 && index2 < N) \r\n        {\r\n            break;\r\n        }\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n    }\r\n\r\n    // calculate the sum using pointers\r\n    sum = *(array + index1) + *(array + index2);\r\n\r\n    // display the sum\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // free allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define NUM_OF_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\n// function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() \r\n{\r\n    char names[NUM_OF_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_OF_STUDENTS];\r\n\r\n    // prompt user to enter 3 student names and marks\r\n    for (int i = 0; i < NUM_OF_STUDENTS; i++) \r\n    {\r\n        printf(\"Enter the name of student %d: \", i+1);\r\n        scanf(\" %[^\\n]\", names[i]); // read student name\r\n        printf(\"Enter the mark of student %d: \", i+1);\r\n        scanf(\"%f\", &marks[i]);     // read marks\r\n    }\r\n\r\n    // calculate average mark\r\n    float average = calculateAverage(marks, NUM_OF_STUDENTS);\r\n\r\n    // display student name and average mark\r\n    displayStudentData(names, marks);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// function for calculating average mark\r\nfloat calculateAverage(const float marks[], int count) \r\n{\r\n    float sum = 0.0;\r\n\r\n    for (int i = 0; i < count; i++) \r\n    {\r\n        sum += marks[i];\r\n    }\r\n\r\n    return sum / count;\r\n}\r\n\r\n// function for displaying student names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) \r\n{\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n\r\n    for (int i = 0; i < NUM_OF_STUDENTS; i++) \r\n    {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() \r\n{\r\n    int N;\r\n    float bids[N];\r\n    float highestBid = 0;\r\n\r\n    // prompt user to enter number of bids, N\r\n    printf(\"Enter the number of bids (at least 2): \");\r\n\r\n    // validate input (number of bids at least 2)\r\n    do \r\n    {\r\n        scanf(\"%d\", &N);\r\n\r\n        if (N < 2) \r\n        {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        }\r\n    } while (N < 2);\r\n\r\n    // prompt user to enter bids\r\n    printf(\"Enter the bids (at least $100000):\\n\");\r\n\r\n    for (int i = 0; i < N; i++) \r\n    {\r\n        printf(\"Bid %d: \", i+1);\r\n\r\n        // validate input (each bid at least $100000)\r\n        do \r\n        {\r\n            scanf(\"%f\", &bids[i]);\r\n\r\n            if (bids[i] < 100000) \r\n            {\r\n                printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            }\r\n        } while (bids[i] < 100000);\r\n    }\r\n\r\n    // determine the highest bid\r\n    for (int i = 0; i < N; i++) \r\n    {\r\n        if (bids[i] > highestBid) \r\n        {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    // print the highest bid\r\n    printf(\"The highest bid is: $%.0f\\n\", highestBid);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program successfully prints a grid of asterisks based on user-defined rows and columns. q2:The code effectively implements the required functionality and demonstrates a solid understanding of conditional statements for determining the order of numbers. It could be slightly improved by consolidating the logic for finding the minimum and maximum values into a single loop for efficiency, but this is a minor point.  q3:The program effectively calculates the total and final costs based on user input for different product types and applies discounts correctly. The exit condition is handled well.\n    The scanf format specifiers for price and weight should use \"%lf\" for double instead of \"%f\" (which is for float).\n    There is no initialization for total_cost and final_cost before their first use in the switch cases, which may lead to undefined behavior if the switch never matches."
  },
  {
    "student_id": "20698118",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(){\r\n    int N = 0; //initializing variables\r\n    int sum = 0;\r\n    int index1, index2;\r\n\r\n    while(N < 5){ //validation loop\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    if(N < 5){\r\n        printf(\"Please enter a value greater than or equal to 5 for the array size!\\n\");\r\n    }\r\n    }\r\n\r\n    int numbers[N]; //initializing array and pointer\r\n    int *ptr = numbers;\r\n\r\n    \r\n    int temp = 0; //putting elements into array\r\n    for(int i = 1; i <= N; i++){\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &temp);\r\n        numbers[i-1] = temp;\r\n    }\r\n    \r\n    int validation = 0; //validation for indexes\r\n    while(!validation){\r\n    printf(\"Enter the indices of two elements (0 <= index1, index2 < %d)\\n\", N);\r\n    scanf(\"%d %d\", &index1, &index2); //user input of indices\r\n    \r\n    if(index1 < 0 || index2 >= N){ \r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n    }else{\r\n        validation = 1;\r\n    }\r\n    }\r\n    \r\n    sum = *(ptr + index1) + *(ptr + index2); //calculating sum\r\n\r\n\r\n    printf(\"The sum of the values at indices %d and %d is %d\", index1, index2, sum);\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n#define STUD_COUNT 3\r\n\r\n//Function Prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\n\r\nint main() {\r\n\r\n    char names[STUD_COUNT][NAME_LENGTH];  //Array to store student names\r\n    float marks[STUD_COUNT]; //Array for student marks\r\n\r\n    for (int i = 0; i < STUD_COUNT; i++){\r\n        printf(\"Enter the name of student %d: \", i + 1);  //for loop to get the student names and marks\r\n        scanf(\" %[^\\n]\", names[i]); \r\n\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    displayStudentData(names, marks, STUD_COUNT); //calling functions\r\n\r\n    float average = calculateAverage(marks, STUD_COUNT);  \r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n\r\n}\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count) {   \r\n\r\n    float sum = 0.0; \r\n    for (int i = 0; i < count; i++){    //Traversing the arrays\r\n        sum = sum + marks[i];\r\n    }\r\n\r\n    return sum/count;  // returns the average marks\r\n\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {   \r\n\r\n    printf(\"\\nStudent Names and Marks: \\n\"); \r\n    for (int i = 0; i < count; i++){\r\n        printf(\"%s : %.2f\\n\", names[i], marks[i]);  // for loop to traverse through both the arrays and print out names and marks\r\n    }\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int n;\r\n\r\n    while (1)\r\n    {\r\n        printf(\"Enter the number of bids: \");  //take user input for number of bids\r\n        scanf(\"%d\", &n);\r\n\r\n        if (n >= 2)  // validate if there are at least 2 bids\r\n        {\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");  //error message\r\n        }\r\n    }\r\n\r\n    int bids[n];\r\n\r\n    for (int i = 0; i < n; i++)  //loop for user input \r\n    {\r\n        while (1)\r\n        {\r\n            printf(\"Bid %d: \", i + 1);  //user input for bids\r\n            scanf(\"%d\", &bids[i]);\r\n\r\n            if (bids[i] >= 100000)  //validation loop for if bids are more than 100k\r\n            {\r\n                break;\r\n            }\r\n            else\r\n            {\r\n                printf(\"Error: Bid must be at least $100000. Please try again.\\n\"); //error message \r\n            }\r\n        }\r\n    }\r\n\r\n    int highestBid = bids[0];\r\n    for (int i = 1; i < nbids; i++)  //linear search\r\n    {\r\n        if (bids[i] > highestBid)\r\n        {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: $%d\\n\", highestBid);  //output\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20610427",
    "code": "\n/* --- lab_assessment2_q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int n, total;\r\n    \r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &n);\r\n\r\n    if (n < 5) {\r\n        printf(\"Invalid input. Array size must be at least 5.\\n\");\r\n        return 1; \r\n    }\r\n\r\n    int *numbers = (int *)malloc(n * sizeof(int));\r\n    if (numbers == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    printf(\"Enter %d elements:\\n\", n);\r\n    for (int i = 0; i < n; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &numbers[i]);\r\n    }\r\n\r\n    int option1, option2;\r\n    printf(\"Enter the indices of two elements to add: \");\r\n    scanf(\"%d %d\", &option1, &option2);\r\n\r\n    \r\n    if (option1 >= 0 && option1 < n && option2 >= 0 && option2 < n) {\r\n        \r\n        total= numbers[option1] + numbers[option2];\r\n        printf(\"The total is %d\",total );\r\n\r\n        \r\n        \r\n    \r\n    } else {\r\n        printf(\"Invalid indices. Indices must be between 0 and %d.\\n\", n - 1);\r\n    }\r\n\r\n    \r\n    free(numbers);\r\n\r\n    return 0;\r\n}\r\n\n/* --- lab_assessment2_q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n#define NAME_LENGTH 50 \r\n#define studentnum 3 \r\n\r\n// Function prototypes\r\nfloat calculateAverage(const int marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const int marks[], int count);\r\n\r\nint main() {\r\n    char names[studentnum][NAME_LENGTH]; \r\n    int marks[studentnum];          \r\n    float average;\r\n\r\n    for (int i = 0; i < studentnum; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        fgets(names[i], NAME_LENGTH, stdin);\r\n\r\n        size_t len = strlen(names[i]);\r\n        if (len > 0 && names[i][len - 1] == '\\n') {\r\n            names[i][len - 1] = '\\0';\r\n        }\r\n\r\n        printf(\"Enter the marks of student %d: \", i + 1);\r\n        scanf(\"%d\", &marks[i]);\r\n        getchar(); \r\n    }\r\n\r\n    average = calculateAverage(marks, studentnum);\r\n\r\n    displayStudentData(names, marks, studentnum);\r\n\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\nfloat calculateAverage(const int marks[], int count) {\r\n    int total = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        total += marks[i];\r\n    }\r\n    return (float)total / count;\r\n}\r\n\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const int marks[], int count) {\r\n    printf(\"\\nStudent names and marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Name: %s, Marks: %d\\n\", names[i], marks[i]);\r\n    }\r\n}\n/* --- lab_assessment2_q3.c --- */\n#include <stdio.h>\r\n#define MAX_BIDS 20\r\nint numbids ;\r\n\r\nint bids[MAX_BIDS];\r\nint main(){\r\n    printf (\"Enter the number of bids: \");\r\n    scanf(\"%d\", &numbids);\r\n\r\n    if(numbids>=2){\r\n\r\n        for (int i = 0; i < numbids; i++){\r\n            printf(\"Enter the bids (must be atleast $100000) : \");\r\n            scanf(\"%d\", &bids[i]);\r\n            \r\n        }\r\n\r\n        \r\n            \r\n                int n = sizeof(bids) / sizeof(bids[0]);\r\n\r\n                // Intialize the variable which will denote the  maximum\r\n                // element\r\n                int res = bids[0];\r\n\r\n                // Find the maximum value in the array and store it in\r\n                // res\r\n\r\n                for (int i = 0; i < n; i++) {\r\n                    if (res < bids[i])\r\n                        res = bids[i];\r\n                }\r\n        \r\n    \r\n                printf(\"\\n\");\r\n                // print the  maximum bid\r\n                printf(\"The highest bid is: %d\", res);\r\n            \r\n\r\n        \r\n            \r\n    }\r\n    \r\n    else{\r\n        \r\n        printf(\"invalid input\");\r\n    }\r\n\r\n\r\n\r\n\r\n    return 0;\r\n}\n/* --- lab_assessment2/lab_assessment2_q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int n, total;\r\n    \r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &n);\r\n\r\n    if (n < 5) {\r\n        printf(\"Invalid input. Array size must be at least 5.\\n\");\r\n        return 1; \r\n    }\r\n\r\n    int *numbers = (int *)malloc(n * sizeof(int));\r\n    if (numbers == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    printf(\"Enter %d elements:\\n\", n);\r\n    for (int i = 0; i < n; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &numbers[i]);\r\n    }\r\n\r\n    int option1, option2;\r\n    printf(\"Enter the indices of two elements to add: \");\r\n    scanf(\"%d %d\", &option1, &option2);\r\n\r\n    \r\n    if (option1 >= 0 && option1 < n && option2 >= 0 && option2 < n) {\r\n        \r\n        total= numbers[option1] + numbers[option2];\r\n        printf(\"The total is %d\",total );\r\n\r\n        \r\n        \r\n    \r\n    } else {\r\n        printf(\"Invalid indices. Indices must be between 0 and %d.\\n\", n - 1);\r\n    }\r\n\r\n    \r\n    free(numbers);\r\n\r\n    return 0;\r\n}\r\n\n/* --- lab_assessment2/lab_assessment2_q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n#define NAME_LENGTH 50 \r\n#define studentnum 3 \r\n\r\n// Function prototypes\r\nfloat calculateAverage(const int marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const int marks[], int count);\r\n\r\nint main() {\r\n    char names[studentnum][NAME_LENGTH]; \r\n    int marks[studentnum];          \r\n    float average;\r\n\r\n    for (int i = 0; i < studentnum; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        fgets(names[i], NAME_LENGTH, stdin);\r\n\r\n        size_t len = strlen(names[i]);\r\n        if (len > 0 && names[i][len - 1] == '\\n') {\r\n            names[i][len - 1] = '\\0';\r\n        }\r\n\r\n        printf(\"Enter the marks of student %d: \", i + 1);\r\n        scanf(\"%d\", &marks[i]);\r\n        getchar(); \r\n    }\r\n\r\n    average = calculateAverage(marks, studentnum);\r\n\r\n    displayStudentData(names, marks, studentnum);\r\n\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\nfloat calculateAverage(const int marks[], int count) {\r\n    int total = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        total += marks[i];\r\n    }\r\n    return (float)total / count;\r\n}\r\n\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const int marks[], int count) {\r\n    printf(\"\\nStudent names and marks:\\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Name: %s, Marks: %d\\n\", names[i], marks[i]);\r\n    }\r\n}\n/* --- lab_assessment2/lab_assessment2_q3.c --- */\n#include <stdio.h>\r\n#define MAX_BIDS 20\r\nint numbids ;\r\n\r\nint bids[MAX_BIDS];\r\nint main(){\r\n    printf (\"Enter the number of bids: \");\r\n    scanf(\"%d\", &numbids);\r\n\r\n    if(numbids>=2){\r\n\r\n        for (int i = 0; i < numbids; i++){\r\n            printf(\"Enter the bids (must be atleast $100000) : \");\r\n            scanf(\"%d\", &bids[i]);\r\n            \r\n        }\r\n\r\n        \r\n            \r\n                int n = sizeof(bids) / sizeof(bids[0]);\r\n\r\n                // Intialize the variable which will denote the  maximum\r\n                // element\r\n                int res = bids[0];\r\n\r\n                // Find the maximum value in the array and store it in\r\n                // res\r\n\r\n                for (int i = 0; i < n; i++) {\r\n                    if (res < bids[i])\r\n                        res = bids[i];\r\n                }\r\n        \r\n    \r\n                printf(\"\\n\");\r\n                // print the  maximum bid\r\n                printf(\"The highest bid is: %d\", res);\r\n            \r\n\r\n        \r\n            \r\n    }\r\n    \r\n    else{\r\n        \r\n        printf(\"invalid input\");\r\n    }\r\n\r\n\r\n\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns, then uses nested loops to print a grid of asterisks (*) based on the user input. The logic is sound and produces the expected output.The main function should explicitly declare a return type. It’s best practice to define it as int q2:The nested if-else statements for finding the largest and smallest integers are a bit complex. You can simplify this process using a single pass through the integers. Syntax error due to wrong declaration of main function. q3: syntax error - wrong declaration of main function. there are some redundancies and inconsistencies that could be improved. The discount variable is declared as an int but is read as a float. This can lead to incorrect behavior when applying the discount. The calculation of the final cost currently uses the formula final = Total - (discount * Total); which is incorrect for percentage discounts. The default case in the switch statement should handle invalid input more gracefully. Currently, if the user enters 0, it skips the switch entirely."
  },
  {
    "student_id": "20598255",
    "code": "\n/* --- Q1.C --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(){\r\n    int *array=NULL;\r\n    int size, index1, index2;\r\n\r\n    //prompt user for size of array\r\n    printf(\"Enter the size of the array (N>=5)\");\r\n    scanf(\"%d\", &size);\r\n\r\n    //check if number of array is larger than 5\r\n    while (size<5){\r\n        printf(\"Size must be at least 5. Enter again :\");\r\n        scanf(\"%d\",&size);\r\n    }\r\n\r\n    //allocate memory for array\r\n    array =(int*)malloc(size*sizeof(int));\r\n    if (array ==NULL){\r\n        printf(\"Cant locate memory \\n\");\r\n        return 1;\r\n    }\r\n\r\n    //prompt user to input elements of array\r\n    printf(\"Enter %d elements for the array:\\n\", size);\r\n    for (int i=0; i<size;i++){\r\n        printf(\"Element %d:\",i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    //prompt user to input indices of elements\r\n    do {\r\n        printf(\"Enter the indices of the two elements ()<= index1, index2<6\", size -1);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        //check if indices inputted is valid\r\n        if (index1<0 || index1>= size|| index2<0||index2 >= size){\r\n            printf(\"Error: invalid indices. Please enter indices between 0 and %d.\\n\", size -1);\r\n        }\r\n    }while (index1<0 || index1>= size|| index2<0|| index2>= size);\r\n\r\n        //compute sum\r\n        int sum= *(array+index1)+ *(array+index2);\r\n\r\n        //print sum\r\n        printf(\"The sum of elements at indices %d and %d is %d\\n\", index1, index2, sum);\r\n\r\n        //free allocated memory \r\n        free(array);\r\n\r\n        return 0;\r\n    }\r\n\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n#define STUDENT_COUNT 3\r\n#define NAME_LENGTH 50 \r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\n//function to calculate average\r\nfloat calculateAverage(const float marks[], int count){\r\n    float sum=0.0;\r\n    for (int i =0; i<count; i++){\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n//function to display student data\r\nvoid displayStudentData(const char names[][NAME_LENGTH],const float marks[],int count){\r\n    printf(\"\\nStudent names and marks:\\n\");\r\n    for (int i=0; i<count; i++){\r\n        printf(\"%s : %.2f\\n\", names[i],marks[i]);\r\n    }\r\n}\r\n\r\nint main(){\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n\r\n    //prompt user to input student names and marks\r\n    for (int i=0; i<STUDENT_COUNT; i++){\r\n        printf(\"Student %d Name:\", i+1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Student %d Marks:\", i+1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    //calculate average by calling out func\r\n    float average= calculateAverage(marks,STUDENT_COUNT);\r\n\r\n    //call out function to display student data \r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"\\nAverage marks: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h> \r\n\r\nint main(){\r\n    int N;\r\n    float highestBid =0.0;\r\n\r\n    //prompt user to enter number of bids\r\n    do{\r\n        printf(\"Enter the number of bids:\");\r\n        scanf(\"%d\", &N);\r\n\r\n        //check if number of bids is at least 2\r\n        if (N< 2){\r\n            printf(\"Error: Number of bids must be at least 2. Please try again:\\n\");\r\n        }\r\n    } while (N <2);\r\n\r\n    //array to store bids\r\n    float bids[N]; \r\n\r\n    //prompt user to enter bid\r\n    printf(\"Enter the bids(must be at least $100000):\\n\");\r\n    for (int i=0; i<N; i++){\r\n        \r\n        //prompt user to enter bid amount\r\n        do{\r\n           printf(\"Bid %d: \", i+1);\r\n           scanf(\"%f\", &bids[i]);\r\n\r\n            // check if bid is higher than $100000\r\n           if (bids[i]< 100000.0){\r\n                printf(\"Error. BId must be at least $100000. Please enter again:\\n\");\r\n\r\n           }\r\n        } while (bids[i]< 100000.0);\r\n        \r\n    }\r\n\r\n    //determining the highest bid\r\n    for (int i=0; i< N; i++){\r\n        if (bids[i]> highestBid){\r\n            highestBid= bids[i];\r\n        }\r\n    }\r\n\r\n    //display highest bid \r\n    printf(\"The highest bid is: $%.2f\\n\", highestBid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2:The variable smallest is used before it’s initialized. This leads to undefined behavior. You should initialize it to a value that ensures proper comparison, such as setting it to the first element of the arrayThe average calculation sould cast one of the operands to float q3: The program calculates the total cost of various grocery items based on user input and applies a discount correctly. The program prompts for \"number of dairy products\" but uses weight to store this value, which is confusing. It should use an int type for quantity to reflect that it's a count"
  },
  {
    "student_id": "20723819",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(){\n\t//initialise arrsize variable\n\t//needed to prevent undefined behavior in the following while loop\n\tint arrsize = 0;\n\t//use while loop to get input and validate input in one go\n\twhile (arrsize < 5) {\n\t\tprintf(\"Enter the size of the array (N >= 5): \");\n\t\tscanf(\"%d\", &arrsize);\n\t\tif (arrsize < 5) {\n\t\t    printf(\"Please enter an integer greater than 5\\n\");\n\t\t}\n\t}\n\n\t//allocate memory for our array\n\tint *arrpnt = malloc(arrsize * sizeof(int));\n\n\t//get user input for array elements, using for loop to do so\n\tprintf(\"Enter the array elements:\\n\");\n\tfor (int i = 0; i < arrsize; ++i){\n\t\tprintf(\"Element %d: \",i);\n\t\tscanf(\"%d\",(arrpnt+i));\n\t}\n\n\t//it's always better to initialise your variables first\n\t//-1 to avoid breaking our fragile while condition below\n\tint index1, index2 = -1;\n\t\n\t//complex validation, stricter than specified\n\t//better safe than sorry\n\twhile ((index1 < 0) || (index1 >= arrsize) || (index2 < 0) || (index2 >= arrsize) ) {\n\t\tprintf(\"Enter the indices of the two elements (index1 >= 0, index2 < %d) \",arrsize);\n\t\t//get user input\n\t\tscanf(\"%d %d\", &index1, &index2);\n\t\tif (index1 < 0 || index1 >= arrsize || index2 < 0 || index2 >= arrsize ){\n\t\t\tprintf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n\t\t}\n\t}\n\t//print the sum\n\tprintf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, *(arrpnt+index1) + *(arrpnt+index2));\n\t//make sure to release your memory so it can ride off into the sun\n\tfree(arrpnt);\n\treturn 0;\n\n}\n\n/* --- q2.c --- */\n#include <stdio.h>\n\n//define constants\n#define STUDENTS 3\n#define NAME_LENGTH 50\n\n//define function prototypes\nfloat calculateAverage(const float marks[]);\nvoid displayStudentData(const char names[STUDENTS][NAME_LENGTH], const float marks[]);\n\nint main(){\n    //define variables\n    char studentnames[STUDENTS][NAME_LENGTH];\n    float studentmarks[STUDENTS];\n    \n    //use for loop to get input\n    //thankfully no validation needed\n    for (int i = 0; i < STUDENTS; ++i){\n        printf(\"Enter the name of student %d: \", i);\n        scanf(\"%s\", studentnames[i]);\n        printf(\"Enter the mark of student %d: \", i);\n        scanf(\"%f\", &studentmarks[i]);\n    }\n    \n    //use the displayStudentData subroutine to print student names and marks\n    //note function vs subroutine - displayStudentData returns nothing so it is a subroutine\n    displayStudentData(studentnames, studentmarks);\n    //print a newline\n    puts(\"\");\n    //use the function calculateAverage as an argument to printf()\n    printf(\"Average Mark: %.2f\\n\", calculateAverage(studentmarks));\n    return 0;\n}\n\nvoid displayStudentData(const char names[STUDENTS][NAME_LENGTH], const float marks[]){\n    printf(\"Student Names and Marks: \\n\");\n    //use for loop to iterate through the two arrays\n    for (int i = 0; i < STUDENTS; ++i){\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\nfloat calculateAverage(const float marks[]){\n    //define accumulator variable\n    float acc;\n    //use for loop to add all values into accumulator\n    for (int i = 0; i < STUDENTS; ++i){\n        acc = acc + marks[i];\n    }\n    //divide by number of students\n    return acc / STUDENTS;\n}\n/* --- q3.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\n//define a function prototype, we use unsigned long long int due to the possibility of overflowing\n//might be overkill but better safe than sorry\nint find_highest_bid(unsigned long long int* bidpnt, int bidders);\n\nint main(){\n    //initialise bidders variable\n\tint bidders = 0;\n    printf(\"Enter the number of bids: \");\n\tscanf(\"%d\", &bidders);\n    //loop to catch incorrect values\n    //not my preferred implementation but this is needed to match sample program output\n\twhile (bidders < 2) {\n\t\tif (bidders < 2) {\n\t\t    printf(\"Error: Number of bids must be at least 2. Please try again: \");\n            scanf(\"%d\", &bidders);\n\t\t}\n\t}\n    //allocate space for the bid values\n    //unsigned long long int strikes again\n\tunsigned long long int *bidpnt = malloc(bidders * sizeof(unsigned long long int));\n\tprintf(\"Enter the bids (must be at least $10000):\\n\");\n\tfor (int i = 0; i < bidders; ++i){\n        //define a temporary variable so we can perform checks on it before placing it in our array\n        unsigned long long int temp;\n        printf(\"Bid %d: $\",i+1);\n        scanf(\"%llu\",&temp);\n        //again, not my preferred implementation but needed to match sample output\n        while (temp < 100000){\n            printf(\"Error: Bid must be at least $100000. Please try again: $\");\n            scanf(\"%llu\", &temp);\n        }\n        //assign the validated value to the memory space pointed to in the array\n        *(bidpnt+i) = temp;\n\t}\n    //print our final value using a function passed as a parameter to printf()\n    printf(\"The highest bid is: $%d\\n\", find_highest_bid(bidpnt,bidders));\n    //make sure to free memory, even more important when dealing with long long\n\tfree(bidpnt);\n\treturn 0;\n\n}\n\nint find_highest_bid(unsigned long long int* bidpnt, int bidders){\n    //assume max is first element of array\n    int max = *bidpnt;\n    //pratically a linear search for the highest element\n    for (int i = 0; i < bidders; ++i){\n        if (*(bidpnt+i) > max){\n            max = *(bidpnt+i);\n        }\n    }\n    //return our value\n    return max;\n}\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs."
  },
  {
    "student_id": "20720901",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n  // prompt user to give the array size\r\n  int *array;\r\n  int arraySize;\r\n  printf(\"Enter the size of the array (N>=5): \");\r\n  scanf(\"%d\", &arraySize);\r\n  getchar();\r\n\r\n  // error handling\r\n  if (arraySize < 5)\r\n  {\r\n    printf(\"The size of the array should greater than or equal to 5\\n\");\r\n    return -1; // terminates with error\r\n  }\r\n  // create the array with the size user given\r\n\r\n  // memory allocation\r\n  array = (int *)malloc(arraySize * sizeof(int));\r\n\r\n  if (array == NULL)\r\n  {\r\n    printf(\"\\nMemory not allocated.\\n\");\r\n    return -1;\r\n  }\r\n\r\n  // Memory allocated successfully\r\n  printf(\"\\nMemory successfully allocated \\n\\n\");\r\n\r\n  printf(\"Enter the array elements: \\n\");\r\n\r\n  for (int i = 0; i < arraySize; i++)\r\n  {\r\n    // this is used to store the user input number\r\n    int userElement;\r\n    printf(\"Element %d: \", i);\r\n    scanf(\"%d\", &userElement);\r\n    getchar();\r\n    array[i] = userElement;\r\n  }\r\n\r\n  // this 2 number is used to store user input for the indices of 2 array elements\r\n  int num1, num2;\r\n  int total = 0;\r\n\r\n  while (1)\r\n  {\r\n    printf(\"Enter the indices of the two elements (0<= index1, index2 < %d): \", arraySize);\r\n    scanf(\"%d %d\", &num1, &num2);\r\n    getchar();\r\n\r\n    // error handling for the user input\r\n    if (num1 < 0 || num1 >= arraySize || num2 < 0 || num2 >= arraySize)\r\n    {\r\n      printf(\"Error: Indices must be within the range of the array elements. Please try again. \\n\");\r\n      continue;\r\n    }\r\n\r\n    // if within the range, do the sum of elements from the array\r\n    for (int i = num1; i <= num2; i++)\r\n    {\r\n      total += array[i];\r\n    }\r\n    // terminate the while loop\r\n    break;\r\n  }\r\n\r\n  printf(\"The sum of the value at indices %d and %d is : %d\\n\", num1, num2, total);\r\n\r\n  return 0;\r\n}\n/* --- q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n#define NAME_LENGTH 50\r\n#define STUDENT_NUM 3\r\n\r\n// function prototype\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]); // NAME_LENGTH 50\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[])\r\n{\r\n  printf(\"\\nStudent Names and Marks: \\n\");\r\n  for (int i = 0; i < STUDENT_NUM; i++)\r\n  {\r\n    printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n  }\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count)\r\n{\r\n  // used to store final result\r\n  float total;\r\n  for (int i = 0; i < count; i++)\r\n  {\r\n    total += marks[i];\r\n  }\r\n  printf(\"\\n\");\r\n  float result = (total / count);\r\n\r\n  return result;\r\n}\r\n\r\nint main()\r\n{\r\n  // create the name and marks array to store the user (question state 3 students)\r\n  char names[STUDENT_NUM][NAME_LENGTH];\r\n  float marks[STUDENT_NUM];\r\n  // find the length of the array used for input loop (either one is ok)\r\n  int length = sizeof(marks) / sizeof(marks[0]);\r\n\r\n  // user input;\r\n  for (int i = 0; i < length; i++)\r\n  {\r\n    int index = i + 1;\r\n    printf(\"Enter the name of student %d: \", index);\r\n    scanf(\" %[^\\n]\", names[i]);\r\n\r\n    printf(\"Enter the mark of student %d: \", index);\r\n    scanf(\"%f\", &marks[i]);\r\n    getchar();\r\n  }\r\n\r\n  displayStudentData(names, marks);\r\n  float result = calculateAverage(marks, STUDENT_NUM);\r\n  printf(\"Average Mark: %.2f\", result);\r\n\r\n  return 0;\r\n}\n/* --- q3.c --- */\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n\r\n  // used to store number of bids\r\n  int num;\r\n\r\n  printf(\"Enter the number of bids: \");\r\n  scanf(\"%d\", &num);\r\n  getchar();\r\n\r\n  // not >= 2\r\n  if (num < 2)\r\n  {\r\n    while (1)\r\n    {\r\n      printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n      scanf(\"%d\", &num);\r\n      getchar();\r\n\r\n      if (num >= 2)\r\n      {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  int bidArray[num];\r\n\r\n  printf(\"Enter the bids (must be at least $100000): \\n\");\r\n\r\n  for (int i = 0; i < num; i++)\r\n  {\r\n    printf(\"Bid %d: \", i + 1);\r\n    scanf(\"%d\", &bidArray[i]);\r\n    getchar();\r\n\r\n    if (bidArray[i] < 100000)\r\n    {\r\n      // if we get error from previous output, keep asking for bid until the bid is more than 100000\r\n      while (1)\r\n      {\r\n        printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n        scanf(\"%d\", &bidArray[i]);\r\n        getchar();\r\n\r\n        if (bidArray[i] >= 100000)\r\n        {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  int highestBid = bidArray[0];\r\n  for (int i = 1; i < num; i++)\r\n  {\r\n    // compare if the highestBid value is more than next element in that array\r\n    if (highestBid < bidArray[i])\r\n    {\r\n      highestBid = bidArray[i];\r\n    }\r\n  }\r\n  printf(\"the highest bid is: $%d\\n\", highestBid);\r\n\r\n  return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20615192",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N;\r\n    int arr[N];\r\n    int index1; \r\n    int index2;\r\n    \r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    if (N<5) {\r\n        printf(\"Error: N must be greater than or equal to 5.\\n\");\r\n        return 1;\r\n    }\r\n    \r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n    \r\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n\r\n    if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    int sum = arr[index1] + arr[index2];\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n    return 0;\r\n    \r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);//NAME_LENGTH 50\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i<3; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\n\r\nint main() {\r\n    char names[3][NAME_LENGTH];\r\n    float marks[3];\r\n\r\n    for (int i=0; i<3; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    displayStudentData(names, marks);\r\n    float average = calculateAverage(marks,3);\r\n    printf(\"Average Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int num;\r\n    int bids[num];\r\n    \r\n    printf(\"Enter the number of bids:\");\r\n    scanf(\"%d\", &num);\r\n    \r\n    if(num<2){\r\n        printf(\"Error: Number of bids must be at least 2. PLease try again:\");\r\n        scanf(\"%d\", &num);\r\n    }\r\n    \r\n    printf(\"Enter the bids (must be at least $100,000):\\n\");\r\n    for (int i=0; i<num; i++) {\r\n        printf(\"Bid %d: \", i+1);\r\n        scanf(\"%d\", &bids[i]);\r\n        if (bids[i]<100000) {\r\n            printf(\"Error: Bid must be at least $100,000. Please try again: \");\r\n            scanf(\"%d\", &bids[i]);\r\n        }\r\n    }\r\n    \r\n    int big=bids[0];\r\n    for (int i=1; i<num; i++) {\r\n        if (bids[i]>big) {\r\n            big=bids[i];\r\n        }\r\n    }\r\n    printf(\"The highest bid is: $%d\\n\", big);\r\n\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print the grid of asterisks. However, the inner loop starts from 1, resulting in one fewer asterisk printed in each row than specified by the user. It should start at 0 to ensure the correct number of asterisks is printed. q2:The program correctly computes the sum, average, product, smallest, and largest of three integers input by the user. The logic is sound and handles all calculations as intended. q3:The program is designed to calculate the total cost of grocery items based on user input, including handling discounts. Instead of calling main() recursively for invalid input, consider using a loop to keep asking for input until a valid selection is made.The variables total_cost and final_cost should be of type float to accurately represent monetary values, especially if prices or discounts can be fractional."
  },
  {
    "student_id": "20488702",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int n, i;\r\n    \r\n    printf(\"Enter the number of elements in the array (more than 5): \");\r\n    scanf(\"%d\", &n);\r\n    \r\n    int arr[n];\r\n    \r\n    printf(\"Enter %d integers:\\n\", n);\r\n    for (i = 0; i < n; i++) {\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n    \r\n    int index1, index2;\r\n    \r\n    printf(\"Enter the indices of the two elements (0 <= index 1, index 2 < 6:\\n\");\r\n    printf(\"Index 1: \");\r\n    scanf(\"%d\", &index1);\r\n    printf(\"Index 2: \");\r\n    scanf(\"%d\", &index2);\r\n    \r\n    if (index1 < 0 || index1 >= n || index2 < 0 || index2 >= n) {\r\n        printf(\"Error: Indices must be within range of the elements.\\n\");\r\n        return 1;  \r\n    }\r\n    \r\n    int *ptr1 = &arr[index1];\r\n    int *ptr2 = &arr[index2];\r\n    \r\n    int sum = *ptr1 + *ptr2;\r\n    \r\n    printf(\"The sum of values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n    \r\n    return 0;\r\n}\n/* --- q2.c --- */\n#include <stdio.h>\r\nstruct student {\r\n    char Name[50];\r\n    float marks;\r\n} s[5];\r\n\r\n\r\nint main() {\r\n    int i, sum = 0;\r\n    printf(\"Enter information of students:\\n\");\r\n\r\n    // storing information\r\n    for (i = 0; i < 3; ++i) {\r\n        printf(\"Enter Name: \");\r\n        scanf(\"%s\", s[i].Name);\r\n        printf(\"Enter marks: \");\r\n        scanf(\"%f\", &s[i].marks);\r\n        sum += s[i].marks;\r\n    }\r\n    printf(\"Displaying Information:\\n\\n\");\r\n\r\n    // displaying information\r\n    for (i = 0; i < 3; ++i) {\r\n        printf(\"Name: \");\r\n        puts(s[i].Name);\r\n        printf(\"Marks: %.1f\", s[i].marks);\r\n        printf(\"\\n\");\r\n    }\r\n    \r\n    \r\n    float avg = sum / 3;\r\n    \r\n    printf(\"Average: %.2f\", avg);\r\n    \r\n    \r\n    return 0;\r\n}\n/* --- q3.c --- */\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int bids; \r\n    double amount[100];\r\n    printf(\"Enter the number of bids: \\n\");\r\n    scanf(\"%d\", &bids);\r\n    \r\n    if (bids >= 2) {\r\n        \r\n        for(int i = 0; i < bids; i++) {\r\n            printf(\"Enter bid %d (Must be at least $100,000): \\n\", i + 1);\r\n            scanf(\"%lf\", &amount[i]);  // Use %lf to read a double\r\n\r\n            if (amount[i] < 100000) {\r\n                printf(\"Insufficient amount, please try again.\\n\");\r\n                i--; \r\n            } else {\r\n                printf(\"Bid %d: %.2lf\\n\", i + 1, amount[i]);\r\n            }\r\n        }\r\n\r\n        double highest_bid = amount[0];\r\n        for (int i = 1; i < bids; i++) {\r\n            if (amount[i] > highest_bid) {\r\n                highest_bid = amount[i];\r\n            }\r\n        }\r\n\r\n        printf(\"Largest bid = %.2lf\\n\", highest_bid);\r\n\r\n    } else {\r\n        printf(\"Number of bids must be at least 2, please try again.\\n\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n",
    "feedback": "q1: Incorrect output due to logical errors. The intention of the program is to print a grid of asterisks based on user-defined rows and columns. However, the implementation does not correctly produce the desired grid format. q2: The logic for summing and averaging is correct, but there are errors in handling the product calculation.The product calculation is outside the loop and only uses the last entered number. Instead, you should multiply every number as it is read in q3:there are some critical issues that prevent it from functioning as intended.  The scanf function for reading the discount percentage is incorrectly formatted."
  },
  {
    "student_id": "20715043",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N, index1, index2;\r\n    int *arr;\r\n\r\n    //ask user for the size of array N\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    while (N < 5) {\r\n        printf(\"Array size is too small, please enter a size more than or equal to 5: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    //allocate the memory\r\n    arr = (int *)malloc(N * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //ask for the element of the array\r\n    printf(\"Enter %d elements of the array:\\n\", N);\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (arr + i));\r\n    }\r\n\r\n    //ask for 2 indices\r\n    do {\r\n        printf(\"Enter the first index (0 <= index1 < %d): \", N);\r\n        scanf(\"%d\", &index1);\r\n        printf(\"Enter the second index (0 <= index2 < %d): \", N);\r\n        scanf(\"%d\", &index2);\r\n\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Error: indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    int sum = *(arr + index1) + *(arr + index2);\r\n    //print the sum\r\n    printf(\"The sum of elements in index %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    return 0;\r\n\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define STUDENT_COUNT 3\r\n#define NAME_LENGTH 50\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n\r\n    //input student name and mark\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    //find the average\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    //display\r\n    displayStudentData(names, marks, STUDENT_COUNT);\r\n    printf(\"\\nAverage mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n//calculate average mark\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n//display average mark, names, and student marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    printf(\"\\nStudent Names and Marks: \\n\");\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s,: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n    float *bids;\r\n\r\n    //input the number of bid\r\n    do {\r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 2) {\r\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n    } while (N < 2);\r\n\r\n    //memory allocation\r\n    bids = (float *)malloc(N * sizeof(float));\r\n    if (bids == NULL) {\r\n        printf(\"Memory allocation failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //input the bidding amount\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        do {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%f\", &bids[i]);\r\n            if (bids[i] < 100000.0) {\r\n                printf(\"Error: Bid must be at least $100000. Please try again\\n\");\r\n            }\r\n        } while (bids[i] < 100000.0);\r\n    }\r\n\r\n    //find the max bid\r\n    float highestBid = bids[0];\r\n    for (int i = 1; i < N; i++) {\r\n        if (bids[i] > highestBid) {\r\n            highestBid = bids[i];\r\n        }\r\n    }\r\n\r\n    //print the max bid\r\n    printf(\"\\nThe highest bid is: $%.2f\\n\", highestBid);\r\n\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3: incorrect output (not showing discounted total, case 4 error)Prices and weights are often represented as floating-point numbers (e.g., for fractional weights). The current exit case is case 5, but the menu option for exit is 0. This should be changed to handle the exit properly. There is a typo in the scanf statement for canned goods."
  },
  {
    "student_id": "20611657",
    "code": "\n/* --- question 1 20611657.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n// Function to validate if an index is within bounds\r\nint validate_index(int index, int size) {\r\n    return index >= 0 && index < size;\r\n}\r\n\r\nint main() {\r\n    int N, index1, index2;\r\n\r\n    // Step 1: Prompt the user to input the size of the array\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // Validate that the size is at least 5\r\n    while (N < 5) {\r\n        printf(\"Error: The size must be at least 5. Please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    // Step 2: Dynamically allocate memory for the array\r\n    int *array = (int *)malloc(N * sizeof(int));\r\n    if (array == NULL) {\r\n        printf(\"Memory allocation failed. Exiting the program.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Step 3: Prompt the user to input the array elements\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", (array + i));\r\n    }\r\n\r\n    // Step 4: Prompt the user to input two indices and validate them\r\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n\r\n    // Validate both indices\r\n    while (!validate_index(index1, N) || !validate_index(index2, N)) {\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n    }\r\n\r\n    // Step 5: Calculate the sum of the elements at the two indices\r\n    int sum = *(array + index1) + *(array + index2);\r\n\r\n    // Step 6: Print the sum\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    // Step 7: Free dynamically allocated memory\r\n    free(array);\r\n\r\n    return 0;\r\n}\r\n\n/* --- question 2 20611657.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n#define NUM_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_STUDENTS];\r\n    float average;\r\n\r\n    // Collect names and marks from the user\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); // Read full name including spaces\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // Calculate the average marks\r\n    average = calculateAverage(marks, NUM_STUDENTS);\r\n\r\n    // Display the results\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    displayStudentData(names, marks, NUM_STUDENTS);\r\n\r\n    // Print the average\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to calculate the average of marks\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names and marks\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- question 3 20611657.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n// Function to find the highest bid\r\nfloat findHighestBid(const float bids[], int count) {\r\n    float highest = bids[0];\r\n    for (int i = 1; i < count; i++) {\r\n        if (bids[i] > highest) {\r\n            highest = bids[i];\r\n        }\r\n    }\r\n    return highest;\r\n}\r\n\r\nint main() {\r\n    int N;\r\n    float *bids;\r\n\r\n    // Prompt the user for the number of bids\r\n    printf(\"How many bids are there? (Minimum 2): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // Ensure at least 2 bids are entered\r\n    while (N < 2) {\r\n        printf(\"Error: You need at least two bids to proceed.\\n\");\r\n        printf(\"Enter a valid number of bids: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    // Allocate memory for the bids\r\n    bids = (float *)malloc(N * sizeof(float));\r\n    if (bids == NULL) {\r\n        printf(\"Error: Unable to allocate memory for bids.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    // Enter the bids\r\n    printf(\"Enter your bids (minimum $100,000):\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Bid %d: \", i + 1);\r\n        scanf(\"%f\", &bids[i]);\r\n\r\n        // Validate each bid\r\n        while (bids[i] < 100000) {\r\n            printf(\"Invalid bid! Please enter a bid of at least $100,000: \");\r\n            scanf(\"%f\", &bids[i]);\r\n        }\r\n    }\r\n\r\n    // Find the highest bid\r\n    float highest = findHighestBid(bids, N);\r\n\r\n    // Display the highest bid\r\n    printf(\"The highest bid is: $%.2f\\n\", highest);\r\n\r\n    // Free the allocated memory\r\n    free(bids);\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20604846",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    \r\n    int N = 0;\r\n    int* arr;\r\n    \r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\",&N);\r\n\r\n    while (N < 5){\r\n        printf(\"Error: Enter the size of the array ( MUST BE >= 5): \");\r\n        scanf(\"%d\",&N);\r\n    }\r\n\r\n    arr = (int*)malloc(N * sizeof(int));\r\n\r\n\r\n    printf(\"Enter the array elements:\\n\");\r\n\r\n    int i;\r\n    for (i = 0; i < N; i++) {\r\n        printf(\"Element %d:\", i);\r\n        int temp;\r\n        scanf(\"%d\", &temp);\r\n\r\n        arr[i] = temp;\r\n    }\r\n\r\n    int index1;\r\n    int index2;\r\n    int run = 1;\r\n    while (run == 1){\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < 6): \\n\");\r\n        scanf(\"%d\", &index1);\r\n        scanf(\"%d\", &index2);\r\n\r\n        if (index1 > N || index2 > N){\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }else{\r\n            run = 0;\r\n        }\r\n    }\r\n\r\n    int sum = arr[index1] + arr[index2];\r\n    printf(\"The sum of the values at %d and %d is: %d\", index1, index2, sum);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n#define NAME_LENGTH 50\r\n\r\n\r\nfloat calculateAverage(int mark[]) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < 3; i++) {\r\n        sum += mark[i];\r\n    }\r\n    return sum / 3;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const int marks[]){\r\n    printf(\"\\nStudent Names and Marks:\");\r\n    for (int i = 0; i < 3; i++){    \r\n        printf(\"\\n%s: %d\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    \r\n    int marks[3];\r\n    char names[3][NAME_LENGTH];\r\n\r\n    for (int i = 0; i < 3; i++){\r\n        printf(\"Enter the name of student %d:\", i + 1);\r\n        scanf(\"%s\", &names[i]);\r\n        printf(\"Enter the mark of student %d:\", i + 1);\r\n        scanf(\"%d\", &marks[i]);\r\n    }\r\n\r\n    float avg = calculateAverage(marks);\r\n    displayStudentData(names, marks);\r\n\r\n    printf(\"\\nAverage Mark: %.2f\", avg);\r\n\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\r\nint main() {\r\n    printf(\"Enter the number of bids: \");\r\n    int N;\r\n    scanf(\"%d\", &N);\r\n\r\n    while (N < 2){\r\n        printf(\"Error: Number of bids must be at least 2. Please try again:\");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    int bids[N];\r\n    int highest = 0;\r\n    \r\n    for (int i = 0; i < N; i++){\r\n        printf(\"Bid %d:\", i + 1);\r\n        int temp;\r\n        scanf(\"%d\", &temp);\r\n\r\n        while (temp < 100000){\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &temp);\r\n        }\r\n\r\n        if (temp > highest){\r\n            highest = temp;\r\n        }\r\n\r\n        bids[i] = temp;\r\n    }\r\n\r\n    printf(\"\\nThe highest bid is: $%d\", highest);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print a grid of asterisks based on that input. The loops are structured correctly to ensure the right number of asterisks is printed in each row and column. q2:The program successfully prompts the user for the number of integers and computes the smallest, largest, product, sum, and average of those integers. The use of control structures correctly updates the smallest and largest values based on user input.Casting one of the operands to float before division can ensure a correct average. q3:The program correctly implements a menu-driven approach, allowing the user to select different product types and input relevant data to calculate costs, including discounts.The comparison if (product != \"exit\") will always evaluate to true because string literals in C are compared by pointer address, not by content. Instead, you should use strcmp(product, \"exit\") for string comparison."
  },
  {
    "student_id": "20619015",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h> \n\nint main() {\n    int n, index1, index2;\n    int *array, sum = 0;\n\n    \n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &n);\n        if (n < 5) {\n            printf(\"Error: The size of the array must be at least 5. Please try again.\\n\");\n        }\n    } while (n < 5);\n\n    \n    array = (int *)malloc(n * sizeof(int));\n    if (array == NULL) {\n        printf(\"Error: Memory allocation failed.\\n\");\n        return 1;\n    }\n\n    \n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (array + i)); \n    }\n\n  \n    do {\n        printf(\"Enter the indices of the two elements (0 <=index1, index2< %d): \", n);\n        scanf(\"%d %d\", &index1, &index2);\n        if (index1 < 0 || index1 >= n || index2 < 0 || index2 >= n) {\n            printf(\"Error:Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    } while (index1 < 0 || index1 >= n || index2 < 0 || index2 >= n);\n\n    sum = *(array + index1) + *(array + index2);\n\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    free(array);\n\n    return 0;\n}\n\n/* --- Q2.c --- */\n#include <stdio.h>\n\n#define NUM_STUDENTS 3\n#define NAME_LENGTH 50\n\n\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\n\nint main() {\n    char names[NUM_STUDENTS][NAME_LENGTH];\n    float marks[NUM_STUDENTS];\n\n    for (int i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]); \n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    // Calculate average\n    float average = calculateAverage(marks, NUM_STUDENTS);\n\n    // Display results\n    displayStudentData(names, marks, NUM_STUDENTS);\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\n/* --- Q3.c --- */\n#include <stdio.h>\n\nvoid inputBids(float bids[], int n);\nfloat findHighestBid(const float bids[], int n);\n\nint main() {\n    int n;\n\n    do {\n        printf(\"Enter the number of bids: \");\n        scanf(\"%d\", &n);\n        if (n < 2) {\n            printf(\"Error: Number of bids must be at least 2. Please try again.\\n\");\n        }\n    } while (n < 2);\n\n    float bids[n];\n    \n    inputBids(bids, n);\n    float highestBid = findHighestBid(bids, n);\n    printf(\"The highest bid is: $%.0f\\n\", highestBid);\n\n    return 0;\n}\n\n\nvoid inputBids(float bids[], int n) {\n    for (int i = 0; i < n; i++) {\n        do {\n            printf(\"Bid %d: \", i + 1);\n            scanf(\"%f\", &bids[i]);\n            if (bids[i] < 100000) {\n                printf(\"Error: Bid must be at least $100000. Please try again.\\n\");\n            }\n        } while (bids[i] < 100000); \n    }\n}\n\n\nfloat findHighestBid(const float bids[], int n) {\n    float highest = bids[0];   // Assume first bid is the highest\n    for (int i = 1; i < n; i++) {\n        if (bids[i] > highest) {\n            highest = bids[i];\n        }\n    }\n    return highest;\n}\n",
    "feedback": "q1:The program correctly prints a grid of asterisks based on user-defined rows and columns. The nested loops function as intended, producing the expected output. q2: The program correctly calculates the sum, average, product, smallest, and largest of three integers. The calculations and comparisons are implemented accurately. One minor suggestion for improvement is to simplify the logic for finding the smallest and largest numbers using a single set of comparisons. q3:While the code works as intended, you can improve it by reducing redundancy. Here are some suggestions:\n\n    Consolidate Cost Calculation: Create a function to handle cost calculations to avoid code duplication. This will make your code cleaner and easier to manage.\n    Use Consistent Data Types: Use float for weight and price to handle decimal values accurately.\n    Correct Output Messages: Ensure that the output messages are accurate and consistent for each case."
  },
  {
    "student_id": "20683106",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n// Main function to start program\r\nint main(void){\r\n    int* arr; // Array is allocated dynamically to fit with user's input size\r\n    int index1, index2, size, sum; // Variables needed\r\n\r\n    // Prompt for the size of the array\r\n    printf(\"Enter the size of the array (N >= 5): \\n\");\r\n    scanf(\"%d\", &size);\r\n    // Validation of array size, check if size is at east 5, if not prompt for re-input\r\n    while(size < 5){\r\n        printf(\"Array size too small. Please enter again (N >= 5):\\n\");\r\n        scanf(\"%d\", &size);\r\n    }\r\n    \r\n    // Using malloc to dynamically allocate memory for the array based on the size\r\n    arr = (int*)malloc(size * sizeof(int));\r\n\r\n    // Populate the array with elements input by the user\r\n    printf(\"Enter the array elements:\\n\");\r\n    for(int x=0;x<size;x++){\r\n        printf(\"Element %d: \", x);\r\n        scanf(\"%d\", &arr[x]);\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    // Prompt user for two array indexes to perform addition and get sum\r\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", size);\r\n    scanf(\"%d%d\", &index1, &index2);\r\n    printf(\"\\n\");\r\n    // Validation for both indexes - check if both indexes are within the range of the size of the array, prompt for re-input otherwise\r\n    while(index1 < 0 || index2 < 0 || index1 > size-1 || index2 > size-1){\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements (0 <= index1 , index2 < %d): \", size);\r\n        scanf(\"%d%d\", &index1, &index2);\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    // Perform addition to get sum using pointers with reference to the desired indexes\r\n    sum = (*(arr+index1)) + (*(arr+index2));\r\n    // Output result\r\n    printf(\"The sum of the values at indices %d and %d is: %d\", index1, index2, sum);\r\n\r\n    return 0;\r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\n// Function headers\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\n// Function to display student information, using void as the function does not return anything\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]){\r\n    printf(\"Student Names and Marks:\\n\");\r\n    for(int x=0;x<3;x++){\r\n        printf(\"%s: %.2f\\n\", names[x], marks[x]);\r\n    }\r\n    printf(\"\\n\");\r\n}\r\n\r\n// Function to calculate and return the average marks of the student as a float value rounded up to 2dp\r\nfloat calculateAverage(const float marks[], int count){\r\n    float average = 0;\r\n    for(int x=0;x<3;x++){\r\n        average += marks[x];\r\n    }\r\n    return (average/count);\r\n}\r\n\r\n// Main function\r\nint main(void){\r\n    char names[3][NAME_LENGTH];\r\n    float marks[3];\r\n\r\n    // Populate both arrays with student names and marks\r\n    for(int x=0;x<3;x++){\r\n        printf(\"Enter the name of student %d: \", x+1);\r\n        scanf(\" %[^\\n]\", &names[x]);\r\n        printf(\"\\n\");\r\n        printf(\"Enter the mark of student %d: \", x+1);\r\n        scanf(\"%f\", &marks[x]);\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    // Calling the respective functions to get desired results\r\n    displayStudentData(names, marks);\r\n    printf(\"Average Mark: %.2f\", calculateAverage(marks,3));\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main(void){\r\n    int size;\r\n\r\n    // Prompt user for the total number of bids\r\n    printf(\"Enter the number of bids N (N >= 2): \");\r\n    scanf(\"%d\", &size);\r\n    // Validate if the number of bids are at least 2. If not, prompt for re-input and display error message\r\n    while(1){\r\n        if(size < 2){\r\n            printf(\"N is lesser than 2. A highest bid cannot be determied. Please enter again.\\n\");\r\n            scanf(\"%d\", &size);\r\n        } else {\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n    // Using user's number of bids to declare array with respective size\r\n    int bids[size];\r\n    int highest = 0; // Variable to record highest bid. Since bids starts from at least $100,000, initializing it \r\n                     // to 0 will ensure that the first bid input will always be larger than this variable and replaces it\r\n\r\n    // Populate the array with bid amounts from the user\r\n    printf(\"Enter the bids (Amount must be at least $100,000):\\n\");\r\n    for(int x = 0; x<size; x++){\r\n        printf(\"Bid %d: \", x+1);\r\n        scanf(\"%d\", &bids[x]);\r\n        // Validate bid amount, if amount is less than $100,000 prompt user for re-input\r\n        while(bids[x]<100000){\r\n            printf(\"Bid amount must be at least $100,000. Please enter again: \");\r\n            scanf(\"%d\", &bids[x]);\r\n        }\r\n        // Setting the highest bid amount while looping - replaces variable \"highest\" with current amount if it is larger\r\n        if(bids[x] > highest){\r\n            highest = bids[x];\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    // Print final highest bid\r\n    printf(\"The highest bid is: %d\", highest);\r\n\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns, and it prints a grid of asterisks based on the input values. The logic is sound and performs as expected. q2:The program correctly calculates the sum, average, product, smallest, and largest of three integers. However, the logic for determining the smallest number is overly complex and could be simplified. q3: The program correctly implements a menu-driven interface that allows users to select a product type, input relevant data, and calculate the total cost with a discount applied. The use of a loop allows for multiple calculations in a single run, which is a useful feature.The logic for calculating costs and displaying results is repeated in each case of the switch statement. This could be refactored into a function to reduce redundancy and improve maintainability."
  },
  {
    "student_id": "20585127",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int size; //for array size\r\n    int sum; // To store the sum of chosen elements\r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &size);\r\n\r\n    // the size is valid\r\n    while (size < 5) {\r\n        printf(\"Error: The size must be 5 or more. Try again: \");\r\n        scanf(\"%d\", &size);\r\n    }\r\n\r\n    // Dynamically allocates\r\n    int *arr = (int *)malloc(size * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1; // Exit the program if failed\r\n    }\r\n\r\n    // Input elements of the array\r\n    for (int i = 0; i < size; i++) {\r\n        printf(\"Enter element %d: \", i + 1); \r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    // Ask the user to choose two elements\r\n    int choice1, choice2;\r\n    while (1) { // Loop until valid numbers given\r\n        printf(\"Choose two indices (1 to %d) to add their elements:\\n\", size); //1 to the number of elemntes there are\r\n        scanf(\"%d %d\", &choice1, &choice2);\r\n\r\n        // Validate\r\n        if (choice1 >= 1 && choice1 <= size && choice2 >= 1 && choice2 <= size) {\r\n            sum = arr[choice1 - 1] + arr[choice2 - 1]; // Adjust indices for 0-based array\r\n            printf(\"The sum of elements at index %d and %d is: %d\\n\", choice1, choice2, sum);\r\n            break; // Exit loop after valid input\r\n        } else {\r\n            printf(\"Invalid indices chosen. Please try again.\\n\");\r\n        }\r\n    }\r\n\r\n    // Free the allocated memory\r\n    free(arr);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n// Function to call to calculate the average\r\nfloat calculate_average(float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nint main(void) {\r\n    char names[3][100]; // Array to store names of 3 students, length to 100 characters\r\n    float marks[3];     // Array to store marks\r\n\r\n    // loop 3 times\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"Enter student %d name: \", i + 1);\r\n        scanf(\"%s\", names[i]); // Store name in the array\r\n        printf(\"Enter student %d mark: \", i + 1);\r\n        scanf(\"%f\", &marks[i]); // Store mark as a float\r\n    }\r\n\r\n    // Print all student names and marks\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n\r\n    // Calculate and print the average of marks\r\n    float average = calculate_average(marks, 3);\r\n    printf(\"\\nAverage Marks: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main(void) {\r\n\r\n    int Totalbids;\r\n    int arr[Totalbids];\r\n    \r\n    printf(\"Enter the number of bids:\");\r\n    scanf(\"%d\", &Totalbids);\r\n\r\n    while (Totalbids < 2) {\r\n        printf(\"Error: the number of Total bids must at least be 2, Please try agian:\");\r\n        scanf(\"%d\", &Totalbids);\r\n    }\r\n    \r\n    printf(\"Enter the bids (Must be atleast $100000)\");\r\n\r\n    for (int i = 0; i < Totalbids; i++) {\r\n        printf(\"Enter bid %d: \", i + 1); \r\n        scanf(\"%d\", &arr[i]);\r\n        while (arr[i] < 100000)\r\n        {\r\n            printf(\"Error: the bids need to be above $100000 try agian:\");\r\n            scanf(\"%d\", &arr[i]); \r\n        }\r\n        \r\n    }\r\n\r\n    int highest = arr[0]; //to get highest number\r\n    int n = sizeof(arr) / sizeof(arr[0]); //get arr size    \r\n\r\n    for (int i = 0; i < n; i++) {\r\n            printf(\"Bid %d: %d\\n\",i + 1, arr[i]);\r\n        } //print bids\r\n    for (int i = 0; i < n; i++) { //loop until find highest number\r\n        if (highest < arr[i])\r\n            highest = arr[i];\r\n    }\r\n    printf(\"\\n\");\r\n    // print the  maximum value\r\n    printf(\"The higest bid is: $%d\", highest);\r\n\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20715623",
    "code": "\n/* --- Q1.c --- */\n#define _CRT_SECURE_NO_WARNINGS\r\n#include<stdio.h>\r\n\r\nint main1()//When using, remove the redundant characters in the file so as not to affect the program\r\n{\r\n    int N;\r\n\r\n    // ʾûС\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    while (N < 5) \r\n    {\r\n        printf(\"Invalid size! Please enter a size N >= 5: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n    \r\n    // ̬ڴ\r\n    int* arr = (int*)malloc(N * sizeof(int));\r\n    if (arr == NULL) \r\n    {\r\n        printf(\"Memory allocation failed!\\n\");\r\n        return 1; // ˳\r\n    }\r\n    // Ԫ\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i + 1);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    int index1, index2;\r\n\r\n    // 벢֤\r\n    printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n    scanf(\"%d %d\", &index1, &index2);\r\n\r\n    while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n    }\r\n\r\n    // 㲢ӡ\r\n    int sum = *(arr + index1) + *(arr + index2);\r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    return 0;\r\n\r\n\r\n}\n/* --- Q2.c --- */\n#define _CRT_SECURE_NO_WARNINGS\r\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\n// ԭ\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count, float average);\r\n\r\nint main2()//When using, remove the redundant characters in the file so as not to affect the program \r\n{\r\n    char names[STUDENT_COUNT][NAME_LENGTH]; // 洢ѧ\r\n    float marks[STUDENT_COUNT]; // 洢ѧɼ\r\n    float average;\r\n\r\n    // ѧͳɼ\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); \r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // ƽɼ\r\n    average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    // ʾѧݺƽɼ\r\n    displayStudentData(names, marks, STUDENT_COUNT, average);\r\n\r\n    return 0;\r\n}\r\n\r\n// ƽֺ\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n\r\n    return sum / count;\r\n}\r\n\r\n// ʾѧݺƽֺ\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count, float average) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n}\n/* --- Q3.c --- */\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\n#define MIN_BID 100000\n#define MIN_BIDS 2\n\nint main3()//When using, remove the redundant characters in the file so as not to affect the program \n{\n    int N;\n\n    // 뾺֤\n    printf(\"Enter the number of bids: \");\n    scanf(\"%d\", &N);\n\n    while (N < MIN_BIDS)\n    {\n        printf(\"Error: Number of bids must be at least %d. Please try again: \", MIN_BIDS);\n        scanf(\"%d\", &N);\n    }\n\n    int* bids = (int*)malloc(N * sizeof(int));\n    if (bids == NULL)\n    {\n        printf(\"Memory allocation failed!\\n\");\n        return 1; // ˳\n    }\n\n    int highestBid = 0; // ʼ߾ֵ\n\n    printf(\"Enter the bids (must be at least $%d):\\n\", MIN_BID);\n    for (int i = 0; i < N; i++)\n    {\n        printf(\"Bid %d: \", i + 1);\n        scanf(\"%d\", &bids[i]);\n\n        while (bids[i] < MIN_BID)\n        {\n            printf(\"Error: Bid must be at least $%d. Please try again: \", MIN_BID);\n            scanf(\"%d\", &bids[i]);\n        }\n\n        // ߾ֵ\n        if (bids[i] > highestBid)\n        {\n            highestBid = bids[i];\n        }\n    }\n\n    // ߾ֵ\n    printf(\"The highest bid is: $%d\\n\", highestBid);\n\n\n    return 0;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3: no price input from user. The variable cost is calculated based on user input but does not reset to zero after each iteration. This could lead to cumulative costs being incorrect if the user does not exit after the first calculation."
  },
  {
    "student_id": "20614522",
    "code": "\n/* --- Question1.c --- */\n#include <stdio.h>\r\n\r\nint main(void) {\r\n\r\n    int n=0;\r\n    printf(\"Enter the size of the array (N>=5): \");\r\n    scanf(\"%d\",&n);\r\n\r\n    if (n>=5) {                     //check the condition\r\n\r\n        printf(\"Enter the array elements \\n\");\r\n\r\n        int array[n];\r\n        int *arrayPtr = array;      //declare the pointer of the array\r\n        for (int i=0; i<n; ++i) {\r\n            printf(\"Element %d : \", i);\r\n            scanf(\"%d\", &array[i]);     //store the element in the array\r\n        }\r\n\r\n        int index1=0;\r\n        int index2=0;\r\n        printf(\"Enter the indices of two elements (0<=index1, index2<%d): \",n);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n\r\n        if (index1>=0 & index2<n) {     //check the index condition\r\n            int sum = *(arrayPtr + index1) + *(arrayPtr + index2);\r\n            printf(\"The sum of the values at indices %d and %d is: %d\",index1, index2, sum);\r\n        }\r\n\r\n        else {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\");\r\n        }\r\n    }\r\n\r\n    else {\r\n        printf(\"Array size should be >=5.\");\r\n    }\r\n\r\n}\n/* --- Question2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n#define SIZE 3\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main(void) {\r\n    char nameArray[SIZE][NAME_LENGTH]; \r\n    float mark[SIZE];\r\n\r\n    for (int i = 0; i < SIZE; ++i) {        //get user input\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", nameArray[i]);\r\n\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &mark[i]);\r\n    }\r\n\r\n    displayStudentData(nameArray, mark);\r\n    \r\n    float average = calculateAverage(mark, SIZE);\r\n    printf(\"Average Mark: %.2f\\n\", average);\r\n\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float total = 0.0; \r\n    for (int j = 0; j < count; ++j) { \r\n        total += marks[j];      //element in the array sum together\r\n    }\r\n    return total / count;       //calculate the average\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    \r\n    printf(\"Student Names and Marks:\\n\");\r\n    \r\n    for (int j = 0; j < SIZE; ++j) { \r\n        printf(\"%s : %.2f\\n\", names[j], marks[j]);      //print the student name and mark\r\n    }\r\n}\r\n\n/* --- Question3.c --- */\n#include <stdio.h>\r\n\r\nint main(void) {\r\n\r\n    int n=0;\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    while(n<2) {        //while loop when the condition does not fulfill\r\n\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\",&n);   \r\n    }\r\n\r\n    int array[n];       //declare an array to store data\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n    for (int i=1; i<=n; ++i) {\r\n        printf(\"Bid %d:\", i);\r\n        scanf(\"%d\",&array[i]);\r\n\r\n        if (array[i]>=100000) {     //if the condition is fufill continue the for loop\r\n            continue;\r\n        }\r\n\r\n        while (array[i]<100000) {   //check the condition \r\n            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n            scanf(\"%d\", &array[i]);\r\n        }\r\n    }\r\n\r\n    for (int i=1; i<n; ++i) {           //bubble sort to sort the array element\r\n\r\n        for (int j=0; j<n-1; ++j) {\r\n            if (array[i]>array[i+1]) {\r\n                int hold= array[i];\r\n                array[i]=array[i+1];\r\n                array[i+1]=hold;\r\n            }\r\n        }\r\n    }\r\n\r\n    printf(\"The highest bid is: %d\", array[n]);     //take the last element of the sorted array because it is the largest number\r\n\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns, and then uses nested loops to print a grid of asterisks (*). The output matches the expected result based on the user's inputs. q2:The program correctly defines functions to calculate the sum, average, product, smallest, and largest of three integers input by the user. The calculations are logically sound, and the expected outputs are achieved.The logic for determining the smallest and largest is not entirely correct. In the findSmallest function, if y is less than x, it should not check z against x again; instead, it should compare z with y. Similarly for the findLargest function. q3:The program effectively prompts the user for a product choice, weight, price, and discount percentage, and it calculates both the total cost and the final cost after the discount. The calculations are generally correct, but there are minor issues in the discount calculation logic.The calculation of the final cost in finalCost is slightly misleading. The discount percentage is being subtracted from 100, which results in incorrect calculations."
  },
  {
    "student_id": "20703088",
    "code": "\n/* --- Question 2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\nfloat average(const float marks[], int count) {\r\n    float sum = 0; //initialize sum to 0\r\n    //for loop to add all elements of my array \r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        sum += marks[i];\r\n    }\r\n    float mean = sum / (float)count; //calculate average\r\n    return mean;\r\n}\r\n\r\nvoid displayData(const char names[][NAME_LENGTH], const float marks[], int count) {\r\n    for (int i = 0; i < count; i++) {\r\n        printf(\"Student Name: %s, Mark: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\r\nint main() {\r\n    char studentName[3][NAME_LENGTH]; //2d array for 3 names of maximum 50 letters each\r\n    float studentMarks[3];\r\n\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"Enter the name of the student %d: \", i + 1);\r\n        scanf(\"%s\", studentName[i]);\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &studentMarks[i]);\r\n    }\r\n\r\n    float avg = average(studentMarks, 3);\r\n\r\n    displayData(studentName, studentMarks, 3);\r\n    printf(\"Average mark is %.2f\", avg);\r\n}\r\n\r\n\r\n\n/* --- Question 3.c --- */\n#include <stdio.h>\r\n\r\nvoid findLargest(int arr[], int N) {\r\n    int max = arr[0]; // Initialize max with the first element\r\n    //loop through the array, assume first number = maximum number\r\n    for (int i = 1; i < N; i++) {\r\n        //if first number is not max, max will be shifted one number every iteration\r\n        if (arr[i] > max) {\r\n            max = arr[i];\r\n        }\r\n    }\r\n    printf(\"The largest bid is: %d\\n\", max);\r\n}\r\n\r\nint main() {\r\n    int N; //number of bids to be placed\r\n    printf(\"Enter the number of bids you want to place: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    // Validate the number of bids\r\n    while (N < 2) {\r\n        printf(\"Number of bids must be at least 2, please try again: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n    //array for storing the bids \r\n    int bids[N];\r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Enter bid %d (Must be over $100000): \", i + 1);\r\n        scanf(\"%ld\", &bids[i]); // Use %ld for long int\r\n        while (bids[i] < 100000) {\r\n            printf(\"The bids must be over $100000, try again: \");\r\n            scanf(\"%ld\", &bids[i]);\r\n        }\r\n    }\r\n\r\n    findLargest(bids, N);\r\n}\n/* --- Question1.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N;\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n    //keep asking userinput until size of array is not less than 5\r\n    while (N < 5) {\r\n        printf(\"Invalid input. Please enter a number greater than or equal to 5: \");\r\n        while (getchar() != '\\n'); // clear input buffer\r\n    }\r\n\r\n    int arr[N];\r\n    printf(\"Enter %d elements of the array:\\n\", N);\r\n    //use for loop to write down elements in the array \r\n    for (int i = 0; i < N; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    int index1, index2; //assign two variables for addition \r\n    printf(\"Enter the first index (0 <= index1 < %d): \", N);\r\n    scanf(\"%d\", &index1);\r\n    //check if userinput is valid and within range \r\n    while (index1 < 0 || index1 >= N) {\r\n        printf(\"Invalid input. Please enter a value between 0 and %d: \", N - 1);\r\n        while (getchar() != '\\n'); // clear input buffer\r\n    }\r\n\r\n    printf(\"Enter the second index (0 <= index2 < %d): \", N);\r\n    scanf(\"%d\", &index2);\r\n    //validation for index2, check if index2 = index 1 and same conditions maintained like index 1\r\n    while (index2 < 0 || index2 >= N || index2 == index1) {\r\n        printf(\"Invalid input, the number is same as index 1 or less than 0 or greater than the number of elements\");\r\n        while (getchar() != '\\n'); // clear input buffer\r\n    }\r\n\r\n    int sum = *(arr + index1) + *(arr + index2); //use pointers to find address of index 1 and 2 to add them by dereferencing\r\n    printf(\"The sum of the elements at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print a grid of asterisks based on that input. The logic is sound and produces the expected output. q2:The program correctly prompts the user for three integers and calculates their sum, average, product, smallest, and largest values. q3:The program is structured to handle user input for different product types and calculate costs based on weight or quantity. However, there are issues with how the final costs are calculated, particularly with the handling of the total and finalTotal variables.the calculation of the total cost after discount is done before the total is initialized, which leads to incorrect results."
  },
  {
    "student_id": "20509169",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    int N;\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &N);\r\n        if (N < 5) {\r\n            printf(\"Size of array must be at least 5. Please try again.\\n\");\r\n        }\r\n    } while (N < 5);\r\n\r\n    int *arr = (int*)malloc(N * sizeof(int));\r\n    if (arr == NULL) {\r\n        printf(\"Memory allocation failed. Exiting program.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    printf(\"Enter %d integers for the array:\\n\", N);\r\n    for (int i = 0; i < N; i++) {\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    int index1, index2;\r\n    do {\r\n        printf(\"Enter the first index (0 to %d): \", N-1);\r\n        scanf(\"%d\", &index1);\r\n        printf(\"Enter the second index (0 to %d): \", N-1);\r\n        scanf(\"%d\", &index2);\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    int sum = *(arr + index1) + *(arr + index2);\r\n\r\n    printf(\"The sum of elements at index %d and %d is: %d\\n\", index1, index2, sum);\r\n\r\n    free(arr);\r\n    return 0;\r\n}\r\n\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define STUDENT_COUNT 3\r\n\r\nfloat calculate_average(const float marks[], int count);\r\nvoid displaystudentdata(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main()\r\n{\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT];\r\n\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d:\\n\", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the marks of student %d:\\n\", i + 1);\r\n        \r\n        scanf(\"%f\", &marks[i]);\r\n        \r\n        while (getchar() != '\\n');\r\n    }\r\n    displaystudentdata(names, marks);\r\n    return 0;\r\n}\r\n\r\nfloat calculate_average(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displaystudentdata(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudents name and Marks:\\n\");\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    printf(\"\\nAverage Marks: %.2f\\n\", calculate_average(marks, STUDENT_COUNT));\r\n}\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\n#define MIN_BID 100000\r\n\r\nint main()\r\n{\r\n    int N;\r\n    do {\r\n        printf(\"Enter the number of bids (must be more than 1): \\n\");\r\n        scanf(\"%d\", &N);\r\n        if (N < 2) {\r\n            printf(\"The number of bids must be at least 2. Please try again.\\n\");\r\n        }\r\n    } while (N < 2);\r\n\r\n    \r\n    int bids[N];\r\n    int highest_bid = 0; \r\n\r\n    \r\n    for (int i = 0; i < N; i++) {\r\n        int bid;\r\n        do {\r\n            printf(\"Enter bid %d (must be at least $%d): $\", i + 1, MIN_BID);\r\n            scanf(\"%d\", &bid);\r\n            if (bid < MIN_BID) {\r\n                printf(\"Bid must be at least $%d. Please try again.\\n\", MIN_BID);\r\n            }\r\n        } while (bid < MIN_BID);\r\n        bids[i] = bid;\r\n\r\n        \r\n        if (bid > highest_bid) {\r\n            highest_bid = bid;\r\n        }\r\n    }\r\n\r\n    \r\n    if (highest_bid == 0) {\r\n        printf(\"No valid bids were entered. The highest bid cannot be determined.\\n\");\r\n    } else {\r\n        printf(\"The highest bid is: $%d\\n\", highest_bid);\r\n    }\r\n\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:Q3: incorrect output (no break in switch case)"
  },
  {
    "student_id": "20480891",
    "code": "\n/* --- Q1_20480891.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N, index1, index2;\r\n\r\n    printf(\"Enter the size of the array (N >= 5): \");\r\n    scanf(\"%d\", &N);\r\n\r\n    //Validate the size\r\n    while (N < 5) {\r\n        printf(\"Invalid size. Please enter valid array: \");\r\n        scanf(\"%d\", &N);\r\n    }\r\n\r\n    //Array memory\r\n    int *arr = (int *)malloc(N * sizeof(int));\r\n\r\n    //Array element\r\n    printf(\"Enter the elements of the array:\\n\");\r\n    for (int i = 0; i < N; i++) {\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    //The indices of the two elements\r\n    do {\r\n        printf(\"Enter the first index (0 <= index1 < N): \");\r\n        scanf(\"%d\", &index1);\r\n        printf(\"Enter the second index (0 <= index2 < N): \");\r\n        scanf(\"%d\", &index2);\r\n\r\n        if (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N) {\r\n            printf(\"Invalid indices. Please enter valid indices.\\n\");\r\n        }\r\n    } while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n\r\n    //The sum\r\n    int *ptr1 = &arr[index1];\r\n    int *ptr2 = &arr[index2];\r\n    int sum = *ptr1 + *ptr2;\r\n\r\n    //Print the sum\r\n    printf(\"The sum of the two elements is: %d\\n\", sum);\r\n\r\n    //Free the dynamically allocated memory\r\n    free(arr);\r\n\r\n    return 0;\r\n}\n/* --- Q2_20480891.c --- */\n#include <stdio.h>\r\n\r\n#define STUDENT_COUNT 3\r\n#define NAME_LENGTH 50\r\n\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid studentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() {\r\n    char names[STUDENT_COUNT][NAME_LENGTH];\r\n    float marks[STUDENT_COUNT]; \r\n\r\n    //Input student names and marks\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]); \r\n\r\n        printf(\"Enter the mark for studet %s: \", names[i]);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    //Calculate the average mark\r\n    float average = calculateAverage(marks, STUDENT_COUNT);\r\n\r\n    //Display student data and the average mark\r\n    studentData(names, marks);\r\n    printf(\"Average mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\n//Calculate the average of marks\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n//Display student data\r\nvoid studentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Data:\\n\");\r\n    for (int i = 0; i < STUDENT_COUNT; i++) {\r\n        printf(\"Name: %s, Marks: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- Q3_20480891.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N, i;\r\n    int bids[100];\r\n\r\n    //Get the number of bids\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    //Validate the number of bids\r\n    if (N < 2) {\r\n        printf(\"A highest bid cannot be determined with fewer than two bids.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //Get the bid values\r\n    printf(\"Enter the bid values:\\n\");\r\n    for (i = 0; i < N; i++) {\r\n        scanf(\"%d\", &bids[i]);\r\n\r\n        //Validate each bid\r\n        if (bids[i] < 100000) {\r\n            printf(\"Invalid bid amount. Each bid must be at least $100,000.\\n\");\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    //The highest bid\r\n    int highest_bid = bids[0];\r\n    for (i = 1; i < N; i++) {\r\n        if (bids[i] > highest_bid) {\r\n            highest_bid = bids[i];\r\n        }\r\n    }\r\n\r\n    //Print the highest bid\r\n    printf(\"The highest bid is: $%d\\n\", highest_bid);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:Add the missing semicolon after the printf(\"\\n\") statement to prevent compilation errors. q2:The program intends to compute the sum, average, product, smallest, and largest of three integers. However, there are several logical and syntactical errors that prevent it from functioning correctly. q3: no submission"
  },
  {
    "student_id": "20717554",
    "code": "\n/* --- q1.c --- */\n//#include <stdio.h>\r\n//#include <stdlib.h>\r\n//\r\n//int main() {\r\n//    int* array = NULL;//Pointer,dynamically allocated storage.\r\n//    int N;\r\n//    int index1, index2;\r\n//    int validInput;//Verify that the input is valid.\r\n//\r\n//    printf(\"Enter the size of the array (N >= 5): \");\r\n//    while (scanf_s(\"%d\", &N) != 1 || N < 5) {//Checking input.\r\n//        printf(\"Error: The size of the array must be at least 5. Please try again: \");\r\n//        while (getchar() != '\\n');\r\n//    }\r\n//\r\n//    array = (int*)malloc(N * sizeof(int));\r\n//    if (array == NULL) {\r\n//        printf(\"Error: Memory allocation failed.\\n\");\r\n//        return 1;\r\n//    }\r\n//\r\n//    printf(\"Enter the array elements:\\n\");\r\n//    for (int i = 0; i < N; i++) {\r\n//        printf(\"Element %d: \", i);\r\n//        while (scanf_s(\"%d\", &array[i]) != 1) {\r\n//            printf(\"Invalid input. Please enter an integer: \");\r\n//            while (getchar() != '\\n');\r\n//        }\r\n//    }\r\n//\r\n//    while (1) {\r\n//        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n//        if (scanf_s(\"%d %d\", &index1, &index2) == 2 &&\r\n//            index1 >= 0 && index1 < N &&\r\n//            index2 >= 0 && index2 < N) {\r\n//            break;\r\n//        }\r\n//        else {\r\n//            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n//            while (getchar() != '\\n');\r\n//        }\r\n//    }\r\n//\r\n//    int sum = *(array + index1) + *(array + index2);\r\n//\r\n//    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\r\n//\r\n//    free(array);\r\n//\r\n//    return 0;\r\n//}\r\n\n/* --- q2.c --- */\n#include <stdio.h>\r\n\r\n#define NUM_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nint main() {\r\n    char names[NUM_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_STUDENTS];\r\n\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf_s(\" %[\\n]\", names[i]);\r\n\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        while (scanf_s(\"%f\", &marks[i]) != 1) {\r\n            printf(\"Invalid input. Please enter a valid mark for student %d: \", i + 1);\r\n            while (getchar() != '\\n');\r\n        }\r\n    }\r\n\r\n    displayStudentData(names, marks);\r\n\r\n    float average = calculateAverage(marks, NUM_STUDENTS);\r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n\r\n    return 0;\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0.0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < NUM_STUDENTS; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n}\r\n\n/* --- q3.c --- */\n//#include <stdio.h>\r\n//#include <stdlib.h>\r\n//\r\n//int main() {\r\n//    int N;\r\n//    float* bids = NULL;//Dynamically allocating memory.\r\n//    float highestBid = 0.0;//Storage maximum value.\r\n//\r\n//    printf(\"Enter the number of bids: \");\r\n//    while (scanf_s(\"%d\", &N) != 1 || N < 2) {//Check if the inputvalue is valid.\r\n//        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n//        while (getchar() != '\\n');\r\n//    }\r\n//\r\n//    bids = (float*)malloc(N * sizeof(float));\r\n//    if (bids == NULL) {//Checking memory allocation.\r\n//        printf(\"Error: Memory allocation failed.\\n\");\r\n//        return 1;\r\n//    }\r\n//\r\n//    printf(\"Enter the bids (must be at least $100000):\\n\");\r\n//    for (int i = 0; i < N; i++) {\r\n//        printf(\"Bid %d: \", i + 1);\r\n//        while (scanf_s(\"%f\", &bids[i]) != 1 || bids[i] < 100000.0) {//Verify that the input value is not less than 100000.\r\n//            printf(\"Error: Bid must be at least $100000. Please try again: \");\r\n//            while (getchar() != '\\n');\r\n//        }\r\n//    }\r\n//\r\n//    for (int i = 0; i < N; i++) {\r\n//        if (bids[i] > highestBid) {\r\n//            highestBid = bids[i];\r\n//        }\r\n//    }\r\n//\r\n//    printf(\"The highest bid is: $%.0f\\n\", highestBid);//Output maximum value.\r\n//\r\n//    free(bids);\r\n//\r\n//    return 0;\r\n//}\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and prints a grid of asterisks based on those dimensions. The logic is sound, and it performs as expected. q2:The program correctly prompts the user for the number of integers, reads the integers, and calculates their sum, average, product, smallest, and largest values. The checks for the smallest and largest values in the loop can be simplified. You don't need the else clauses—they can be handled directly in the if statements. q3: no submission"
  },
  {
    "student_id": "20598184",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(void) {\n    int N;\n    int *array;\n    int index1, index2;\n\n    // Do while loop for validation\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"N must be bigger than 5. \");\n        }\n    } while (N < 5);\n\n    // Allocation memory using pointers into the array\n    array = (int *)malloc(N *sizeof(int));\n    if (array == NULL) { // Prints error if memory allocation fails\n        printf(\"Memory allocation failed. \\n\");\n        return 1;\n    }\n\n    // Assigning values to the element.\n    printf(\"Enter %d of elements in the array. \\n\", N);\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i );\n        scanf(\"%d\", (array + i));\n    }\n\n    do {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n\n        if (index1 < 0 || index1 > N || index2 < 0 || index2 > N) {\n            printf(\" Error: Indices must be within  the range of the array elements. Please try again. \");\n        } else {\n            break;\n        }\n    } while (1);\n\n    // Using pointers to sum\n    int sum = *(array + index1) + *(array + index2);\n    printf(\"The sum of the values at indices %d and %d is: %d \\n\", index1, index2, sum);\n\n    free(array);\n\n    return 0;\n}\n/* --- Q2.c --- */\n#include <stdio.h>\n\n#define STUDENT_COUNT 3 // Student count set to 3\n#define NAME_LENGHT 50 // Lenght of name max at 50 characters\n\n\n// Initializing functions\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGHT], const float marks[], float average);\n\nint main(void) {\n    char names[STUDENT_COUNT][NAME_LENGHT]; \n    float marks[STUDENT_COUNT];\n    \n    // Loop for assigning names and marks\n    for (int i = 0; i < 3; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);\n        printf(\"Enter the marks of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n    float average = calculateAverage(marks, STUDENT_COUNT); // Calculates averages using caclculateAverage function\n\n    displayStudentData(names, marks, average); \n    \n    return 0;\n}\n\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0.0; // Initialise sum with value of 0.0\n\n    // For loop for sum of marks\n    for (int i = 0; i < count; i++ ) { \n        sum += marks[i]; \n    }\n    return sum / count; // Returns the averaged marks\n}\n\n\nvoid displayStudentData (const char names[][NAME_LENGHT], const float marks[], float average) {\n    printf(\"\\nStudent Names and Marks: \\n\");\n    for (int i = 0; i < 3; i++) {\n        printf(\"%s : %.2f \\n\", names[i], marks[i]);\n    }\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\n\n}\n/* --- Q3.c --- */\n#include <stdio.h>\n\nint main (void) {\n    int N;\n\n    // Do while loop for data validation\n    do {\n        printf(\"Enter the number of bids: \");\n        scanf(\"%d\", &N);\n        if (N < 2 ) {\n            printf(\"Error: Number of bids must be atleast 2. Please try again: \");\n        }\n    } while (N < 2);\n\n    float bids[N]; // Declare array\n\n    // Looping for assigning bids\n    for (int i = 0; i < N; i++) {\n        do {\n            printf(\"Bid %d: \", i + 1);\n            scanf(\"%f\", &bids[i]);\n\n            if (bids[i] < 100000) {\n                printf(\"Error: Bid must be atleast $100,000. Please try again: \");\n            }\n        } while (bids[i] < 100000);\n    }\n\n    // Checking for highest bid\n    float highestbid = bids[0];\n    for (int i = 1 ; i < N; i++) {\n        if (bids[i] > highestbid) {\n            highestbid = bids[i];\n        }\n    }\n\n    printf(\"The highest bid is : $%.2f \\n\", highestbid); // Prints final output\n\n    return 0;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20698295",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\nint main(){\r\n    int N,num1,num2,i;\r\n    int element;\r\n    printf(\"Enter size of array: \");\r\n    scanf(\"%d\",&N);\r\n    int array[]={0};\r\n    int *arrayptr=array;\r\n    if (N>=5){\r\n        printf(\"Enter the array elements: \\n\");\r\n        for(i=0; i<N ;i++){\r\n            printf(\"Element %d:\",i);\r\n            scanf(\"%d\",&arrayptr+1);\r\n\r\n        printf(\"Enter the indices of 2 elements (0<=inde1, index2< %d): \",N);\r\n        scanf(\"%d %d\", num1, num2);\r\n        while(num1<0 || num2>N){\r\n            printf(\"Error: the indices must be within the range of array elements. please try again. \");\r\n            printf(\"Enter the indices of 2 elements (0<=inde1, index2< %d): \",N);\r\n            scanf(\"%d %d\", num1, num2);\r\n        }\r\n\r\n    }\r\n    int sum;\r\n    sum=((*arrayptr+num1)+(*arrayptr+num2));\r\n    printf(\"The sum of values is: %d\", sum);\r\n    \r\n        \r\n\r\n    }\r\n\r\n\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50 //declaring length of names array\r\nint main(){\r\n    float calculateAverage(const float marks[], int count); \r\n    void displayStudentData(const char names[][NAME_LENGTH], const float marks[]);  // NAME_LENGTH 50\r\n    char names[NAME_LENGTH];\r\n    float marks[]={0.0};\r\n    for(int i=1;i<=3;++i){\r\n        printf(\"Enter name of student %d: \",i,names[i]);\r\n        scanf(\" %[^\\n]\", &names[i]);\r\n        printf(\"Enter marks of student %d: \",i,marks[i]);\r\n        scanf(\"%f\", &marks[i]);\r\n\r\n    }\r\n\r\n}\r\n\r\nvoid displayStudentData(const char array[][NAME_LENGTH],const float arr[]){\r\n    printf(\"Student Names and Marks: \\n\");\r\n        for(int n= 0;n<=2;++n){\r\n            printf(\"%s :\",array[n]);\r\n            printf(\"%.2f \\n\",arr[n]);\r\n        }\r\n    printf(\"\\n\");\r\n    return;\r\n}\r\n\r\n\r\n\r\n\r\nfloat calculateAverage(const float arr[],int count){\r\n    float sum=0.0, avg;\r\n    for (int j= 0;j<=2;++j){\r\n        scanf(\"%f\",&arr[j]);\r\n        sum+= arr[j];\r\n        count++;\r\n    }\r\n    avg=sum/count;\r\n    printf(\"Average Mark: %.2f\", avg );\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\nint main(){\r\nint N,bid[]={0};\r\n\r\n    printf(\"Enter the number of bids: \", N);\r\n    scanf(\"%d\", &N);\r\n    while (N<2){\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \", N);\r\n        scanf(\"%d\", &N);\r\n\r\n    }\r\n    printf(\"Enter the bids (must be at least $100000): \\n\");\r\n    for(int i=0;i<=N;++i){\r\n        printf(\"Bid %d: \",i,bid[i]);\r\n        scanf(\"%d\", &bid[i]);\r\n        if (bid[i]<100000){\r\n            printf(\"Error: Bid must be at least $100000. Please try again: \",bid[i]);\r\n            scanf(\"%d\", &bid[i]);\r\n        }\r\n    }\r\n    int max = bid[0];\r\n    for(int j = 1; j < N; j++) {\r\n        if(bid[j] > max) {\r\n            max = bid[j];\r\n        }\r\n    }\r\n    printf(\"The highest bid is: %d\", max);\r\n    \r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. Q3: incorrect output, infinite loop. there are some issues with control flow and variable initialization that prevent it from functioning correctly in all scenarios. The current implementation of the while loop can lead to an infinite loop if the user does not enter 0 or a valid product code after the first input. The loop should be structured to allow re-entry of the product code after displaying the total and final costs."
  },
  {
    "student_id": "20611325",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n\r\nint sumOfElement(int index1, int index2, int *arrayPtr);  //Function prototype to calculate the sum of the two elements\r\n\r\nint main(){\r\n    int arraySize = 0;  //declaring the size of array\r\n    int index1 = 0;\r\n    int index2 = 0;\r\n\r\n    printf(\"Enter the size of the array (N>=5): \");\r\n    scanf(\"%d\",&arraySize);  //Get the size of array from user\r\n    int array[arraySize];  //declaring the array after getting the size\r\n    int *arrayPtr = array; //declaring the pointer to the array\r\n\r\n    while (arraySize <= 4){ \r\n        printf(\"Invalid input. Please enter a number greater than or equal to 5.\\n\");\r\n        if (arraySize >= 5){    //Break loop if user is >=5\r\n            break;\r\n        }\r\n        else{   //Repeat until user enter value >=5\r\n            printf(\"Enter the size of the array (N>=5): \");\r\n            scanf(\"%d\",&arraySize);\r\n        }\r\n    }\r\n    //If the array size is greater than or equal to 5\r\n    for (int i=0; i<arraySize; ++i){  // Corrected loop condition\r\n        printf(\"Enter the element %d: \",i);\r\n        scanf(\"%d\", arrayPtr + i);   // Corrected the way elements are stored\r\n    }\r\n\r\n    printf(\"Enter the indices of the two elements (0<=index1, index2<%d): \",arraySize);\r\n    scanf(\"%d %d\",&index1,&index2);   // Corrected scanf to use address-of operator\r\n    while (index1 < 0 || index2 < 0 || index1 >= arraySize || index2 >= arraySize){  //Check the condition of the indices\r\n        printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        printf(\"Enter the indices of the two elements (0<=index1, index2<%d): \",arraySize);\r\n        scanf(\"%d %d\",&index1,&index2);   // Corrected scanf to use address-of operator\r\n    }\r\n\r\n    int sum = sumOfElement(index1,index2,arrayPtr);  //Call the function to calculate the sum of the two elements\r\n    printf(\"The sum of the values at indices %d and %d is %d\\n\",index1,index2,sum);  //Print the sum of the two elements\r\n\r\n    return 0;\r\n}\r\n\r\n//Function to calculate the sum of the two elements\r\nint sumOfElement(int index1, int index2, int *arrayPtr){\r\n    int sum = 0;\r\n    sum = *(arrayPtr+index1) + *(arrayPtr+index2);  //Calculate the sum of the two elements\r\n    return(sum);  //Return the sum\r\n}\r\n\r\n\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n#define NAME_LENGTH 50\r\n\r\n// Function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]);\r\n\r\nstruct Data {\r\n    char name[3][NAME_LENGTH];\r\n    float marks[3];\r\n};\r\n\r\nint main() {\r\n    struct Data data;\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"Enter student's name[%d]: \", i);\r\n        fgets(data.name[i], NAME_LENGTH, stdin); // Get student's name\r\n        printf(\"Enter student's marks[%d]: \", i);\r\n        scanf(\"%f\", &data.marks[i]); // Get student's marks\r\n        getchar(); // To consume the newline character left by scanf\r\n    }\r\n\r\n    displayStudentData(data.name, data.marks); // Call the function to display student's data\r\n\r\n    float average = calculateAverage(data.marks, 3); // Call the function to calculate the average of the marks\r\n    printf(\"Average mark: %.2f\\n\", average); // Print the average of the marks\r\n\r\n    return 0;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]) {\r\n    printf(\"Student's Name and Marks:\\n\");\r\n    for (int i = 0; i < 3; ++i) {\r\n        printf(\"Name: %s\", names[i]); // Print student's name\r\n        printf(\"Marks: %.2f\\n\", marks[i]); // Print student's marks\r\n    }\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    float average = sum / count; // Calculate the average of the marks\r\n    return average; // Return the average\r\n}\r\n\r\n\r\n\r\n\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nvoid bubblesort(int bids[], int numberOfBids); //Function prototype to sort the bids\r\n\r\nint main(){\r\n    int numberOfBids = 0;\r\n    printf(\"Enter the number of bids: \");   //Get number of bids from user\r\n    scanf(\"%d\", &numberOfBids);\r\n\r\n    while (numberOfBids < 2) { //Re-prompt the condition if the number of bids is less than 2\r\n        printf(\"Error: Number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &numberOfBids);\r\n    }\r\n\r\n    int bids[numberOfBids]; // Declare the array after getting the number of bids\r\n\r\n    printf(\"Enter the bids (must be at least $100000):\\n\");  //Get the bids from user\r\n    for (int i = 0; i < numberOfBids; i++) {\r\n        do {\r\n            printf(\"Bid %d: \", i + 1);\r\n            scanf(\"%d\", &bids[i]);   //Store the bids in the array\r\n            if (bids[i] < 100000) {\r\n                printf(\"Error: Bid must be at least $100000. Please try again.\\n\");\r\n            }\r\n        } while (bids[i] < 100000);\r\n    }\r\n\r\n    bubblesort(bids, numberOfBids); //Call the function to sort the bids\r\n    printf(\"The highest bid is: $%d\\n\", bids[numberOfBids - 1]);  //Print the highest bid\r\n    return 0;\r\n}\r\n\r\nvoid bubblesort(int bids[], int numberOfBids){  //Sort the values in ascending order in the array\r\n    int temp = 0;   //Temporary variable for swapping\r\n    for (int i = 0; i < numberOfBids - 1; i++) {\r\n        for (int j = 0; j < numberOfBids - i - 1; j++) {\r\n            if (bids[j] > bids[j + 1]) {\r\n                temp = bids[j];\r\n                bids[j] = bids[j + 1];\r\n                bids[j + 1] = temp;\r\n            }\r\n        }\r\n    }\r\n}",
    "feedback": "q1:The program prompts the user correctly for the number of rows and columns and attempts to print a grid of asterisks. However, the inner loop starts from 1, which results in one fewer asterisk printed in each row than specified by the user. The correct loop should start from 0 to ensure the right number of asterisks is printed. q2:The average is calculated using integer division. This can lead to incorrect results if the sum is not perfectly divisible by 3.  q3:The program effectively calculates the total price of groceries based on user input for weight and price, and it correctly applies discounts."
  },
  {
    "student_id": "20621249",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\n#define SIZE 10\n\nint main(){\n    int arr[SIZE];\n    int size=0;\n    int index1=0;\n    int index2=0;\n    int sum=0;\n\n    printf(\"\\nEnter the size of the array (N>=5) :\");\n    scanf(\"%d\",&size);\n\n    while(size<5){\n        printf(\"\\nSize of the array has to be >= 5\\n\");\n        printf(\"\\nEnter the size of the array (N>=5) :\");\n        scanf(\"%d\",&size);\n    }\n\n    //input for the array\n    printf(\"\\nEnter the array elements:\");\n    for(int i=0;i<size;i++){\n        printf(\"\\nElement [%d]: \",i);\n        scanf(\"%d\",(arr + i));\n    }\n\n    printf(\"\\nEnter the indices of the two elements (0 <= index 1, index 2 <%d): \",size);\n    scanf(\"%d %d\",&index1,&index2);\n\n    while(index1<0 || index2>=size){\n        printf(\"\\nError: Indices must be within range of the elements. Please try again. \");\n        printf(\"\\nEnter the indices of the two elements (0 <= index 1, index 2 <%d): \",size);\n        scanf(\"%d %d\",&index1,&index2);\n    }\n\n    if(index1>=0 && index2<size){\n        sum=*(arr + index1) + *(arr + index2);\n        printf(\"\\nThe sum of the values at indices %d and %d is: %d\",index1,index2,sum);\n    }\n\n    return 0;\n}\n/* --- q2.c --- */\n#include <stdio.h>\n#define NAME_LENGTH 50\n#define SIZE 3\n\nfloat calculateAverage(const float marks[], int count){\n    float sum=0;\n    float average=0;\n    for(int i=0;i<3;i++){\n        sum=sum+marks[i];\n        count++;\n    }\n    average=sum/count;\n    return average;\n}\n\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]){\n    for(int i=0;i<3;i++){\n        printf(\"\\n%s: %.2f\",names[i],marks[i]);\n    }\n}\n\nint main(){\n    char names[SIZE][NAME_LENGTH];\n    float marks[SIZE];\n\n    for(int i=0;i<SIZE;i++){\n        printf(\"\\nEnter the name of student [%d]: \",i+1);\n        scanf(\"%s\",names[i]);\n        printf(\"\\nEnter the mark of student [%d]: \",i+1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    printf(\"\\nStudent Names and Marks:\");\n    displayStudentData(names,marks);\n\n    printf(\"\\nAverage Mark: %.2f\",calculateAverage(marks,0));\n\n    return  0;\n}\n/* --- q3.c --- */\n#include <stdio.h>\n#define BUFFER 20\nint main(){\n    int arr[BUFFER];\n    int num_bids=0;\n    int highest_bid=0;\n\n    printf(\"\\nEnter the number of bids: \");\n    scanf(\"%d\",&num_bids);\n\n    while(num_bids<2){\n        printf(\"\\nError: Number of bids must be at least 2. Please try again.\");\n        printf(\"\\nEnter the number of bids: \");\n        scanf(\"%d\",&num_bids);\n    }\n\n    printf(\"\\nEnter the bids (must be at least $100000): \");\n    for(int i=0;i<num_bids;i++){\n        printf(\"\\nBid %d: \",i+1);\n        scanf(\"%d\",&arr[i]);\n\n        while(arr[i]<100000){\n            printf(\"\\nError: Bid must be at least $100000. Please try again.\");\n            printf(\"\\nBid %d: \",i+1);\n            scanf(\"%d\",&arr[i]);\n        }\n        \n    }\n\n    //Comparison to see which is the highest bid\n    for(int i=0;i<num_bids;i++){\n        for(int j=0;j<num_bids;j++){\n            if(arr[i]>arr[j]){\n            highest_bid=arr[i];\n            }\n            else if(arr[j]>arr[i]){\n            highest_bid=arr[j];\n            }\n        }\n    }\n    \n    printf(\"\\nThe highest bid is: $%d\",highest_bid);\n    return 0;\n} ",
    "feedback": "q1:The inner loop reuses the variable i, which can cause confusion and incorrect behavior. Use different variable names for the outer and inner loops q2:The program correctly computes the sum, average, product, minimum, and maximum of three integers entered by the user. The logic is clear and the expected results are produced accurately.You can simplify the min/max logic using the if-else structure. q3:The program correctly calculates the total and final cost for various product types based on user input.It might be more appropriate to use float for both price and discount to handle decimal valuesThe calculation for total and final costs is repeated in every case. You could refactor this into a separate function or use a single calculation section after gathering the input for each product type."
  },
  {
    "student_id": "20615279",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\r\nint main (){\r\n\r\n    //initiate values for N and indices 1 and 2\r\n    int N;\r\n    int ind1,ind2;\r\n\r\n    //Let user input the size of array\r\n    do{\r\n    printf(\"Enter the size of array (N>=5):\");\r\n    scanf(\"%d\",&N);\r\n    if(N < 5){ //validate if the size of array is at least 5 or not\r\n        printf(\"Enter a number that is at least 5!\\n\"); //output error if the size of array is not at least 5\r\n        }\r\n    }while (N < 5); // Let user input again using do-while loop\r\n\r\n    int *integers = (int *)malloc(N * sizeof(int));//allocate and initialize to 0\r\n    if (integers == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //Ask user to input all the elements \r\n    for(int i = 0; i < N ; i++){\r\n        printf(\"Element %d:\",i);\r\n        scanf(\"%d\",&integers[i]);\r\n    }\r\n    \r\n    //Obtain user input for index 1 and index 2\r\n    do{\r\n        printf(\"Enter the indices of the two elements (0 <= index1 , index2 < %d):\",N);\r\n        scanf(\"%d %d\",&ind1, &ind2);\r\n        if(ind1 < 0 || ind2 >N){  // Check if user's input of indexes is out of boundaries or not\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again\\n\"); // Output error if exceeded the boundaries\r\n        }\r\n\r\n    }while (ind1 < 0 || ind2 >N); //Use do while loop to ensure correct input for indexes are obtained\r\n\r\n    int sum = *(integers + ind1) + *(integers + ind2); //Calculating the sum of the numbers\r\n    printf(\"The sum of the values at indices %d and %d is: %d\",ind1,ind2,sum); //Output sum of numbers\r\n\r\n    free(integers); // Free allocated memory\r\n\r\n    return 0;\r\n}\r\n\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\n//define constants\r\n#define NUM_STUDENTS 3\r\n#define NAME_LENGTH 50\r\n\r\n// function prototypes\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]); \r\n\r\n\r\nint main (){\r\n    //initialize arrays\r\n    char names[NUM_STUDENTS][NAME_LENGTH];\r\n    float marks[NUM_STUDENTS];\r\n\r\n    //Get input of student names and marks from user\r\n    for(int i = 0; i < NUM_STUDENTS; i++){\r\n        printf(\"Enter the name of student%d :\",i+1);\r\n        scanf(\" %[^\\n]\", names[i]);\r\n        printf(\"Enter the mark of student%d :\",i+1);\r\n        scanf(\"%f\",&marks[i]);\r\n    } \r\n    \r\n    //obtain mark average from functions\r\n    float average = calculateAverage(marks, NUM_STUDENTS);\r\n    \r\n    //displaying student data and marks\r\n    displayStudentData(names, marks);\r\n    printf (\"Average Mark: %.2f\",average);\r\n\r\n}\r\n\r\nfloat calculateAverage(const float marks[], int count){\r\n\r\n    //calculating total marks of 3 students\r\n    float total = 0;\r\n    for(int i = 0; i<3;i++){\r\n        total += marks[i];\r\n    }\r\n    \r\n    //calculating average marks of students\r\n    float average = total / count;\r\n    return average;\r\n}\r\n\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[]){\r\n\r\n    //display student data\r\n    printf(\"\\n Student Names and Marks:\\n\");\r\n    for(int i = 0; i<3; i++){\r\n        printf(\"%s : %.2f\\n\",names[i], marks[i]);\r\n    }\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(){\r\n\r\n    int N;\r\n\r\n    //Obtain user input on number of bids\r\n    do{\r\n    printf(\"Enter number of bids:\");\r\n    scanf(\"%d\",&N);\r\n    if(N<2){ //Check if number of bids is less than 2 or not\r\n        printf(\"Error: Number of bids must be at least 2.Please try again!\\n\"); //Output error if user entered a number that is less than 2\r\n    }\r\n    }while(N<2); //use a do while loop to ensure correct input from user\r\n   \r\n\r\n    //allocate and initialise to 0\r\n    int *bids = (int *)malloc(N * sizeof(int));\r\n    if (bids == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    //Obtain bids from user\r\n    for(int i =0; i<N;i++){\r\n        do{\r\n        printf(\"Enter the bids:\");\r\n        scanf(\"%d\",&bids[i]);\r\n        if(bids[i]<100000){ // Check if user input is less than 100000 or not\r\n            printf(\"Bid must be at least $100000.Please try again!\\n\"); //Output error if user input is less than 100000\r\n        }\r\n        }while(bids[i]<100000); //Use do while loops to ensure correct input from user\r\n\r\n    }\r\n\r\n    //Search for the largest bid in the array\r\n    int max = bids[0];\r\n    for(int j = 0; j< N;j++){\r\n        if(bids[j]> max){\r\n            max = bids[j];\r\n        }\r\n    }\r\n\r\n    //Output the highest bid\r\n    printf(\"The highest bid is: $%d\",max);\r\n\r\n    //free the memory\r\n    free(bids);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and successfully prints a grid of asterisks according to the specified dimensions. The logic is sound and functions as intended. q2: Program unable to run correctly, logic error. q3:The program correctly prompts the user for product details, calculates the total price based on the product type, and applies a discount if provided. The logic flows well and achieves the intended functionality."
  },
  {
    "student_id": "20718629",
    "code": "\n/* --- Question1.c --- */\n#include <stdio.h>\r\n#define MAX_SIZE 200\r\n\r\nint main() {\r\n    int n;\r\n    int array[MAX_SIZE]; \r\n    int num1, num2;\r\n\r\n    // Make sure the size of the array (N >= 5)\r\n    do {\r\n        printf(\"Enter the size of the array (N >= 5): \");\r\n        scanf(\"%d\", &n);\r\n\r\n        if (n < 5) {\r\n            printf(\"Error: Size of the array must be at least 5. Please try again.\\n\");\r\n        }\r\n    } while (n < 5);\r\n\r\n    // Prompt the user to enter the element of the array\r\n    printf(\"Enter the array elements:\\n\");\r\n    for (int i = 0; i < n; i++) {\r\n        printf(\"Element %d: \", i);\r\n        scanf(\"%d\", &array[i]);\r\n    }\r\n\r\n    // Prompt the user to enter the two indices \r\n    do {\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", n);\r\n        scanf(\"%d %d\", &num1, &num2);\r\n\r\n        if (num1 < 0 || num1 >= n || num2 < 0 || num2 >= n) {\r\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\r\n        }\r\n    } while (num1 < 0 || num1 >= n || num2 < 0 || num2 >= n);\r\n\r\n    // Calculate the sum using pointer arithmetic\r\n    int sum = *(array + num1) + *(array + num2);\r\n\r\n    // Print the result \r\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", num1, num2, sum);\r\n\r\n    return 0;\r\n}\n/* --- Question2.c --- */\n#include <stdio.h>\r\n\r\n#define NAME_LENGTH 50\r\n#define STUDENT_NUM 3\r\n\r\n//FUnction prototype\r\nfloat calculateAverage(const float marks[], int count);\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], float average);\r\n\r\nint main() {\r\n    char names[STUDENT_NUM][NAME_LENGTH];\r\n    float marks[STUDENT_NUM];\r\n\r\n    // Input student names and marks\r\n    for (int i = 0; i < STUDENT_NUM; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        scanf(\" %[^\\n]\", names[i]);  // Use \" %[^\\n]\" to read a full line of input\r\n        printf(\"Enter the mark of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);\r\n    }\r\n\r\n    // Calculate the average mark\r\n    float average = calculateAverage(marks, STUDENT_NUM);\r\n\r\n    // Display student data and average mark\r\n    displayStudentData(names, marks, average);\r\n\r\n    return 0;\r\n}\r\n\r\n// Function to calculate the average mark\r\nfloat calculateAverage(const float marks[], int count) {\r\n    float sum = 0;\r\n    for (int i = 0; i < count; i++) {\r\n        sum += marks[i];\r\n    }\r\n    return sum / count;\r\n}\r\n\r\n// Function to display student names, marks, and the average mark\r\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], float average) {\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < STUDENT_NUM; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    // Print the result \r\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\r\n}\r\n\r\n\n/* --- Question3.c --- */\n// Question 3\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int count; \r\n    float bids[100];       //Array to store the bid\r\n    float highestbids = 0;\r\n    \r\n    //Prompt the user to input the number of bids\r\n    do { \r\n        printf(\"Enter the number of bids: \");\r\n        scanf(\"%d\", &count);\r\n        \r\n        if (count < 2){\r\n            printf(\"Error: Number of bids must be at least 2. Please try again: \"); //Print the error messages\r\n        }\r\n    } while (count < 2);\r\n    \r\n    //Prompt the users to enter the bids\r\n    printf(\"Enter the bids (must be at least $100000). \\n\");\r\n    \r\n    for (int i = 0 ; i < count; i++){\r\n        printf(\"Bids %d: \", i + 1 );\r\n        scanf(\"%f\", &bids[i]);\r\n        \r\n        if (bids[i] < 100000){  //Print the error messages when bids is smaller than 100000\r\n            printf(\"Error: Bid must be at least $100000. Please try again. \\n\");\r\n            i--;\r\n            continue;\r\n        }\r\n        \r\n        if (bids[i] > highestbids){\r\n            highestbids = bids[i];\r\n        }\r\n    }\r\n    \r\n    // Print the result \r\n    printf(\"THe highest bid is: $ %.2f\", highestbids);\r\n    \r\n    return 0;\r\n}\r\n",
    "feedback": "q1: The loops currently iterate from 0 to rows and 0 to columns, which results in an extra row and column being printed. Instead, the loops should run from 0 to rows - 1 and 0 to columns - 1 q2:The program correctly computes the sum, average, product, smallest, and largest of three integers input by the user. The average is calculated using integer division because both sum and 3 are integers. This can lead to incorrect results if the sum is not perfectly divisible by 3. q3:The program is intended to calculate the total cost of various grocery items based on user input, including handling discounts"
  },
  {
    "student_id": "20702950",
    "code": "\n/* --- Q1.c --- */\n// Online C compiler to run C program online\r\n#include <stdio.h>\r\n\r\nint main() {\r\n    int n, userint, index1, index2;\r\n    int elements[100] = {0};\r\n    printf(\"Enter the size of the array (N >= 5): \");    //Prompt user input for size of array\r\n    scanf(\"%d\",&n);\r\n    while (n < 5) {         //Validates input\r\n        printf(\"Invalid, enter size of array thats at least 5: \");\r\n        scanf(\"%d\",&n);\r\n    }\r\n    printf(\"Enter the array elements: \\n\");     //Asking user to input elements\r\n    for (int i = 0; i < n; i+=1) {\r\n        printf(\"Element %d: \",i+1);\r\n        scanf(\"%d\", &userint);\r\n    }\r\n    printf(\"Enter the indices of the two elements (0 <=index1, index2 < %d): \", n);      //Asking user for index 1 and 2\r\n    scanf(\"%d %d\", &index1, &index2);\r\n    while (index1 < 0 || index2 >= n) {         //Validating both inputs\r\n        printf(\"Error: Indices must be within range of the array elements. Please try again: \");\r\n        scanf(\"%d %d\", &index1, &index2);\r\n    }\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int bid, userint, largest;\r\n    printf(\"Enter the number of bids: \");   //Asking user to input number of bids\r\n    scanf(\"%d\", &bid);\r\n    while (bid < 2) {       //Validating that input\r\n        printf(\"Error: The number of bids must be at least 2. Please try again: \");\r\n        scanf(\"%d\", &bid);\r\n    }\r\n    int bids[100] = {0};\r\n    printf(\"Enter the bids (must be at least $100000)\\n\");  //User inputting all the bids \r\n    for (int i = 1; i <= bid; i+= 1) {\r\n        printf(\"Bid %d:\", i);\r\n        scanf(\"%d\",&userint);\r\n        while (userint < 100000) {      //Validating the bids\r\n            printf(\"Error: Bid must be at least $100000. Try Again :\");\r\n            scanf(\"%d\",&userint);\r\n        }\r\n        bids[i-1] = userint;\r\n    }\r\n    for (int i = 0; i < bid; i +=1) {   //Checking which bid is the largest\r\n        if (bids[i] > largest) {\r\n            largest = bids[i];\r\n        }\r\n    }\r\n    printf(\"The highest bid is $%d\", largest);\r\n\r\n    return 0;\r\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: The program correctly calculates the sum, product, and identifies the largest and smallest integers from three inputs. q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20690629",
    "code": "",
    "feedback": "q1: There is a missing semicolon at the end of the return 0 statement. Otherwise fine. q2:The program attempts to calculate the sum, average, product, and smallest of three integers. However, there are significant syntax and logical errors that prevent it from functioning correctly."
  },
  {
    "student_id": "20409676",
    "code": "\n/* --- Q1.c --- */\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\r\nint main()\r\n{\r\n    int N, index1, index2;\r\n    \r\n    printf(\"Enter the size of the array (N ≥ 5): \");;\r\n    \r\n    scanf(\"%d\", &N);\r\n    \r\n    while (N<5) {\r\n        printf(\"invalid input\");\r\n        scanf(\"%d\", &N);\r\n        \r\n    }\r\n    \r\n    //Dynamically allocate memory for the array using pointers.\r\n    int *p = (int *)malloc(N * sizeof(int));\r\n    \r\n    printf(\"Enter the array elements:\\n\", N);\r\n    for (int i = -1; i < N; i++) {\r\n        printf(\"Element %d: \", i + 1);  \r\n        scanf(\"%d\", &p[i]); \r\n    }\r\n    \r\n    do{\r\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\r\n        scanf(\"%d %d\", &index1, &index2);\r\n            \r\n        if (index1 < 0, index1 >= N, index2 < 0, index2 >= N) {\r\n            printf(\"Error: Indices must be within the range of array elements. PLease try again.\", N-1);\r\n            }\r\n    }\r\n \r\n    while (index1 < 0 || index1 >= N || index2 < 0 || index2 >= N);\r\n        int *p1 = p + index1;  // Pointer to the first element\r\n        int *p2 = p + index2;  // Pointer to the second element\r\n        int sum = *p1 + *p2;\r\n        printf(\"The sum of the values at indices %d and %d is : %d\", index1, index2, sum);\r\n        \r\n    return 0;\r\n        \r\n}\n/* --- Q2.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    char names[3][51];  \r\n    float marks[3], calculateAverage; \r\n    int count;\r\n\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"Enter the name of student %d: \", i + 1);\r\n        // using scanf to read the full name with spaces\r\n        scanf(\" %[^\\n]\", names[i]);  // this will read until a newline is encountered\r\n        \r\n        printf(\"Enter the marks of student %d: \", i + 1);\r\n        scanf(\"%f\", &marks[i]);  // read the marks as a float\r\n        \r\n        count += marks[i]; //sums the marks of student\r\n    }\r\n    \r\n    calculateAverage = (float)count / 3;\r\n\r\n    //to Display name and marks\r\n    printf(\"\\nStudent Names and Marks:\\n\");\r\n    for (int i = 0; i < 3; i++) {\r\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\r\n    }\r\n    printf(\"\\nAverage Mark: %.2f\\n\", calculateAverage); //displays average mark\r\n\r\n    return 0;\r\n}\n/* --- Q3.c --- */\n#include <stdio.h>\r\n\r\nint main() {\r\n    int N;\r\n\r\n    printf(\"Enter the number of bids: \");\r\n    scanf(\"%d\", &N);\r\n\r\n    if (N < 2) {\r\n        printf(\"Error: You need at least two bids.\\n\");\r\n        return 0;\r\n    }\r\n    // If N is valid, proceed to enter the bids\r\n    float highest_bid, bid;\r\n\r\n    printf(\"Enter bid (minimum $100,000): \");\r\n    for (int i = 1; i <= N; i++) {\r\n        printf(\"Enter bid #%d (minimum $100,000): \", i);\r\n        scanf(\"%f\", &bid);\r\n\r\n        // Check if the entered bid is valid\r\n        while (bid < 100000) {\r\n            printf(\"Invalid bid! The bid must be at least $100,000. Enter bid #%d again: \", i);\r\n            scanf(\"%f\", &bid);\r\n        }\r\n        printf(\"The highest bid is: %.2f\\n\", highest_bid);\r\n    }\r\n    return 0;\r\n}\r\n",
    "feedback": "q1:The program correctly prompts the user for the number of rows and columns and uses nested loops to print a grid of asterisks based on that input. The logic is sound and produces the expected output. q2:The calculation of the smallest number has a logical flaw. Specifically, the last condition for finding the smallest number incorrectly compares number2 to number3 instead of number1. It should be if (number1 >= number2 && number1 >= number3) to correctly identify the smallest value. q3: syntax error. Code ot runnable. The discounted price calculation is incorrect. The formula discprice = cost / discount; When printing the total cost and discounted price, the use of &cost and &discprice is incorrect.The program has a case for exiting (case 5), but this should be case 0 as per your initial prompt. The switch statement should include a proper handling for the exit condition.The code for each case is largely identical. You could create a function to handle the input and calculations to avoid redundancy."
  },
  {
    "student_id": "20616849",
    "code": "\n/* --- Question1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N, *array, index1, index2, sum;\n\n    //User input\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"Error: N must be greater or equal to 5. Please try again.\\n\");\n        }\n    } while (N < 5);\n\n    //Allocate memory to array\n    array = (int *)malloc(N * sizeof(int));\n    if (array == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n\n    //Input elements to array\n    printf(\"Enter the array elements:\\n\");\n    for (int i = 0; i < N; i++) {\n        printf(\"Element %d: \", i);\n        scanf(\"%d\", (array + i));\n    }\n\n    //User input\n    while (1) {\n        printf(\"Enter the indices of the two elements (0 <= index1, index2 < %d): \", N);\n        scanf(\"%d %d\", &index1, &index2);\n\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\n            break; // Valid indices\n        } else {\n            printf(\"Error: Indices must be within the range of the array elements. Please try again.\\n\");\n        }\n    }\n\n    //Calculating the sum\n    sum = *(array + index1) + *(array + index2);\n\n    //Print the sum\n    printf(\"The sum of the values at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    //Release allocated memory\n    free(array);\n\n    return 0;\n}\n/* --- Question2.c --- */\n#include <stdio.h>\n\nint main() {\n    //Store user information (names & marks)\n    char names[3][50]; // Number of student (3), Name length (50)\n    float marks[3];\n    int i;\n\n    //Prompt user input\n    for (i = 0; i < 3; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]); // Input name (handles spaces)\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]); // Input marks\n    }\n\n    //calculate average mark\n    float Average(const float marks[], int count) {\n    float sum = 0.0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n    //Display student names, marks, and the average marks\n    void displayStudentData(const char names[][50], const float marks[], int count) {\n    printf(\"\\nStudent Names and Marks:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"%s: %.2f\\n\", names[i], marks[i]);\n    }\n}\n\n    float average = Average(marks, 3);\n\n    //Display student data and average mark\n    displayStudentData(names, marks, 3);\n    printf(\"\\nAverage Mark: %.2f\\n\", average);\n\n    return 0;\n}\n/* --- Question3.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int B;                 // Number of bids\n    int *bids = NULL;      // Array to store bid values\n    int highestBid = 0;    // Variable to track the highest bid\n\n    //User input\n    do {\n        printf(\"Enter the number of bids: \");\n        scanf(\"%d\", &B);\n        if (B < 2) {\n            printf(\"Error: Number of bids must be greater or equal to 2. Please try again: \");\n            scanf(\"%d\", &B);\n        }\n    } while (B < 2);\n\n    //Allocate memory to store bids\n    bids = (int *)malloc(B * sizeof(int));\n    if (bids == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1; // Exit the program if memory allocation fails\n    }\n\n    //User input\n    printf(\"Enter the bids (must be at least $100000):\\n\");\n    for (int i = 0; i < B; i++) {\n        do {\n            printf(\"Bid %d: \", i + 1);\n            scanf(\"%d\", &bids[i]);\n            if (bids[i] < 100000) {\n                printf(\"Error: Bid must be at least $100000. Please try again: \");\n                scanf(\"%d\", &bids[i]);\n            }\n        } while (bids[i] < 100000);\n    }\n\n    //Choose the highest bid\n    highestBid = bids[0];\n    for (int i = 1; i < B; i++) {\n        if (bids[i] > highestBid) {\n            highestBid = bids[i];\n        }\n    }\n\n    //Print the highest bid\n    printf(\"The highest bid is: $%d\\n\", highestBid);\n\n    //Release allocated memory\n    free(bids);\n\n    return 0;\n}",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. Q2: incorrect smallest.  there are logical errors in the conditions used to determine the smallest and largest values. q3: syntax errors. The program is intended to calculate the total cost of various products based on user input for weight, price, and discount percentage. However, there are several logical issues and improper initializations that need to be addressed."
  },
  {
    "student_id": "20705228",
    "code": "",
    "feedback": "q1: Syntax errors. There are several critical errors that prevent it from functioning correctly. q2: Syntax errors. there are critical logical and syntactical flaws that need to be addressed. q3: Minimally coded"
  },
  {
    "student_id": "20717101",
    "code": "\n/* --- q1.c --- */\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N, *array, index1, index2, valid = 0;\n\n    // Step 1: Prompt user to enter the size of the array\n    do {\n        printf(\"Enter the size of the array (N >= 5): \");\n        scanf(\"%d\", &N);\n        if (N < 5) {\n            printf(\"Invalid input. The size of the array must be at least 5.\\n\");\n        }\n    } while (N < 5);\n\n    // Step 2: Dynamically allocate memory for the array\n    array = (int *)malloc(N * sizeof(int));\n    if (array == NULL) {\n        printf(\"Memory allocation failed.\\n\");\n        return 1;\n    }\n\n    // Step 3: Prompt user to enter each element of the array\n    printf(\"Enter %d elements for the array:\\n\", N);\n    for (int i = 0; i < N; i++) {\n        printf(\"Element [%d]: \", i);\n        scanf(\"%d\", &array[i]);\n    }\n\n    // Step 4: Prompt user for two valid indices\n    do {\n        printf(\"Enter two indices (0 <= index1, index2 < %d):\\n\", N);\n        printf(\"Index 1: \");\n        scanf(\"%d\", &index1);\n        printf(\"Index 2: \");\n        scanf(\"%d\", &index2);\n        if (index1 >= 0 && index1 < N && index2 >= 0 && index2 < N) {\n            valid = 1;\n        } else {\n            printf(\"Invalid indices. Please try again.\\n\");\n        }\n    } while (!valid);\n\n    // Step 5: Compute the sum using pointers\n    int sum = *(array + index1) + *(array + index2);\n\n    // Step 6: Print the sum\n    printf(\"The sum of elements at indices %d and %d is: %d\\n\", index1, index2, sum);\n\n    // Free dynamically allocated memory\n    free(array);\n\n    return 0;\n}\n\n/* --- q2.c --- */\n#include <stdio.h>\n\n#define NUM_STUDENTS 3\n#define NAME_LENGTH 50\n\n// Function prototypes\nfloat calculateAverage(const float marks[], int count);\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count);\n\nint main() {\n    char names[NUM_STUDENTS][NAME_LENGTH];\n    float marks[NUM_STUDENTS];\n    int i;\n\n    // Input student names and marks\n    for (i = 0; i < NUM_STUDENTS; i++) {\n        printf(\"Enter the name of student %d: \", i + 1);\n        scanf(\" %[^\\n]\", names[i]);  // Read name including spaces\n        printf(\"Enter the mark of student %d: \", i + 1);\n        scanf(\"%f\", &marks[i]);\n    }\n\n    // Calculate average marks\n    float average = calculateAverage(marks, NUM_STUDENTS);\n\n    // Display student data and average marks\n    displayStudentData(names, marks, NUM_STUDENTS);\n    printf(\"Average Mark: %.2f\\n\", average);\n\n    return 0;\n}\n\n// Function to calculate the average of the marks\nfloat calculateAverage(const float marks[], int count) {\n    float sum = 0;\n    for (int i = 0; i < count; i++) {\n        sum += marks[i];\n    }\n    return sum / count;\n}\n\n// Function to display student names, marks, and the average\nvoid displayStudentData(const char names[][NAME_LENGTH], const float marks[], int count) {\n    printf(\"\\nStudent Data:\\n\");\n    for (int i = 0; i < count; i++) {\n        printf(\"Student %d: %s, Mark: %.2f\\n\", i + 1, names[i], marks[i]);\n    }\n}\n\n/* --- q3.c --- */\n#include <stdio.h>\n\nint main() {\n    int N, i;\n    float highestBid = 0;\n\n    // Prompt user for the number of bids\n    printf(\"Enter the number of bids (minimum 2): \");\n    scanf(\"%d\", &N);\n\n    // Validate that N is at least 2\n    if (N < 2) {\n        printf(\"Error: At least two bids are required to determine the highest bid.\\n\");\n        return 1; // Exit program\n    }\n\n    float bids[N];\n\n    // Input bids with validation\n    for (i = 0; i < N; i++) {\n        printf(\"Enter bid %d (minimum $100,000): \", i + 1);\n        scanf(\"%f\", &bids[i]);\n\n        // Validate bid amount\n        while (bids[i] < 100000) {\n            printf(\"Invalid bid! Each bid must be at least $100,000.\\n\");\n            printf(\"Enter bid %d again: \", i + 1);\n            scanf(\"%f\", &bids[i]);\n        }\n\n        // Track the highest bid\n        if (bids[i] > highestBid) {\n            highestBid = bids[i];\n        }\n    }\n\n    // Output the highest bid\n    printf(\"\\nThe highest bid is: $%.2f\\n\", highestBid);\n\n    return 0;\n}\n\n",
    "feedback": "q1:The program correctly prints a grid of asterisks according to the number of rows and columns specified by the user. The nested loops work as intended, creating the expected output. q2: Syntax error, There is an extraneous comma after the count variable declaration. Otherwise,  The program effectively calculates the sum, average, product, smallest, and largest of a series of integers entered by the user.  q3:The program is designed to calculate the total cost of various grocery items based on user input, including handling discounts."
  },
  {
    "student_id": "20717489",
    "code": "",
    "feedback": "q1:The program aims to create a rectangular pattern of asterisks based on user-defined dimensions (rows and columns). However, there are issues with the implementation that prevent it from functioning as intended. q2:The program attempts to read a specified number of integers and calculate their sum, average, product, smallest, and largest values. However, there are several logical errors that prevent it from functioning correctly.\n    Input Handling: The scanf_s for count is incorrect; it should use the address-of operator (&count).\n    Array Declaration: The integer variable is not defined as an array. You need to declare it as an array to hold the integers.\n    Calculation Logic: The sum, average, product, smallest, and largest calculations are not correctly implemented:\n        You need to use the value of integer[i] when updating sum, average, product, smallest, and biggest.\n        The logic for finding the smallest and largest integers is flawed.\n    Output Statements: The printf statements do not include format specifiers, which will lead to incorrect output. q3: no submission"
  }
]